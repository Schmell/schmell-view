import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValue: z.ZodType<Prisma.JsonValue> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(JsonValue)),
  z.lazy(() => z.record(JsonValue)),
]);

export type JsonValueType = z.infer<typeof JsonValue>;

export const NullableJsonValue = z
  .union([JsonValue, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValue: z.ZodType<Prisma.InputJsonValue> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(InputJsonValue.nullable())),
  z.lazy(() => z.record(InputJsonValue.nullable())),
]);

export type InputJsonValueType = z.infer<typeof InputJsonValue>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const SeriesScalarFieldEnumSchema = z.enum(['id','name','description','rest','organizationId','publisherId','createdAt','updatedAt']);

export const EventScalarFieldEnumSchema = z.enum(['id','eventeid','uniqueIdString','name','eventwebsite','venueName','description','titleImage','public','fileInfo','resultColumns','rest','email','organizationId','publisherId','seriesId','venueId','createdAt','updatedAt']);

export const RaceScalarFieldEnumSchema = z.enum(['id','raceId','uniqueRaceString','name','starts','rank','date','time','notes','sailed','resultColumns','rest','createdAt','updatedAt','eventId','publisherId','compId']);

export const CompScalarFieldEnumSchema = z.enum(['id','compId','raceId','club','boat','skipper','fleet','division','rating','rank','nett','total','rest','image','publisherId','createdAt','updatedAt']);

export const ResultScalarFieldEnumSchema = z.enum(['id','resultId','finish','start','points','position','discard','corrected','resultType','elasped','supposedRating','elapsedWin','ratingWin','rrset','publisherId','eventId','compId','raceId','createdAt','updatedAt']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','description','tag','website','email','logo','titleImage','ownerId','createdAt','updatedAt']);

export const VenueScalarFieldEnumSchema = z.enum(['id','name','website','email','burgee','address','publisherId','createdAt','updatedAt']);

export const EventCommentScalarFieldEnumSchema = z.enum(['type','ref','comment','eventId','userId','id','createdAt','updatedAt']);

export const FollowScalarFieldEnumSchema = z.enum(['id','userId','type','seriesId','eventId','organizationId','raceId','compId','updatedAt','createdAt']);

export const LikeScalarFieldEnumSchema = z.enum(['id','userId','type','seriesId','eventId','organizationId','raceId','compId','updatedAt','createdAt','eventCommentId']);

export const UserScalarFieldEnumSchema = z.enum(['id','username','firstname','lastname','email','email_verified','name','avatar']);

export const UserSettingsScalarFieldEnumSchema = z.enum(['id','theme','language','userId']);

export const SessionScalarFieldEnumSchema = z.enum(['id','user_id','active_expires','idle_expires']);

export const KeyScalarFieldEnumSchema = z.enum(['id','hashed_password','user_id']);

export const VerificationTokenScalarFieldEnumSchema = z.enum(['id','user_id','expires']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((v) => transformJsonNull(v));

export const QueryModeSchema = z.enum(['default','insensitive']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]);

export const NullsOrderSchema = z.enum(['first','last']);
/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// SERIES SCHEMA
/////////////////////////////////////////

export const SeriesSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  /**
   * .optional
   */
  description: z.string().nullish(),
  rest: NullableJsonValue.optional(),
  organizationId: z.string().nullish(),
  publisherId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Series = z.infer<typeof SeriesSchema>

/////////////////////////////////////////
// EVENT SCHEMA
/////////////////////////////////////////

export const EventSchema = z.object({
  id: z.string().cuid(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().nullish(),
  venueName: z.string().nullish(),
  description: z.string().nullish(),
  titleImage: z.string().nullish(),
  public: z.boolean(),
  /**
   * [fileInfo]
   */
  fileInfo: NullableJsonValue.optional(),
  /**
   * [resultColumns]
   */
  resultColumns: NullableJsonValue.optional(),
  /**
   * [eventRest]
   */
  rest: NullableJsonValue.optional(),
  email: z.string().nullish(),
  organizationId: z.string().nullish(),
  publisherId: z.string().nullish(),
  seriesId: z.string().nullish(),
  venueId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Event = z.infer<typeof EventSchema>

/////////////////////////////////////////
// RACE SCHEMA
/////////////////////////////////////////

export const RaceSchema = z.object({
  id: z.string().cuid(),
  raceId: z.string().nullish(),
  uniqueRaceString: z.string(),
  name: z.string().nullish(),
  starts: NullableJsonValue.optional(),
  rank: z.string().nullish(),
  date: z.string().nullish(),
  time: z.string().nullish(),
  notes: z.string().nullish(),
  sailed: z.string().nullish(),
  resultColumns: NullableJsonValue.optional(),
  /**
   * [raceRest]
   */
  rest: NullableJsonValue.optional(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
  eventId: z.string().nullish(),
  publisherId: z.string().nullish(),
  compId: z.string().nullish(),
})

export type Race = z.infer<typeof RaceSchema>

/////////////////////////////////////////
// COMP SCHEMA
/////////////////////////////////////////

export const CompSchema = z.object({
  id: z.string().cuid(),
  compId: z.string(),
  raceId: z.string().nullish(),
  club: z.string().nullish(),
  boat: z.string().nullish(),
  skipper: z.string().nullish(),
  fleet: z.string().nullish(),
  division: z.string().nullish(),
  rating: z.string().nullish(),
  rank: z.string().nullish(),
  nett: z.string().nullish(),
  total: z.string().nullish(),
  /**
   * [compRest]
   */
  rest: NullableJsonValue.optional(),
  image: z.string().nullish(),
  publisherId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Comp = z.infer<typeof CompSchema>

/////////////////////////////////////////
// RESULT SCHEMA
/////////////////////////////////////////

export const ResultSchema = z.object({
  id: z.string().cuid(),
  resultId: z.string().nullish(),
  finish: z.string().nullish(),
  start: z.string().nullish(),
  points: z.string().nullish(),
  position: z.string().nullish(),
  discard: z.string().nullish(),
  corrected: z.string().nullish(),
  resultType: z.string().nullish(),
  elasped: z.string().nullish(),
  supposedRating: z.string().nullish(),
  elapsedWin: z.string().nullish(),
  ratingWin: z.string().nullish(),
  rrset: z.string().nullish(),
  publisherId: z.string(),
  eventId: z.string().nullish(),
  compId: z.string().nullish(),
  raceId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Result = z.infer<typeof ResultSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullish(),
  tag: z.string().nullish(),
  website: z.string().nullish(),
  email: z.string().nullish(),
  /**
   * .url
   */
  logo: z.string().nullish(),
  titleImage: z.string().nullish(),
  ownerId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// VENUE SCHEMA
/////////////////////////////////////////

export const VenueSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  website: z.string().nullish(),
  email: z.string().nullish(),
  burgee: z.string().nullish(),
  address: NullableJsonValue.optional(),
  publisherId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Venue = z.infer<typeof VenueSchema>

/////////////////////////////////////////
// EVENT COMMENT SCHEMA
/////////////////////////////////////////

export const eventCommentSchema = z.object({
  type: z.string().nullish(),
  ref: z.string().nullish(),
  comment: z.string(),
  eventId: z.string().nullish(),
  userId: z.string(),
  id: z.string().cuid(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type eventComment = z.infer<typeof eventCommentSchema>

/////////////////////////////////////////
// FOLLOW SCHEMA
/////////////////////////////////////////

export const followSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().nullish(),
  eventId: z.string().nullish(),
  organizationId: z.string().nullish(),
  raceId: z.string().nullish(),
  compId: z.string().nullish(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
})

export type follow = z.infer<typeof followSchema>

/////////////////////////////////////////
// LIKE SCHEMA
/////////////////////////////////////////

export const likeSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().nullish(),
  eventId: z.string().nullish(),
  organizationId: z.string().nullish(),
  raceId: z.string().nullish(),
  compId: z.string().nullish(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  eventCommentId: z.string().nullish(),
})

export type like = z.infer<typeof likeSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().nullish(),
  lastname: z.string().nullish(),
  email: z.string().nullish(),
  email_verified: z.number().int().nullish(),
  name: z.string().nullish(),
  avatar: z.string().nullish(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// USER SETTINGS SCHEMA
/////////////////////////////////////////

export const UserSettingsSchema = z.object({
  id: z.string().cuid(),
  theme: z.string().nullish(),
  language: z.string().nullish(),
  userId: z.string().nullish(),
})

export type UserSettings = z.infer<typeof UserSettingsSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// KEY SCHEMA
/////////////////////////////////////////

export const KeySchema = z.object({
  id: z.string(),
  hashed_password: z.string().nullish(),
  user_id: z.string(),
})

export type Key = z.infer<typeof KeySchema>

/////////////////////////////////////////
// VERIFICATION TOKEN SCHEMA
/////////////////////////////////////////

export const VerificationTokenSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  expires: z.bigint(),
})

export type VerificationToken = z.infer<typeof VerificationTokenSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// SERIES
//------------------------------------------------------

export const SeriesIncludeSchema: z.ZodType<Prisma.SeriesInclude> = z.object({
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Org: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  Venues: z.union([z.boolean(),z.lazy(() => VenueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SeriesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SeriesArgsSchema: z.ZodType<Prisma.SeriesDefaultArgs> = z.object({
  select: z.lazy(() => SeriesSelectSchema).optional(),
  include: z.lazy(() => SeriesIncludeSchema).optional(),
}).strict();

export const SeriesCountOutputTypeArgsSchema: z.ZodType<Prisma.SeriesCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SeriesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SeriesCountOutputTypeSelectSchema: z.ZodType<Prisma.SeriesCountOutputTypeSelect> = z.object({
  Events: z.boolean().optional(),
  follow: z.boolean().optional(),
  like: z.boolean().optional(),
  Venues: z.boolean().optional(),
}).strict();

export const SeriesSelectSchema: z.ZodType<Prisma.SeriesSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  rest: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Org: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  Venues: z.union([z.boolean(),z.lazy(() => VenueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SeriesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EVENT
//------------------------------------------------------

export const EventIncludeSchema: z.ZodType<Prisma.EventInclude> = z.object({
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
  Races: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  Comps: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  comments: z.union([z.boolean(),z.lazy(() => eventCommentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EventArgsSchema: z.ZodType<Prisma.EventDefaultArgs> = z.object({
  select: z.lazy(() => EventSelectSchema).optional(),
  include: z.lazy(() => EventIncludeSchema).optional(),
}).strict();

export const EventCountOutputTypeArgsSchema: z.ZodType<Prisma.EventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EventCountOutputTypeSelectSchema: z.ZodType<Prisma.EventCountOutputTypeSelect> = z.object({
  Races: z.boolean().optional(),
  Results: z.boolean().optional(),
  follow: z.boolean().optional(),
  like: z.boolean().optional(),
  Comps: z.boolean().optional(),
  comments: z.boolean().optional(),
}).strict();

export const EventSelectSchema: z.ZodType<Prisma.EventSelect> = z.object({
  id: z.boolean().optional(),
  eventeid: z.boolean().optional(),
  uniqueIdString: z.boolean().optional(),
  name: z.boolean().optional(),
  eventwebsite: z.boolean().optional(),
  venueName: z.boolean().optional(),
  description: z.boolean().optional(),
  titleImage: z.boolean().optional(),
  public: z.boolean().optional(),
  fileInfo: z.boolean().optional(),
  resultColumns: z.boolean().optional(),
  rest: z.boolean().optional(),
  email: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  seriesId: z.boolean().optional(),
  venueId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
  Races: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  Comps: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  comments: z.union([z.boolean(),z.lazy(() => eventCommentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RACE
//------------------------------------------------------

export const RaceIncludeSchema: z.ZodType<Prisma.RaceInclude> = z.object({
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  Comps: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RaceCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RaceArgsSchema: z.ZodType<Prisma.RaceDefaultArgs> = z.object({
  select: z.lazy(() => RaceSelectSchema).optional(),
  include: z.lazy(() => RaceIncludeSchema).optional(),
}).strict();

export const RaceCountOutputTypeArgsSchema: z.ZodType<Prisma.RaceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RaceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RaceCountOutputTypeSelectSchema: z.ZodType<Prisma.RaceCountOutputTypeSelect> = z.object({
  Results: z.boolean().optional(),
  follow: z.boolean().optional(),
  like: z.boolean().optional(),
  Comps: z.boolean().optional(),
}).strict();

export const RaceSelectSchema: z.ZodType<Prisma.RaceSelect> = z.object({
  id: z.boolean().optional(),
  raceId: z.boolean().optional(),
  uniqueRaceString: z.boolean().optional(),
  name: z.boolean().optional(),
  starts: z.boolean().optional(),
  rank: z.boolean().optional(),
  date: z.boolean().optional(),
  time: z.boolean().optional(),
  notes: z.boolean().optional(),
  sailed: z.boolean().optional(),
  resultColumns: z.boolean().optional(),
  rest: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  eventId: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  compId: z.boolean().optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  Comps: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RaceCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COMP
//------------------------------------------------------

export const CompIncludeSchema: z.ZodType<Prisma.CompInclude> = z.object({
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  Races: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CompCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CompArgsSchema: z.ZodType<Prisma.CompDefaultArgs> = z.object({
  select: z.lazy(() => CompSelectSchema).optional(),
  include: z.lazy(() => CompIncludeSchema).optional(),
}).strict();

export const CompCountOutputTypeArgsSchema: z.ZodType<Prisma.CompCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CompCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CompCountOutputTypeSelectSchema: z.ZodType<Prisma.CompCountOutputTypeSelect> = z.object({
  Events: z.boolean().optional(),
  Results: z.boolean().optional(),
  follow: z.boolean().optional(),
  like: z.boolean().optional(),
  Races: z.boolean().optional(),
}).strict();

export const CompSelectSchema: z.ZodType<Prisma.CompSelect> = z.object({
  id: z.boolean().optional(),
  compId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  club: z.boolean().optional(),
  boat: z.boolean().optional(),
  skipper: z.boolean().optional(),
  fleet: z.boolean().optional(),
  division: z.boolean().optional(),
  rating: z.boolean().optional(),
  rank: z.boolean().optional(),
  nett: z.boolean().optional(),
  total: z.boolean().optional(),
  rest: z.boolean().optional(),
  image: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  Races: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CompCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RESULT
//------------------------------------------------------

export const ResultIncludeSchema: z.ZodType<Prisma.ResultInclude> = z.object({
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
}).strict()

export const ResultArgsSchema: z.ZodType<Prisma.ResultDefaultArgs> = z.object({
  select: z.lazy(() => ResultSelectSchema).optional(),
  include: z.lazy(() => ResultIncludeSchema).optional(),
}).strict();

export const ResultSelectSchema: z.ZodType<Prisma.ResultSelect> = z.object({
  id: z.boolean().optional(),
  resultId: z.boolean().optional(),
  finish: z.boolean().optional(),
  start: z.boolean().optional(),
  points: z.boolean().optional(),
  position: z.boolean().optional(),
  discard: z.boolean().optional(),
  corrected: z.boolean().optional(),
  resultType: z.boolean().optional(),
  elasped: z.boolean().optional(),
  supposedRating: z.boolean().optional(),
  elapsedWin: z.boolean().optional(),
  ratingWin: z.boolean().optional(),
  rrset: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  compId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  Owner: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  Events: z.boolean().optional(),
  Series: z.boolean().optional(),
  follow: z.boolean().optional(),
  like: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  tag: z.boolean().optional(),
  website: z.boolean().optional(),
  email: z.boolean().optional(),
  logo: z.boolean().optional(),
  titleImage: z.boolean().optional(),
  ownerId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Owner: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// VENUE
//------------------------------------------------------

export const VenueIncludeSchema: z.ZodType<Prisma.VenueInclude> = z.object({
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => VenueCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const VenueArgsSchema: z.ZodType<Prisma.VenueDefaultArgs> = z.object({
  select: z.lazy(() => VenueSelectSchema).optional(),
  include: z.lazy(() => VenueIncludeSchema).optional(),
}).strict();

export const VenueCountOutputTypeArgsSchema: z.ZodType<Prisma.VenueCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => VenueCountOutputTypeSelectSchema).nullish(),
}).strict();

export const VenueCountOutputTypeSelectSchema: z.ZodType<Prisma.VenueCountOutputTypeSelect> = z.object({
  Events: z.boolean().optional(),
  Series: z.boolean().optional(),
}).strict();

export const VenueSelectSchema: z.ZodType<Prisma.VenueSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  website: z.boolean().optional(),
  email: z.boolean().optional(),
  burgee: z.boolean().optional(),
  address: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => VenueCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EVENT COMMENT
//------------------------------------------------------

export const eventCommentIncludeSchema: z.ZodType<Prisma.eventCommentInclude> = z.object({
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  likes: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCommentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const eventCommentArgsSchema: z.ZodType<Prisma.eventCommentDefaultArgs> = z.object({
  select: z.lazy(() => eventCommentSelectSchema).optional(),
  include: z.lazy(() => eventCommentIncludeSchema).optional(),
}).strict();

export const eventCommentCountOutputTypeArgsSchema: z.ZodType<Prisma.eventCommentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => eventCommentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const eventCommentCountOutputTypeSelectSchema: z.ZodType<Prisma.eventCommentCountOutputTypeSelect> = z.object({
  likes: z.boolean().optional(),
}).strict();

export const eventCommentSelectSchema: z.ZodType<Prisma.eventCommentSelect> = z.object({
  type: z.boolean().optional(),
  ref: z.boolean().optional(),
  comment: z.boolean().optional(),
  eventId: z.boolean().optional(),
  userId: z.boolean().optional(),
  id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  likes: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCommentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FOLLOW
//------------------------------------------------------

export const followIncludeSchema: z.ZodType<Prisma.followInclude> = z.object({
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const followArgsSchema: z.ZodType<Prisma.followDefaultArgs> = z.object({
  select: z.lazy(() => followSelectSchema).optional(),
  include: z.lazy(() => followIncludeSchema).optional(),
}).strict();

export const followSelectSchema: z.ZodType<Prisma.followSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  seriesId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  compId: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// LIKE
//------------------------------------------------------

export const likeIncludeSchema: z.ZodType<Prisma.likeInclude> = z.object({
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  eventComment: z.union([z.boolean(),z.lazy(() => eventCommentArgsSchema)]).optional(),
}).strict()

export const likeArgsSchema: z.ZodType<Prisma.likeDefaultArgs> = z.object({
  select: z.lazy(() => likeSelectSchema).optional(),
  include: z.lazy(() => likeIncludeSchema).optional(),
}).strict();

export const likeSelectSchema: z.ZodType<Prisma.likeSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  seriesId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  compId: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  eventCommentId: z.boolean().optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  eventComment: z.union([z.boolean(),z.lazy(() => eventCommentArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  auth_session: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  auth_key: z.union([z.boolean(),z.lazy(() => KeyFindManyArgsSchema)]).optional(),
  UserSettings: z.union([z.boolean(),z.lazy(() => UserSettingsArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  Result: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueFindManyArgsSchema)]).optional(),
  eventComment: z.union([z.boolean(),z.lazy(() => eventCommentFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  auth_session: z.boolean().optional(),
  auth_key: z.boolean().optional(),
  Series: z.boolean().optional(),
  Event: z.boolean().optional(),
  Race: z.boolean().optional(),
  Comp: z.boolean().optional(),
  Result: z.boolean().optional(),
  Organization: z.boolean().optional(),
  Venue: z.boolean().optional(),
  eventComment: z.boolean().optional(),
  follow: z.boolean().optional(),
  like: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  username: z.boolean().optional(),
  firstname: z.boolean().optional(),
  lastname: z.boolean().optional(),
  email: z.boolean().optional(),
  email_verified: z.boolean().optional(),
  name: z.boolean().optional(),
  avatar: z.boolean().optional(),
  auth_session: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  auth_key: z.union([z.boolean(),z.lazy(() => KeyFindManyArgsSchema)]).optional(),
  UserSettings: z.union([z.boolean(),z.lazy(() => UserSettingsArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  Result: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueFindManyArgsSchema)]).optional(),
  eventComment: z.union([z.boolean(),z.lazy(() => eventCommentFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => followFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => likeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER SETTINGS
//------------------------------------------------------

export const UserSettingsIncludeSchema: z.ZodType<Prisma.UserSettingsInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserSettingsArgsSchema: z.ZodType<Prisma.UserSettingsDefaultArgs> = z.object({
  select: z.lazy(() => UserSettingsSelectSchema).optional(),
  include: z.lazy(() => UserSettingsIncludeSchema).optional(),
}).strict();

export const UserSettingsSelectSchema: z.ZodType<Prisma.UserSettingsSelect> = z.object({
  id: z.boolean().optional(),
  theme: z.boolean().optional(),
  language: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  active_expires: z.boolean().optional(),
  idle_expires: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// KEY
//------------------------------------------------------

export const KeyIncludeSchema: z.ZodType<Prisma.KeyInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const KeyArgsSchema: z.ZodType<Prisma.KeyDefaultArgs> = z.object({
  select: z.lazy(() => KeySelectSchema).optional(),
  include: z.lazy(() => KeyIncludeSchema).optional(),
}).strict();

export const KeySelectSchema: z.ZodType<Prisma.KeySelect> = z.object({
  id: z.boolean().optional(),
  hashed_password: z.boolean().optional(),
  user_id: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION TOKEN
//------------------------------------------------------

export const VerificationTokenSelectSchema: z.ZodType<Prisma.VerificationTokenSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  expires: z.boolean().optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const SeriesWhereInputSchema: z.ZodType<Prisma.SeriesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SeriesWhereInputSchema),z.lazy(() => SeriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SeriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SeriesWhereInputSchema),z.lazy(() => SeriesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Org: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Venues: z.lazy(() => VenueListRelationFilterSchema).optional()
}).strict();

export const SeriesOrderByWithRelationInputSchema: z.ZodType<Prisma.SeriesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Org: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  follow: z.lazy(() => followOrderByRelationAggregateInputSchema).optional(),
  like: z.lazy(() => likeOrderByRelationAggregateInputSchema).optional(),
  Venues: z.lazy(() => VenueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SeriesWhereUniqueInputSchema: z.ZodType<Prisma.SeriesWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SeriesWhereInputSchema),z.lazy(() => SeriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SeriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SeriesWhereInputSchema),z.lazy(() => SeriesWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Org: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Venues: z.lazy(() => VenueListRelationFilterSchema).optional()
}).strict());

export const SeriesOrderByWithAggregationInputSchema: z.ZodType<Prisma.SeriesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SeriesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SeriesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SeriesMinOrderByAggregateInputSchema).optional()
}).strict();

export const SeriesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SeriesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema),z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema),z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const EventWhereInputSchema: z.ZodType<Prisma.EventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventeid: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  uniqueIdString: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventwebsite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  public: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  fileInfo: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceListRelationFilterSchema).optional(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comps: z.lazy(() => CompListRelationFilterSchema).optional(),
  comments: z.lazy(() => EventCommentListRelationFilterSchema).optional()
}).strict();

export const EventOrderByWithRelationInputSchema: z.ZodType<Prisma.EventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  fileInfo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultColumns: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByWithRelationInputSchema).optional(),
  Venue: z.lazy(() => VenueOrderByWithRelationInputSchema).optional(),
  Races: z.lazy(() => RaceOrderByRelationAggregateInputSchema).optional(),
  Results: z.lazy(() => ResultOrderByRelationAggregateInputSchema).optional(),
  follow: z.lazy(() => followOrderByRelationAggregateInputSchema).optional(),
  like: z.lazy(() => likeOrderByRelationAggregateInputSchema).optional(),
  Comps: z.lazy(() => CompOrderByRelationAggregateInputSchema).optional(),
  comments: z.lazy(() => eventCommentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EventWhereUniqueInputSchema: z.ZodType<Prisma.EventWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    uniqueIdString: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    uniqueIdString: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  uniqueIdString: z.string().optional(),
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  eventeid: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventwebsite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  public: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  fileInfo: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceListRelationFilterSchema).optional(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comps: z.lazy(() => CompListRelationFilterSchema).optional(),
  comments: z.lazy(() => EventCommentListRelationFilterSchema).optional()
}).strict());

export const EventOrderByWithAggregationInputSchema: z.ZodType<Prisma.EventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  fileInfo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultColumns: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => EventCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EventMinOrderByAggregateInputSchema).optional()
}).strict();

export const EventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventeid: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  uniqueIdString: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventwebsite: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  venueName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  public: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  fileInfo: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  resultColumns: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const RaceWhereInputSchema: z.ZodType<Prisma.RaceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  uniqueRaceString: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  starts: z.lazy(() => JsonNullableFilterSchema).optional(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailed: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comps: z.lazy(() => CompListRelationFilterSchema).optional()
}).strict();

export const RaceOrderByWithRelationInputSchema: z.ZodType<Prisma.RaceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  starts: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rank: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  time: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sailed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultColumns: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Results: z.lazy(() => ResultOrderByRelationAggregateInputSchema).optional(),
  follow: z.lazy(() => followOrderByRelationAggregateInputSchema).optional(),
  like: z.lazy(() => likeOrderByRelationAggregateInputSchema).optional(),
  Comps: z.lazy(() => CompOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RaceWhereUniqueInputSchema: z.ZodType<Prisma.RaceWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    uniqueRaceString: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    uniqueRaceString: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  uniqueRaceString: z.string().optional(),
  AND: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  starts: z.lazy(() => JsonNullableFilterSchema).optional(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailed: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comps: z.lazy(() => CompListRelationFilterSchema).optional()
}).strict());

export const RaceOrderByWithAggregationInputSchema: z.ZodType<Prisma.RaceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  starts: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rank: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  time: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sailed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultColumns: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RaceCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RaceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RaceMinOrderByAggregateInputSchema).optional()
}).strict();

export const RaceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RaceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RaceScalarWhereWithAggregatesInputSchema),z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceScalarWhereWithAggregatesInputSchema),z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  uniqueRaceString: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  starts: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  rank: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sailed: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  resultColumns: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const CompWhereInputSchema: z.ZodType<Prisma.CompWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CompWhereInputSchema),z.lazy(() => CompWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompWhereInputSchema),z.lazy(() => CompWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  compId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  club: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boat: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skipper: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fleet: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  division: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nett: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Races: z.lazy(() => RaceListRelationFilterSchema).optional()
}).strict();

export const CompOrderByWithRelationInputSchema: z.ZodType<Prisma.CompOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  club: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boat: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  skipper: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fleet: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  division: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rank: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nett: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  total: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Results: z.lazy(() => ResultOrderByRelationAggregateInputSchema).optional(),
  follow: z.lazy(() => followOrderByRelationAggregateInputSchema).optional(),
  like: z.lazy(() => likeOrderByRelationAggregateInputSchema).optional(),
  Races: z.lazy(() => RaceOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CompWhereUniqueInputSchema: z.ZodType<Prisma.CompWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    compId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    compId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  compId: z.string().optional(),
  AND: z.union([ z.lazy(() => CompWhereInputSchema),z.lazy(() => CompWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompWhereInputSchema),z.lazy(() => CompWhereInputSchema).array() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  club: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boat: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skipper: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fleet: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  division: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nett: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Races: z.lazy(() => RaceListRelationFilterSchema).optional()
}).strict());

export const CompOrderByWithAggregationInputSchema: z.ZodType<Prisma.CompOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  club: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boat: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  skipper: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fleet: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  division: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rank: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nett: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  total: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CompCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CompMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CompMinOrderByAggregateInputSchema).optional()
}).strict();

export const CompScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CompScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CompScalarWhereWithAggregatesInputSchema),z.lazy(() => CompScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompScalarWhereWithAggregatesInputSchema),z.lazy(() => CompScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  compId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  club: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  boat: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  skipper: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fleet: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  division: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rank: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  nett: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  total: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ResultWhereInputSchema: z.ZodType<Prisma.ResultWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ResultWhereInputSchema),z.lazy(() => ResultWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResultWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResultWhereInputSchema),z.lazy(() => ResultWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finish: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  points: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  discard: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  corrected: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elasped: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  supposedRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elapsedWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ratingWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rrset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ResultOrderByWithRelationInputSchema: z.ZodType<Prisma.ResultOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finish: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  start: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  points: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  discard: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  corrected: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  elasped: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  supposedRating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  elapsedWin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ratingWin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rrset: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Comp: z.lazy(() => CompOrderByWithRelationInputSchema).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByWithRelationInputSchema).optional()
}).strict();

export const ResultWhereUniqueInputSchema: z.ZodType<Prisma.ResultWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ResultWhereInputSchema),z.lazy(() => ResultWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResultWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResultWhereInputSchema),z.lazy(() => ResultWhereInputSchema).array() ]).optional(),
  resultId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finish: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  points: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  discard: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  corrected: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elasped: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  supposedRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elapsedWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ratingWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rrset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ResultOrderByWithAggregationInputSchema: z.ZodType<Prisma.ResultOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finish: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  start: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  points: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  discard: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  corrected: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  elasped: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  supposedRating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  elapsedWin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ratingWin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rrset: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ResultCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ResultMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ResultMinOrderByAggregateInputSchema).optional()
}).strict();

export const ResultScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ResultScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ResultScalarWhereWithAggregatesInputSchema),z.lazy(() => ResultScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResultScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResultScalarWhereWithAggregatesInputSchema),z.lazy(() => ResultScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finish: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  start: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  points: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  discard: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  corrected: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  resultType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  elasped: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  supposedRating: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  elapsedWin: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ratingWin: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rrset: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Owner: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Owner: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByRelationAggregateInputSchema).optional(),
  follow: z.lazy(() => followOrderByRelationAggregateInputSchema).optional(),
  like: z.lazy(() => likeOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    name: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Owner: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VenueWhereInputSchema: z.ZodType<Prisma.VenueWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VenueWhereInputSchema),z.lazy(() => VenueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VenueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VenueWhereInputSchema),z.lazy(() => VenueWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  burgee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.lazy(() => JsonNullableFilterSchema).optional(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional()
}).strict();

export const VenueOrderByWithRelationInputSchema: z.ZodType<Prisma.VenueOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  burgee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const VenueWhereUniqueInputSchema: z.ZodType<Prisma.VenueWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    name: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => VenueWhereInputSchema),z.lazy(() => VenueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VenueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VenueWhereInputSchema),z.lazy(() => VenueWhereInputSchema).array() ]).optional(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  burgee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.lazy(() => JsonNullableFilterSchema).optional(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional()
}).strict());

export const VenueOrderByWithAggregationInputSchema: z.ZodType<Prisma.VenueOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  burgee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => VenueCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VenueMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VenueMinOrderByAggregateInputSchema).optional()
}).strict();

export const VenueScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VenueScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VenueScalarWhereWithAggregatesInputSchema),z.lazy(() => VenueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VenueScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VenueScalarWhereWithAggregatesInputSchema),z.lazy(() => VenueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  website: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  burgee: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const eventCommentWhereInputSchema: z.ZodType<Prisma.eventCommentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => eventCommentWhereInputSchema),z.lazy(() => eventCommentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => eventCommentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => eventCommentWhereInputSchema),z.lazy(() => eventCommentWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  likes: z.lazy(() => LikeListRelationFilterSchema).optional()
}).strict();

export const eventCommentOrderByWithRelationInputSchema: z.ZodType<Prisma.eventCommentOrderByWithRelationInput> = z.object({
  type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ref: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  likes: z.lazy(() => likeOrderByRelationAggregateInputSchema).optional()
}).strict();

export const eventCommentWhereUniqueInputSchema: z.ZodType<Prisma.eventCommentWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => eventCommentWhereInputSchema),z.lazy(() => eventCommentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => eventCommentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => eventCommentWhereInputSchema),z.lazy(() => eventCommentWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  likes: z.lazy(() => LikeListRelationFilterSchema).optional()
}).strict());

export const eventCommentOrderByWithAggregationInputSchema: z.ZodType<Prisma.eventCommentOrderByWithAggregationInput> = z.object({
  type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ref: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => eventCommentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => eventCommentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => eventCommentMinOrderByAggregateInputSchema).optional()
}).strict();

export const eventCommentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.eventCommentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => eventCommentScalarWhereWithAggregatesInputSchema),z.lazy(() => eventCommentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => eventCommentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => eventCommentScalarWhereWithAggregatesInputSchema),z.lazy(() => eventCommentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ref: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const followWhereInputSchema: z.ZodType<Prisma.followWhereInput> = z.object({
  AND: z.union([ z.lazy(() => followWhereInputSchema),z.lazy(() => followWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => followWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => followWhereInputSchema),z.lazy(() => followWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const followOrderByWithRelationInputSchema: z.ZodType<Prisma.followOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  Comp: z.lazy(() => CompOrderByWithRelationInputSchema).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const followWhereUniqueInputSchema: z.ZodType<Prisma.followWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => followWhereInputSchema),z.lazy(() => followWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => followWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => followWhereInputSchema),z.lazy(() => followWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const followOrderByWithAggregationInputSchema: z.ZodType<Prisma.followOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => followCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => followMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => followMinOrderByAggregateInputSchema).optional()
}).strict();

export const followScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.followScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => followScalarWhereWithAggregatesInputSchema),z.lazy(() => followScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => followScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => followScalarWhereWithAggregatesInputSchema),z.lazy(() => followScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const likeWhereInputSchema: z.ZodType<Prisma.likeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => likeWhereInputSchema),z.lazy(() => likeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => likeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => likeWhereInputSchema),z.lazy(() => likeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  eventCommentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  eventComment: z.union([ z.lazy(() => EventCommentNullableRelationFilterSchema),z.lazy(() => eventCommentWhereInputSchema) ]).optional().nullable(),
}).strict();

export const likeOrderByWithRelationInputSchema: z.ZodType<Prisma.likeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Comp: z.lazy(() => CompOrderByWithRelationInputSchema).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentOrderByWithRelationInputSchema).optional()
}).strict();

export const likeWhereUniqueInputSchema: z.ZodType<Prisma.likeWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => likeWhereInputSchema),z.lazy(() => likeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => likeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => likeWhereInputSchema),z.lazy(() => likeWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  eventCommentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  eventComment: z.union([ z.lazy(() => EventCommentNullableRelationFilterSchema),z.lazy(() => eventCommentWhereInputSchema) ]).optional().nullable(),
}).strict());

export const likeOrderByWithAggregationInputSchema: z.ZodType<Prisma.likeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => likeCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => likeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => likeMinOrderByAggregateInputSchema).optional()
}).strict();

export const likeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.likeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => likeScalarWhereWithAggregatesInputSchema),z.lazy(() => likeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => likeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => likeScalarWhereWithAggregatesInputSchema),z.lazy(() => likeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  eventCommentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  username: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_verified: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  auth_session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  auth_key: z.lazy(() => KeyListRelationFilterSchema).optional(),
  UserSettings: z.union([ z.lazy(() => UserSettingsNullableRelationFilterSchema),z.lazy(() => UserSettingsWhereInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  Event: z.lazy(() => EventListRelationFilterSchema).optional(),
  Race: z.lazy(() => RaceListRelationFilterSchema).optional(),
  Comp: z.lazy(() => CompListRelationFilterSchema).optional(),
  Result: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  Venue: z.lazy(() => VenueListRelationFilterSchema).optional(),
  eventComment: z.lazy(() => EventCommentListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_verified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  auth_session: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  auth_key: z.lazy(() => KeyOrderByRelationAggregateInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByRelationAggregateInputSchema).optional(),
  Event: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByRelationAggregateInputSchema).optional(),
  Comp: z.lazy(() => CompOrderByRelationAggregateInputSchema).optional(),
  Result: z.lazy(() => ResultOrderByRelationAggregateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional(),
  Venue: z.lazy(() => VenueOrderByRelationAggregateInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentOrderByRelationAggregateInputSchema).optional(),
  follow: z.lazy(() => followOrderByRelationAggregateInputSchema).optional(),
  like: z.lazy(() => likeOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  username: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_verified: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  auth_session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  auth_key: z.lazy(() => KeyListRelationFilterSchema).optional(),
  UserSettings: z.union([ z.lazy(() => UserSettingsNullableRelationFilterSchema),z.lazy(() => UserSettingsWhereInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  Event: z.lazy(() => EventListRelationFilterSchema).optional(),
  Race: z.lazy(() => RaceListRelationFilterSchema).optional(),
  Comp: z.lazy(() => CompListRelationFilterSchema).optional(),
  Result: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  Venue: z.lazy(() => VenueListRelationFilterSchema).optional(),
  eventComment: z.lazy(() => EventCommentListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_verified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  username: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  firstname: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  lastname: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email_verified: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserSettingsWhereInputSchema: z.ZodType<Prisma.UserSettingsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserSettingsWhereInputSchema),z.lazy(() => UserSettingsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserSettingsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserSettingsWhereInputSchema),z.lazy(() => UserSettingsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  theme: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsOrderByWithRelationInputSchema: z.ZodType<Prisma.UserSettingsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const UserSettingsWhereUniqueInputSchema: z.ZodType<Prisma.UserSettingsWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    userId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    userId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional(),
  AND: z.union([ z.lazy(() => UserSettingsWhereInputSchema),z.lazy(() => UserSettingsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserSettingsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserSettingsWhereInputSchema),z.lazy(() => UserSettingsWhereInputSchema).array() ]).optional(),
  theme: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const UserSettingsOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserSettingsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserSettingsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserSettingsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserSettingsMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserSettingsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserSettingsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema),z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema),z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  theme: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SessionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SessionSumOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
}).strict();

export const KeyWhereInputSchema: z.ZodType<Prisma.KeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const KeyOrderByWithRelationInputSchema: z.ZodType<Prisma.KeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const KeyWhereUniqueInputSchema: z.ZodType<Prisma.KeyWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const KeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.KeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => KeyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => KeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => KeyMinOrderByAggregateInputSchema).optional()
}).strict();

export const KeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.KeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => KeyScalarWhereWithAggregatesInputSchema),z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyScalarWhereWithAggregatesInputSchema),z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const VerificationTokenWhereInputSchema: z.ZodType<Prisma.VerificationTokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
}).strict();

export const VerificationTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenWhereUniqueInputSchema: z.ZodType<Prisma.VerificationTokenWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_id: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_id: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_id: z.string().optional(),
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
}).strict());

export const VerificationTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VerificationTokenCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => VerificationTokenAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationTokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationTokenMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => VerificationTokenSumOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationTokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
}).strict();

export const SeriesCreateInputSchema: z.ZodType<Prisma.SeriesCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Org: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUpdateInputSchema: z.ZodType<Prisma.SeriesUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Org: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesCreateManyInputSchema: z.ZodType<Prisma.SeriesCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const SeriesUpdateManyMutationInputSchema: z.ZodType<Prisma.SeriesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventCreateInputSchema: z.ZodType<Prisma.EventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateInputSchema: z.ZodType<Prisma.EventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUpdateInputSchema: z.ZodType<Prisma.EventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateInputSchema: z.ZodType<Prisma.EventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventCreateManyInputSchema: z.ZodType<Prisma.EventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const EventUpdateManyMutationInputSchema: z.ZodType<Prisma.EventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceCreateInputSchema: z.ZodType<Prisma.RaceCreateInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  compId: z.string().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUncheckedCreateInputSchema: z.ZodType<Prisma.RaceUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUpdateInputSchema: z.ZodType<Prisma.RaceUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceCreateManyInputSchema: z.ZodType<Prisma.RaceCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  compId: z.string().optional().nullable()
}).strict();

export const RaceUpdateManyMutationInputSchema: z.ZodType<Prisma.RaceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompCreateInputSchema: z.ZodType<Prisma.CompCreateInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateInputSchema: z.ZodType<Prisma.CompUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUpdateInputSchema: z.ZodType<Prisma.CompUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateInputSchema: z.ZodType<Prisma.CompUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompCreateManyInputSchema: z.ZodType<Prisma.CompCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const CompUpdateManyMutationInputSchema: z.ZodType<Prisma.CompUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultCreateInputSchema: z.ZodType<Prisma.ResultCreateInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutResultsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutResultsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutResultInputSchema),
  Race: z.lazy(() => RaceCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const ResultUncheckedCreateInputSchema: z.ZodType<Prisma.ResultUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultUpdateInputSchema: z.ZodType<Prisma.ResultUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutResultsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutResultsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneRequiredWithoutResultNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultCreateManyInputSchema: z.ZodType<Prisma.ResultCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultUpdateManyMutationInputSchema: z.ZodType<Prisma.ResultUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrgInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutOrganizationInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrgInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrgNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrgNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueCreateInputSchema: z.ZodType<Prisma.VenueCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional()
}).strict();

export const VenueUncheckedCreateInputSchema: z.ZodType<Prisma.VenueUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional()
}).strict();

export const VenueUpdateInputSchema: z.ZodType<Prisma.VenueUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional()
}).strict();

export const VenueCreateManyInputSchema: z.ZodType<Prisma.VenueCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VenueUpdateManyMutationInputSchema: z.ZodType<Prisma.VenueUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const eventCommentCreateInputSchema: z.ZodType<Prisma.eventCommentCreateInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutEventCommentInputSchema),
  likes: z.lazy(() => likeCreateNestedManyWithoutEventCommentInputSchema).optional()
}).strict();

export const eventCommentUncheckedCreateInputSchema: z.ZodType<Prisma.eventCommentUncheckedCreateInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  likes: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventCommentInputSchema).optional()
}).strict();

export const eventCommentUpdateInputSchema: z.ZodType<Prisma.eventCommentUpdateInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutEventCommentNestedInputSchema).optional(),
  likes: z.lazy(() => likeUpdateManyWithoutEventCommentNestedInputSchema).optional()
}).strict();

export const eventCommentUncheckedUpdateInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.lazy(() => likeUncheckedUpdateManyWithoutEventCommentNestedInputSchema).optional()
}).strict();

export const eventCommentCreateManyInputSchema: z.ZodType<Prisma.eventCommentCreateManyInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const eventCommentUpdateManyMutationInputSchema: z.ZodType<Prisma.eventCommentUpdateManyMutationInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const eventCommentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateManyInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const followCreateInputSchema: z.ZodType<Prisma.followCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const followUncheckedCreateInputSchema: z.ZodType<Prisma.followUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const followUpdateInputSchema: z.ZodType<Prisma.followUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const followUncheckedUpdateInputSchema: z.ZodType<Prisma.followUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const followCreateManyInputSchema: z.ZodType<Prisma.followCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const followUpdateManyMutationInputSchema: z.ZodType<Prisma.followUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const followUncheckedUpdateManyInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeCreateInputSchema: z.ZodType<Prisma.likeCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikeInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikeInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikeInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikeInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  eventComment: z.lazy(() => eventCommentCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const likeUncheckedCreateInputSchema: z.ZodType<Prisma.likeUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const likeUpdateInputSchema: z.ZodType<Prisma.likeUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikeNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikeNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikeNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikeNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const likeUncheckedUpdateInputSchema: z.ZodType<Prisma.likeUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const likeCreateManyInputSchema: z.ZodType<Prisma.likeCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const likeUpdateManyMutationInputSchema: z.ZodType<Prisma.likeUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsCreateInputSchema: z.ZodType<Prisma.UserSettingsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserSettingsInputSchema).optional()
}).strict();

export const UserSettingsUncheckedCreateInputSchema: z.ZodType<Prisma.UserSettingsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  userId: z.string().optional().nullable()
}).strict();

export const UserSettingsUpdateInputSchema: z.ZodType<Prisma.UserSettingsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneWithoutUserSettingsNestedInputSchema).optional()
}).strict();

export const UserSettingsUncheckedUpdateInputSchema: z.ZodType<Prisma.UserSettingsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsCreateManyInputSchema: z.ZodType<Prisma.UserSettingsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  userId: z.string().optional().nullable()
}).strict();

export const UserSettingsUpdateManyMutationInputSchema: z.ZodType<Prisma.UserSettingsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserSettingsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuth_sessionInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuth_sessionNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const KeyCreateInputSchema: z.ZodType<Prisma.KeyCreateInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuth_keyInputSchema)
}).strict();

export const KeyUncheckedCreateInputSchema: z.ZodType<Prisma.KeyUncheckedCreateInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user_id: z.string()
}).strict();

export const KeyUpdateInputSchema: z.ZodType<Prisma.KeyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuth_keyNestedInputSchema).optional()
}).strict();

export const KeyUncheckedUpdateInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const KeyCreateManyInputSchema: z.ZodType<Prisma.KeyCreateManyInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user_id: z.string()
}).strict();

export const KeyUpdateManyMutationInputSchema: z.ZodType<Prisma.KeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateInputSchema: z.ZodType<Prisma.VerificationTokenCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  expires: z.bigint()
}).strict();

export const VerificationTokenUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  expires: z.bigint()
}).strict();

export const VerificationTokenUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateManyInputSchema: z.ZodType<Prisma.VerificationTokenCreateManyInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  expires: z.bigint()
}).strict();

export const VerificationTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationTokenUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValue.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: InputJsonValue.optional()
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EventListRelationFilterSchema: z.ZodType<Prisma.EventListRelationFilter> = z.object({
  every: z.lazy(() => EventWhereInputSchema).optional(),
  some: z.lazy(() => EventWhereInputSchema).optional(),
  none: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const OrganizationNullableRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const UserNullableRelationFilterSchema: z.ZodType<Prisma.UserNullableRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const FollowListRelationFilterSchema: z.ZodType<Prisma.FollowListRelationFilter> = z.object({
  every: z.lazy(() => followWhereInputSchema).optional(),
  some: z.lazy(() => followWhereInputSchema).optional(),
  none: z.lazy(() => followWhereInputSchema).optional()
}).strict();

export const LikeListRelationFilterSchema: z.ZodType<Prisma.LikeListRelationFilter> = z.object({
  every: z.lazy(() => likeWhereInputSchema).optional(),
  some: z.lazy(() => likeWhereInputSchema).optional(),
  none: z.lazy(() => likeWhereInputSchema).optional()
}).strict();

export const VenueListRelationFilterSchema: z.ZodType<Prisma.VenueListRelationFilter> = z.object({
  every: z.lazy(() => VenueWhereInputSchema).optional(),
  some: z.lazy(() => VenueWhereInputSchema).optional(),
  none: z.lazy(() => VenueWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const EventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const followOrderByRelationAggregateInputSchema: z.ZodType<Prisma.followOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const likeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.likeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VenueOrderByRelationAggregateInputSchema: z.ZodType<Prisma.VenueOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SeriesCountOrderByAggregateInputSchema: z.ZodType<Prisma.SeriesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  rest: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SeriesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SeriesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SeriesMinOrderByAggregateInputSchema: z.ZodType<Prisma.SeriesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValue.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: InputJsonValue.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const SeriesNullableRelationFilterSchema: z.ZodType<Prisma.SeriesNullableRelationFilter> = z.object({
  is: z.lazy(() => SeriesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SeriesWhereInputSchema).optional().nullable()
}).strict();

export const VenueNullableRelationFilterSchema: z.ZodType<Prisma.VenueNullableRelationFilter> = z.object({
  is: z.lazy(() => VenueWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => VenueWhereInputSchema).optional().nullable()
}).strict();

export const RaceListRelationFilterSchema: z.ZodType<Prisma.RaceListRelationFilter> = z.object({
  every: z.lazy(() => RaceWhereInputSchema).optional(),
  some: z.lazy(() => RaceWhereInputSchema).optional(),
  none: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const ResultListRelationFilterSchema: z.ZodType<Prisma.ResultListRelationFilter> = z.object({
  every: z.lazy(() => ResultWhereInputSchema).optional(),
  some: z.lazy(() => ResultWhereInputSchema).optional(),
  none: z.lazy(() => ResultWhereInputSchema).optional()
}).strict();

export const CompListRelationFilterSchema: z.ZodType<Prisma.CompListRelationFilter> = z.object({
  every: z.lazy(() => CompWhereInputSchema).optional(),
  some: z.lazy(() => CompWhereInputSchema).optional(),
  none: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const EventCommentListRelationFilterSchema: z.ZodType<Prisma.EventCommentListRelationFilter> = z.object({
  every: z.lazy(() => eventCommentWhereInputSchema).optional(),
  some: z.lazy(() => eventCommentWhereInputSchema).optional(),
  none: z.lazy(() => eventCommentWhereInputSchema).optional()
}).strict();

export const RaceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RaceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResultOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ResultOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CompOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const eventCommentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.eventCommentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventCountOrderByAggregateInputSchema: z.ZodType<Prisma.EventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.lazy(() => SortOrderSchema).optional(),
  venueName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  fileInfo: z.lazy(() => SortOrderSchema).optional(),
  resultColumns: z.lazy(() => SortOrderSchema).optional(),
  rest: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.lazy(() => SortOrderSchema).optional(),
  venueName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMinOrderByAggregateInputSchema: z.ZodType<Prisma.EventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.lazy(() => SortOrderSchema).optional(),
  venueName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const EventNullableRelationFilterSchema: z.ZodType<Prisma.EventNullableRelationFilter> = z.object({
  is: z.lazy(() => EventWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => EventWhereInputSchema).optional().nullable()
}).strict();

export const RaceCountOrderByAggregateInputSchema: z.ZodType<Prisma.RaceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  starts: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  sailed: z.lazy(() => SortOrderSchema).optional(),
  resultColumns: z.lazy(() => SortOrderSchema).optional(),
  rest: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RaceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  sailed: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceMinOrderByAggregateInputSchema: z.ZodType<Prisma.RaceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  sailed: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompCountOrderByAggregateInputSchema: z.ZodType<Prisma.CompCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  club: z.lazy(() => SortOrderSchema).optional(),
  boat: z.lazy(() => SortOrderSchema).optional(),
  skipper: z.lazy(() => SortOrderSchema).optional(),
  fleet: z.lazy(() => SortOrderSchema).optional(),
  division: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  nett: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  rest: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CompMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  club: z.lazy(() => SortOrderSchema).optional(),
  boat: z.lazy(() => SortOrderSchema).optional(),
  skipper: z.lazy(() => SortOrderSchema).optional(),
  fleet: z.lazy(() => SortOrderSchema).optional(),
  division: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  nett: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompMinOrderByAggregateInputSchema: z.ZodType<Prisma.CompMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  club: z.lazy(() => SortOrderSchema).optional(),
  boat: z.lazy(() => SortOrderSchema).optional(),
  skipper: z.lazy(() => SortOrderSchema).optional(),
  fleet: z.lazy(() => SortOrderSchema).optional(),
  division: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  nett: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompNullableRelationFilterSchema: z.ZodType<Prisma.CompNullableRelationFilter> = z.object({
  is: z.lazy(() => CompWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CompWhereInputSchema).optional().nullable()
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const RaceNullableRelationFilterSchema: z.ZodType<Prisma.RaceNullableRelationFilter> = z.object({
  is: z.lazy(() => RaceWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RaceWhereInputSchema).optional().nullable()
}).strict();

export const ResultCountOrderByAggregateInputSchema: z.ZodType<Prisma.ResultCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  finish: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  discard: z.lazy(() => SortOrderSchema).optional(),
  corrected: z.lazy(() => SortOrderSchema).optional(),
  resultType: z.lazy(() => SortOrderSchema).optional(),
  elasped: z.lazy(() => SortOrderSchema).optional(),
  supposedRating: z.lazy(() => SortOrderSchema).optional(),
  elapsedWin: z.lazy(() => SortOrderSchema).optional(),
  ratingWin: z.lazy(() => SortOrderSchema).optional(),
  rrset: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResultMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ResultMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  finish: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  discard: z.lazy(() => SortOrderSchema).optional(),
  corrected: z.lazy(() => SortOrderSchema).optional(),
  resultType: z.lazy(() => SortOrderSchema).optional(),
  elasped: z.lazy(() => SortOrderSchema).optional(),
  supposedRating: z.lazy(() => SortOrderSchema).optional(),
  elapsedWin: z.lazy(() => SortOrderSchema).optional(),
  ratingWin: z.lazy(() => SortOrderSchema).optional(),
  rrset: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResultMinOrderByAggregateInputSchema: z.ZodType<Prisma.ResultMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  finish: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  discard: z.lazy(() => SortOrderSchema).optional(),
  corrected: z.lazy(() => SortOrderSchema).optional(),
  resultType: z.lazy(() => SortOrderSchema).optional(),
  elasped: z.lazy(() => SortOrderSchema).optional(),
  supposedRating: z.lazy(() => SortOrderSchema).optional(),
  elapsedWin: z.lazy(() => SortOrderSchema).optional(),
  ratingWin: z.lazy(() => SortOrderSchema).optional(),
  rrset: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SeriesListRelationFilterSchema: z.ZodType<Prisma.SeriesListRelationFilter> = z.object({
  every: z.lazy(() => SeriesWhereInputSchema).optional(),
  some: z.lazy(() => SeriesWhereInputSchema).optional(),
  none: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const SeriesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SeriesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VenueCountOrderByAggregateInputSchema: z.ZodType<Prisma.VenueCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  burgee: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VenueMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VenueMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  burgee: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VenueMinOrderByAggregateInputSchema: z.ZodType<Prisma.VenueMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  burgee: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const eventCommentCountOrderByAggregateInputSchema: z.ZodType<Prisma.eventCommentCountOrderByAggregateInput> = z.object({
  type: z.lazy(() => SortOrderSchema).optional(),
  ref: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const eventCommentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.eventCommentMaxOrderByAggregateInput> = z.object({
  type: z.lazy(() => SortOrderSchema).optional(),
  ref: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const eventCommentMinOrderByAggregateInputSchema: z.ZodType<Prisma.eventCommentMinOrderByAggregateInput> = z.object({
  type: z.lazy(() => SortOrderSchema).optional(),
  ref: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const followCountOrderByAggregateInputSchema: z.ZodType<Prisma.followCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const followMaxOrderByAggregateInputSchema: z.ZodType<Prisma.followMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const followMinOrderByAggregateInputSchema: z.ZodType<Prisma.followMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const EventCommentNullableRelationFilterSchema: z.ZodType<Prisma.EventCommentNullableRelationFilter> = z.object({
  is: z.lazy(() => eventCommentWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => eventCommentWhereInputSchema).optional().nullable()
}).strict();

export const likeCountOrderByAggregateInputSchema: z.ZodType<Prisma.likeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const likeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.likeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const likeMinOrderByAggregateInputSchema: z.ZodType<Prisma.likeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const KeyListRelationFilterSchema: z.ZodType<Prisma.KeyListRelationFilter> = z.object({
  every: z.lazy(() => KeyWhereInputSchema).optional(),
  some: z.lazy(() => KeyWhereInputSchema).optional(),
  none: z.lazy(() => KeyWhereInputSchema).optional()
}).strict();

export const UserSettingsNullableRelationFilterSchema: z.ZodType<Prisma.UserSettingsNullableRelationFilter> = z.object({
  is: z.lazy(() => UserSettingsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserSettingsWhereInputSchema).optional().nullable()
}).strict();

export const OrganizationListRelationFilterSchema: z.ZodType<Prisma.OrganizationListRelationFilter> = z.object({
  every: z.lazy(() => OrganizationWhereInputSchema).optional(),
  some: z.lazy(() => OrganizationWhereInputSchema).optional(),
  none: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.KeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrganizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.lazy(() => SortOrderSchema).optional(),
  lastname: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  email_verified: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserAvgOrderByAggregateInput> = z.object({
  email_verified: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.lazy(() => SortOrderSchema).optional(),
  lastname: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  email_verified: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.lazy(() => SortOrderSchema).optional(),
  lastname: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  email_verified: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserSumOrderByAggregateInput> = z.object({
  email_verified: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const UserSettingsCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserSettingsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSettingsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserSettingsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSettingsMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserSettingsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntFilterSchema: z.ZodType<Prisma.BigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SessionAvgOrderByAggregateInput> = z.object({
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionSumOrderByAggregateInputSchema: z.ZodType<Prisma.SessionSumOrderByAggregateInput> = z.object({
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const KeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.KeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.KeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.KeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenAvgOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenAvgOrderByAggregateInput> = z.object({
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenSumOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenSumOrderByAggregateInput> = z.object({
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventCreateWithoutSeriesInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutSeriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutSeriesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutSeriesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSeriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSeriesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const followCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.followCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutSeriesInputSchema),z.lazy(() => followCreateWithoutSeriesInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => followCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.likeCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutSeriesInputSchema),z.lazy(() => likeCreateWithoutSeriesInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => likeCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VenueCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.VenueCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueCreateWithoutSeriesInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventCreateWithoutSeriesInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.followUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutSeriesInputSchema),z.lazy(() => followCreateWithoutSeriesInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => followCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.likeUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutSeriesInputSchema),z.lazy(() => likeCreateWithoutSeriesInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => likeCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VenueUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueCreateWithoutSeriesInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const EventUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventCreateWithoutSeriesInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutSeriesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutSeriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutSeriesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutSeriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutSeriesInputSchema),z.lazy(() => OrganizationUpdateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutSeriesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutSeriesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSeriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSeriesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSeriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSeriesInputSchema),z.lazy(() => UserUpdateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSeriesInputSchema) ]).optional(),
}).strict();

export const followUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.followUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutSeriesInputSchema),z.lazy(() => followCreateWithoutSeriesInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => followCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.likeUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutSeriesInputSchema),z.lazy(() => likeCreateWithoutSeriesInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => likeCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.VenueUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueCreateWithoutSeriesInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VenueUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => VenueUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VenueUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => VenueUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VenueUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => VenueUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventCreateWithoutSeriesInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutSeriesInputSchema),z.lazy(() => followCreateWithoutSeriesInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => followCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutSeriesInputSchema),z.lazy(() => likeCreateWithoutSeriesInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => likeCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueCreateWithoutSeriesInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VenueUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => VenueUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VenueUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => VenueUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VenueUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => VenueUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutEventInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.SeriesCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional()
}).strict();

export const VenueCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.VenueCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional()
}).strict();

export const RaceCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.RaceCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceCreateWithoutEventInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema),z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.ResultCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultCreateWithoutEventInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema),z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.followCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutEventInputSchema),z.lazy(() => followCreateWithoutEventInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutEventInputSchema),z.lazy(() => followUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutEventInputSchema),z.lazy(() => followCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.likeCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutEventInputSchema),z.lazy(() => likeCreateWithoutEventInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutEventInputSchema),z.lazy(() => likeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedManyWithoutEventsInputSchema: z.ZodType<Prisma.CompCreateNestedManyWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompCreateWithoutEventsInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema),z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const eventCommentCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.eventCommentCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutEventInputSchema),z.lazy(() => eventCommentCreateWithoutEventInputSchema).array(),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => eventCommentCreateOrConnectWithoutEventInputSchema),z.lazy(() => eventCommentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => eventCommentCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.RaceUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceCreateWithoutEventInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema),z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.ResultUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultCreateWithoutEventInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema),z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.followUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutEventInputSchema),z.lazy(() => followCreateWithoutEventInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutEventInputSchema),z.lazy(() => followUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutEventInputSchema),z.lazy(() => followCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.likeUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutEventInputSchema),z.lazy(() => likeCreateWithoutEventInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutEventInputSchema),z.lazy(() => likeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedCreateNestedManyWithoutEventsInputSchema: z.ZodType<Prisma.CompUncheckedCreateNestedManyWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompCreateWithoutEventsInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema),z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const eventCommentUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.eventCommentUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutEventInputSchema),z.lazy(() => eventCommentCreateWithoutEventInputSchema).array(),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => eventCommentCreateOrConnectWithoutEventInputSchema),z.lazy(() => eventCommentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => eventCommentCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const OrganizationUpdateOneWithoutEventsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutEventsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => OrganizationUpdateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutEventNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutEventInputSchema),z.lazy(() => UserUpdateWithoutEventInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateOneWithoutEventsNestedInputSchema: z.ZodType<Prisma.SeriesUpdateOneWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => SeriesUpsertWithoutEventsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => SeriesUpdateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const VenueUpdateOneWithoutEventsNestedInputSchema: z.ZodType<Prisma.VenueUpdateOneWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => VenueUpsertWithoutEventsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => VenueUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => VenueUpdateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const RaceUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.RaceUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceCreateWithoutEventInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema),z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.ResultUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultCreateWithoutEventInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema),z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.followUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutEventInputSchema),z.lazy(() => followCreateWithoutEventInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutEventInputSchema),z.lazy(() => followUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutEventInputSchema),z.lazy(() => followCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.likeUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutEventInputSchema),z.lazy(() => likeCreateWithoutEventInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutEventInputSchema),z.lazy(() => likeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUpdateManyWithoutEventsNestedInputSchema: z.ZodType<Prisma.CompUpdateManyWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompCreateWithoutEventsInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema),z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutEventsInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutEventsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutEventsInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutEventsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutEventsInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutEventsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const eventCommentUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.eventCommentUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutEventInputSchema),z.lazy(() => eventCommentCreateWithoutEventInputSchema).array(),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => eventCommentCreateOrConnectWithoutEventInputSchema),z.lazy(() => eventCommentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => eventCommentUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => eventCommentUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => eventCommentCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => eventCommentUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => eventCommentUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => eventCommentUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => eventCommentUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => eventCommentScalarWhereInputSchema),z.lazy(() => eventCommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceCreateWithoutEventInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema),z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultCreateWithoutEventInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema),z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutEventInputSchema),z.lazy(() => followCreateWithoutEventInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutEventInputSchema),z.lazy(() => followUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutEventInputSchema),z.lazy(() => followCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutEventInputSchema),z.lazy(() => likeCreateWithoutEventInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutEventInputSchema),z.lazy(() => likeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedUpdateManyWithoutEventsNestedInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompCreateWithoutEventsInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema),z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutEventsInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutEventsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutEventsInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutEventsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutEventsInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutEventsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutEventInputSchema),z.lazy(() => eventCommentCreateWithoutEventInputSchema).array(),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => eventCommentCreateOrConnectWithoutEventInputSchema),z.lazy(() => eventCommentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => eventCommentUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => eventCommentUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => eventCommentCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => eventCommentUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => eventCommentUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => eventCommentUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => eventCommentUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => eventCommentScalarWhereInputSchema),z.lazy(() => eventCommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedOneWithoutRacesInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutRacesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutRacesInputSchema),z.lazy(() => EventUncheckedCreateWithoutRacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutRacesInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutRaceInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutRaceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRaceInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ResultCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.ResultCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultCreateWithoutRaceInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema),z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.followCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutRaceInputSchema),z.lazy(() => followCreateWithoutRaceInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutRaceInputSchema),z.lazy(() => followCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.likeCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutRaceInputSchema),z.lazy(() => likeCreateWithoutRaceInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutRaceInputSchema),z.lazy(() => likeCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedManyWithoutRacesInputSchema: z.ZodType<Prisma.CompCreateNestedManyWithoutRacesInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompCreateWithoutRacesInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema),z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.ResultUncheckedCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultCreateWithoutRaceInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema),z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.followUncheckedCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutRaceInputSchema),z.lazy(() => followCreateWithoutRaceInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutRaceInputSchema),z.lazy(() => followCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.likeUncheckedCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutRaceInputSchema),z.lazy(() => likeCreateWithoutRaceInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutRaceInputSchema),z.lazy(() => likeCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedCreateNestedManyWithoutRacesInputSchema: z.ZodType<Prisma.CompUncheckedCreateNestedManyWithoutRacesInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompCreateWithoutRacesInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema),z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateOneWithoutRacesNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutRacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutRacesInputSchema),z.lazy(() => EventUncheckedCreateWithoutRacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutRacesInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutRacesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutRacesInputSchema),z.lazy(() => EventUpdateWithoutRacesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutRacesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutRaceNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutRaceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRaceInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutRaceInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutRaceInputSchema),z.lazy(() => UserUpdateWithoutRaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRaceInputSchema) ]).optional(),
}).strict();

export const ResultUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.ResultUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultCreateWithoutRaceInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema),z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.followUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutRaceInputSchema),z.lazy(() => followCreateWithoutRaceInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutRaceInputSchema),z.lazy(() => followCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.likeUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutRaceInputSchema),z.lazy(() => likeCreateWithoutRaceInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutRaceInputSchema),z.lazy(() => likeCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUpdateManyWithoutRacesNestedInputSchema: z.ZodType<Prisma.CompUpdateManyWithoutRacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompCreateWithoutRacesInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema),z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutRacesInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutRacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultCreateWithoutRaceInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema),z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutRaceInputSchema),z.lazy(() => followCreateWithoutRaceInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutRaceInputSchema),z.lazy(() => followCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutRaceInputSchema),z.lazy(() => likeCreateWithoutRaceInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutRaceInputSchema),z.lazy(() => likeCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedUpdateManyWithoutRacesNestedInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutRacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompCreateWithoutRacesInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema),z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutRacesInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutRacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCompInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCompInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCompInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedManyWithoutCompsInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutCompsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventCreateWithoutCompsInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema),z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.ResultCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultCreateWithoutCompInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema),z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.followCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutCompInputSchema),z.lazy(() => followCreateWithoutCompInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutCompInputSchema),z.lazy(() => followUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutCompInputSchema),z.lazy(() => followCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.likeCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutCompInputSchema),z.lazy(() => likeCreateWithoutCompInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutCompInputSchema),z.lazy(() => likeCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceCreateNestedManyWithoutCompsInputSchema: z.ZodType<Prisma.RaceCreateNestedManyWithoutCompsInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceCreateWithoutCompsInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema),z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutCompsInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutCompsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventCreateWithoutCompsInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema),z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.ResultUncheckedCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultCreateWithoutCompInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema),z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.followUncheckedCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutCompInputSchema),z.lazy(() => followCreateWithoutCompInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutCompInputSchema),z.lazy(() => followUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutCompInputSchema),z.lazy(() => followCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.likeUncheckedCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutCompInputSchema),z.lazy(() => likeCreateWithoutCompInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutCompInputSchema),z.lazy(() => likeCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedCreateNestedManyWithoutCompsInputSchema: z.ZodType<Prisma.RaceUncheckedCreateNestedManyWithoutCompsInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceCreateWithoutCompsInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema),z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutCompNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCompInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCompInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCompInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCompInputSchema),z.lazy(() => UserUpdateWithoutCompInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompInputSchema) ]).optional(),
}).strict();

export const EventUpdateManyWithoutCompsNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutCompsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventCreateWithoutCompsInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema),z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutCompsInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutCompsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.ResultUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultCreateWithoutCompInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema),z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.followUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutCompInputSchema),z.lazy(() => followCreateWithoutCompInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutCompInputSchema),z.lazy(() => followUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutCompInputSchema),z.lazy(() => followCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.likeUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutCompInputSchema),z.lazy(() => likeCreateWithoutCompInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutCompInputSchema),z.lazy(() => likeCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUpdateManyWithoutCompsNestedInputSchema: z.ZodType<Prisma.RaceUpdateManyWithoutCompsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceCreateWithoutCompsInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema),z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutCompsInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutCompsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutCompsNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutCompsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventCreateWithoutCompsInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema),z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutCompsInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutCompsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultCreateWithoutCompInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema),z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutCompInputSchema),z.lazy(() => followCreateWithoutCompInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutCompInputSchema),z.lazy(() => followUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutCompInputSchema),z.lazy(() => followCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutCompInputSchema),z.lazy(() => likeCreateWithoutCompInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutCompInputSchema),z.lazy(() => likeCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedUpdateManyWithoutCompsNestedInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutCompsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceCreateWithoutCompsInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema),z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutCompsInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutCompsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.CompCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutResultsInputSchema),z.lazy(() => CompUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutResultsInputSchema),z.lazy(() => EventUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutResultInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutResultInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutResultInputSchema),z.lazy(() => UserUncheckedCreateWithoutResultInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutResultInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RaceCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.RaceCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional()
}).strict();

export const CompUpdateOneWithoutResultsNestedInputSchema: z.ZodType<Prisma.CompUpdateOneWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutResultsInputSchema),z.lazy(() => CompUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => CompUpsertWithoutResultsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => CompUpdateWithoutResultsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutResultsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutResultsInputSchema),z.lazy(() => EventUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutResultsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => EventUpdateWithoutResultsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutResultNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutResultNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutResultInputSchema),z.lazy(() => UserUncheckedCreateWithoutResultInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutResultInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutResultInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutResultInputSchema),z.lazy(() => UserUpdateWithoutResultInputSchema),z.lazy(() => UserUncheckedUpdateWithoutResultInputSchema) ]).optional(),
}).strict();

export const RaceUpdateOneWithoutResultsNestedInputSchema: z.ZodType<Prisma.RaceUpdateOneWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => RaceUpsertWithoutResultsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RaceUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => RaceUpdateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SeriesCreateNestedManyWithoutOrgInputSchema: z.ZodType<Prisma.SeriesCreateNestedManyWithoutOrgInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrgInputSchema),z.lazy(() => SeriesCreateWithoutOrgInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutOrgInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyOrgInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.followCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutOrganizationInputSchema),z.lazy(() => followCreateWithoutOrganizationInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => followCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.likeCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutOrganizationInputSchema),z.lazy(() => likeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => likeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SeriesUncheckedCreateNestedManyWithoutOrgInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateNestedManyWithoutOrgInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrgInputSchema),z.lazy(() => SeriesCreateWithoutOrgInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutOrgInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyOrgInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.followUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutOrganizationInputSchema),z.lazy(() => followCreateWithoutOrganizationInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => followCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.likeUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutOrganizationInputSchema),z.lazy(() => likeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => likeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const EventUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SeriesUpdateManyWithoutOrgNestedInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithoutOrgNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrgInputSchema),z.lazy(() => SeriesCreateWithoutOrgInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutOrgInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyOrgInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutOrgInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutOrgInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.followUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutOrganizationInputSchema),z.lazy(() => followCreateWithoutOrganizationInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => followCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.likeUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutOrganizationInputSchema),z.lazy(() => likeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => likeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SeriesUncheckedUpdateManyWithoutOrgNestedInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutOrgNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrgInputSchema),z.lazy(() => SeriesCreateWithoutOrgInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutOrgInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyOrgInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutOrgInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutOrgInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutOrganizationInputSchema),z.lazy(() => followCreateWithoutOrganizationInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => followCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutOrganizationInputSchema),z.lazy(() => likeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => likeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventCreateWithoutVenueInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema),z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutVenueInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutVenueInputSchema),z.lazy(() => UserUncheckedCreateWithoutVenueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutVenueInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedManyWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesCreateNestedManyWithoutVenuesInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesCreateWithoutVenuesInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventCreateWithoutVenueInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema),z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateNestedManyWithoutVenuesInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesCreateWithoutVenuesInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventCreateWithoutVenueInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema),z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutVenueNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutVenueInputSchema),z.lazy(() => UserUncheckedCreateWithoutVenueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutVenueInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutVenueInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutVenueInputSchema),z.lazy(() => UserUpdateWithoutVenueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutVenueInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateManyWithoutVenuesNestedInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithoutVenuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesCreateWithoutVenuesInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutVenuesInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutVenuesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventCreateWithoutVenueInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema),z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutVenuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesCreateWithoutVenuesInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutVenuesInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutVenuesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedOneWithoutCommentsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutCommentsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutCommentsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutEventCommentInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEventCommentInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventCommentInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventCommentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventCommentInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const likeCreateNestedManyWithoutEventCommentInputSchema: z.ZodType<Prisma.likeCreateNestedManyWithoutEventCommentInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutEventCommentInputSchema),z.lazy(() => likeCreateWithoutEventCommentInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutEventCommentInputSchema),z.lazy(() => likeCreateOrConnectWithoutEventCommentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyEventCommentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedCreateNestedManyWithoutEventCommentInputSchema: z.ZodType<Prisma.likeUncheckedCreateNestedManyWithoutEventCommentInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutEventCommentInputSchema),z.lazy(() => likeCreateWithoutEventCommentInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutEventCommentInputSchema),z.lazy(() => likeCreateOrConnectWithoutEventCommentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyEventCommentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateOneWithoutCommentsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutCommentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutCommentsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutCommentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutCommentsInputSchema),z.lazy(() => EventUpdateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCommentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutEventCommentNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutEventCommentNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventCommentInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventCommentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventCommentInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEventCommentInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutEventCommentInputSchema),z.lazy(() => UserUpdateWithoutEventCommentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventCommentInputSchema) ]).optional(),
}).strict();

export const likeUpdateManyWithoutEventCommentNestedInputSchema: z.ZodType<Prisma.likeUpdateManyWithoutEventCommentNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutEventCommentInputSchema),z.lazy(() => likeCreateWithoutEventCommentInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutEventCommentInputSchema),z.lazy(() => likeCreateOrConnectWithoutEventCommentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutEventCommentInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutEventCommentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyEventCommentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutEventCommentInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutEventCommentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutEventCommentInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutEventCommentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedUpdateManyWithoutEventCommentNestedInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutEventCommentNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutEventCommentInputSchema),z.lazy(() => likeCreateWithoutEventCommentInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutEventCommentInputSchema),z.lazy(() => likeCreateOrConnectWithoutEventCommentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutEventCommentInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutEventCommentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyEventCommentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutEventCommentInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutEventCommentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutEventCommentInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutEventCommentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedOneWithoutFollowInputSchema: z.ZodType<Prisma.CompCreateNestedOneWithoutFollowInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutFollowInputSchema),z.lazy(() => CompUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutFollowInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutFollowInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutFollowInputSchema),z.lazy(() => EventUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutFollowInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutFollowInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFollowInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RaceCreateNestedOneWithoutFollowInputSchema: z.ZodType<Prisma.RaceCreateNestedOneWithoutFollowInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutFollowInputSchema),z.lazy(() => RaceUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedOneWithoutFollowInputSchema: z.ZodType<Prisma.SeriesCreateNestedOneWithoutFollowInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutFollowInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutFollowInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFollowInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFollowInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const CompUpdateOneWithoutFollowNestedInputSchema: z.ZodType<Prisma.CompUpdateOneWithoutFollowNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutFollowInputSchema),z.lazy(() => CompUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutFollowInputSchema).optional(),
  upsert: z.lazy(() => CompUpsertWithoutFollowInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompUpdateToOneWithWhereWithoutFollowInputSchema),z.lazy(() => CompUpdateWithoutFollowInputSchema),z.lazy(() => CompUncheckedUpdateWithoutFollowInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutFollowNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutFollowNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutFollowInputSchema),z.lazy(() => EventUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutFollowInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutFollowInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutFollowInputSchema),z.lazy(() => EventUpdateWithoutFollowInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFollowInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutFollowNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutFollowNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFollowInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFollowInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutFollowInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutFollowInputSchema),z.lazy(() => OrganizationUpdateWithoutFollowInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFollowInputSchema) ]).optional(),
}).strict();

export const RaceUpdateOneWithoutFollowNestedInputSchema: z.ZodType<Prisma.RaceUpdateOneWithoutFollowNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutFollowInputSchema),z.lazy(() => RaceUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutFollowInputSchema).optional(),
  upsert: z.lazy(() => RaceUpsertWithoutFollowInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RaceUpdateToOneWithWhereWithoutFollowInputSchema),z.lazy(() => RaceUpdateWithoutFollowInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutFollowInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateOneWithoutFollowNestedInputSchema: z.ZodType<Prisma.SeriesUpdateOneWithoutFollowNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutFollowInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutFollowInputSchema).optional(),
  upsert: z.lazy(() => SeriesUpsertWithoutFollowInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateToOneWithWhereWithoutFollowInputSchema),z.lazy(() => SeriesUpdateWithoutFollowInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutFollowInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutFollowNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutFollowNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFollowInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFollowInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFollowInputSchema),z.lazy(() => UserUpdateWithoutFollowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFollowInputSchema) ]).optional(),
}).strict();

export const CompCreateNestedOneWithoutLikeInputSchema: z.ZodType<Prisma.CompCreateNestedOneWithoutLikeInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutLikeInputSchema),z.lazy(() => CompUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutLikeInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutLikeInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutLikeInputSchema),z.lazy(() => EventUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutLikeInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutLikeInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLikeInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RaceCreateNestedOneWithoutLikeInputSchema: z.ZodType<Prisma.RaceCreateNestedOneWithoutLikeInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutLikeInputSchema),z.lazy(() => RaceUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedOneWithoutLikeInputSchema: z.ZodType<Prisma.SeriesCreateNestedOneWithoutLikeInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutLikeInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutLikeInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutLikeInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLikeInputSchema),z.lazy(() => UserUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const eventCommentCreateNestedOneWithoutLikesInputSchema: z.ZodType<Prisma.eventCommentCreateNestedOneWithoutLikesInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutLikesInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => eventCommentCreateOrConnectWithoutLikesInputSchema).optional(),
  connect: z.lazy(() => eventCommentWhereUniqueInputSchema).optional()
}).strict();

export const CompUpdateOneWithoutLikeNestedInputSchema: z.ZodType<Prisma.CompUpdateOneWithoutLikeNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutLikeInputSchema),z.lazy(() => CompUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutLikeInputSchema).optional(),
  upsert: z.lazy(() => CompUpsertWithoutLikeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompUpdateToOneWithWhereWithoutLikeInputSchema),z.lazy(() => CompUpdateWithoutLikeInputSchema),z.lazy(() => CompUncheckedUpdateWithoutLikeInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutLikeNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutLikeNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutLikeInputSchema),z.lazy(() => EventUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutLikeInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutLikeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutLikeInputSchema),z.lazy(() => EventUpdateWithoutLikeInputSchema),z.lazy(() => EventUncheckedUpdateWithoutLikeInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutLikeNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutLikeNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLikeInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutLikeInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutLikeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutLikeInputSchema),z.lazy(() => OrganizationUpdateWithoutLikeInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLikeInputSchema) ]).optional(),
}).strict();

export const RaceUpdateOneWithoutLikeNestedInputSchema: z.ZodType<Prisma.RaceUpdateOneWithoutLikeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutLikeInputSchema),z.lazy(() => RaceUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutLikeInputSchema).optional(),
  upsert: z.lazy(() => RaceUpsertWithoutLikeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RaceUpdateToOneWithWhereWithoutLikeInputSchema),z.lazy(() => RaceUpdateWithoutLikeInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutLikeInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateOneWithoutLikeNestedInputSchema: z.ZodType<Prisma.SeriesUpdateOneWithoutLikeNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutLikeInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutLikeInputSchema).optional(),
  upsert: z.lazy(() => SeriesUpsertWithoutLikeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateToOneWithWhereWithoutLikeInputSchema),z.lazy(() => SeriesUpdateWithoutLikeInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutLikeInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutLikeNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutLikeNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLikeInputSchema),z.lazy(() => UserUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLikeInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutLikeInputSchema),z.lazy(() => UserUpdateWithoutLikeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLikeInputSchema) ]).optional(),
}).strict();

export const eventCommentUpdateOneWithoutLikesNestedInputSchema: z.ZodType<Prisma.eventCommentUpdateOneWithoutLikesNestedInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutLikesInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => eventCommentCreateOrConnectWithoutLikesInputSchema).optional(),
  upsert: z.lazy(() => eventCommentUpsertWithoutLikesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => eventCommentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => eventCommentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => eventCommentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => eventCommentUpdateToOneWithWhereWithoutLikesInputSchema),z.lazy(() => eventCommentUpdateWithoutLikesInputSchema),z.lazy(() => eventCommentUncheckedUpdateWithoutLikesInputSchema) ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const KeyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserSettingsCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserSettingsCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => UserSettingsWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesCreateWithoutPublisherInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventCreateWithoutPublisherInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.RaceCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceCreateWithoutPublisherInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.CompCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompCreateWithoutPublisherInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.ResultCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultCreateWithoutPublisherInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutOwnerInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateWithoutOwnerInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VenueCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.VenueCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueCreateWithoutPublisherInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VenueCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const eventCommentCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.eventCommentCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutUserInputSchema),z.lazy(() => eventCommentCreateWithoutUserInputSchema).array(),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => eventCommentCreateOrConnectWithoutUserInputSchema),z.lazy(() => eventCommentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => eventCommentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.followCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutUserInputSchema),z.lazy(() => followCreateWithoutUserInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutUserInputSchema),z.lazy(() => followUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutUserInputSchema),z.lazy(() => followCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.likeCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutUserInputSchema),z.lazy(() => likeCreateWithoutUserInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutUserInputSchema),z.lazy(() => likeCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const KeyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserSettingsCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => UserSettingsWhereUniqueInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesCreateWithoutPublisherInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventCreateWithoutPublisherInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceCreateWithoutPublisherInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.CompUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompCreateWithoutPublisherInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultCreateWithoutPublisherInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutOwnerInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateWithoutOwnerInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VenueUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueCreateWithoutPublisherInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VenueCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const eventCommentUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.eventCommentUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutUserInputSchema),z.lazy(() => eventCommentCreateWithoutUserInputSchema).array(),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => eventCommentCreateOrConnectWithoutUserInputSchema),z.lazy(() => eventCommentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => eventCommentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.followUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutUserInputSchema),z.lazy(() => followCreateWithoutUserInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutUserInputSchema),z.lazy(() => followUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutUserInputSchema),z.lazy(() => followCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.likeUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutUserInputSchema),z.lazy(() => likeCreateWithoutUserInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutUserInputSchema),z.lazy(() => likeCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const KeyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.KeyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserSettingsUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.UserSettingsUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserSettingsCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => UserSettingsUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserSettingsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserSettingsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserSettingsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserSettingsUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => UserSettingsUpdateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesCreateWithoutPublisherInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventCreateWithoutPublisherInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.RaceUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceCreateWithoutPublisherInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.CompUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompCreateWithoutPublisherInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.ResultUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultCreateWithoutPublisherInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutOwnerNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateWithoutOwnerInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnerInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.VenueUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueCreateWithoutPublisherInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VenueUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => VenueUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VenueCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VenueUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => VenueUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VenueUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => VenueUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const eventCommentUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.eventCommentUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutUserInputSchema),z.lazy(() => eventCommentCreateWithoutUserInputSchema).array(),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => eventCommentCreateOrConnectWithoutUserInputSchema),z.lazy(() => eventCommentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => eventCommentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => eventCommentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => eventCommentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => eventCommentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => eventCommentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => eventCommentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => eventCommentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => eventCommentScalarWhereInputSchema),z.lazy(() => eventCommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.followUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutUserInputSchema),z.lazy(() => followCreateWithoutUserInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutUserInputSchema),z.lazy(() => followUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutUserInputSchema),z.lazy(() => followCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.likeUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutUserInputSchema),z.lazy(() => likeCreateWithoutUserInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutUserInputSchema),z.lazy(() => likeCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const KeyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.UserSettingsUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserSettingsCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => UserSettingsUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserSettingsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserSettingsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserSettingsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserSettingsUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => UserSettingsUpdateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesCreateWithoutPublisherInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventCreateWithoutPublisherInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceCreateWithoutPublisherInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompCreateWithoutPublisherInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultCreateWithoutPublisherInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateWithoutOwnerInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnerInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueCreateWithoutPublisherInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VenueUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => VenueUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VenueCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VenueUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => VenueUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VenueUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => VenueUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => eventCommentCreateWithoutUserInputSchema),z.lazy(() => eventCommentCreateWithoutUserInputSchema).array(),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => eventCommentCreateOrConnectWithoutUserInputSchema),z.lazy(() => eventCommentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => eventCommentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => eventCommentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => eventCommentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => eventCommentWhereUniqueInputSchema),z.lazy(() => eventCommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => eventCommentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => eventCommentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => eventCommentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => eventCommentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => eventCommentScalarWhereInputSchema),z.lazy(() => eventCommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => followCreateWithoutUserInputSchema),z.lazy(() => followCreateWithoutUserInputSchema).array(),z.lazy(() => followUncheckedCreateWithoutUserInputSchema),z.lazy(() => followUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => followCreateOrConnectWithoutUserInputSchema),z.lazy(() => followCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => followUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => followUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => followCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => followWhereUniqueInputSchema),z.lazy(() => followWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => followUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => followUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => followUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => followUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const likeUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => likeCreateWithoutUserInputSchema),z.lazy(() => likeCreateWithoutUserInputSchema).array(),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => likeCreateOrConnectWithoutUserInputSchema),z.lazy(() => likeCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => likeUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => likeUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => likeCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => likeWhereUniqueInputSchema),z.lazy(() => likeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => likeUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => likeUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => likeUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => likeUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserSettingsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserSettingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserSettingsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutUserSettingsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutUserSettingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserSettingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserSettingsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserSettingsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserSettingsInputSchema),z.lazy(() => UserUpdateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserSettingsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuth_sessionInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_sessionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const BigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BigIntFieldUpdateOperationsInput> = z.object({
  set: z.bigint().optional(),
  increment: z.bigint().optional(),
  decrement: z.bigint().optional(),
  multiply: z.bigint().optional(),
  divide: z.bigint().optional()
}).strict();

export const UserUpdateOneRequiredWithoutAuth_sessionNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAuth_sessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_sessionInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuth_sessionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuth_sessionInputSchema),z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuth_keyInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_keyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAuth_keyNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAuth_keyNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_keyInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuth_keyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuth_keyInputSchema),z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValue.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: InputJsonValue.optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBigIntFilterSchema: z.ZodType<Prisma.NestedBigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const NestedBigIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const EventCreateWithoutSeriesInputSchema: z.ZodType<Prisma.EventCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const EventCreateManySeriesInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManySeriesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManySeriesInputSchema),z.lazy(() => EventCreateManySeriesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutOrganizationInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const UserCreateWithoutSeriesInputSchema: z.ZodType<Prisma.UserCreateWithoutSeriesInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const followCreateWithoutSeriesInputSchema: z.ZodType<Prisma.followCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const followUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.followUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const followCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.followCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => followCreateWithoutSeriesInputSchema),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const followCreateManySeriesInputEnvelopeSchema: z.ZodType<Prisma.followCreateManySeriesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => followCreateManySeriesInputSchema),z.lazy(() => followCreateManySeriesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const likeCreateWithoutSeriesInputSchema: z.ZodType<Prisma.likeCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikeInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikeInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikeInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  eventComment: z.lazy(() => eventCommentCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const likeUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.likeUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const likeCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.likeCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => likeCreateWithoutSeriesInputSchema),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const likeCreateManySeriesInputEnvelopeSchema: z.ZodType<Prisma.likeCreateManySeriesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => likeCreateManySeriesInputSchema),z.lazy(() => likeCreateManySeriesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const VenueCreateWithoutSeriesInputSchema: z.ZodType<Prisma.VenueCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const EventUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const EventScalarWhereInputSchema: z.ZodType<Prisma.EventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventeid: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  uniqueIdString: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventwebsite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  public: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  fileInfo: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrganizationUpsertWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutSeriesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutSeriesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutSeriesInputSchema: z.ZodType<Prisma.UserUpsertWithoutSeriesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSeriesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const UserUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.UserUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const followUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.followUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => followUpdateWithoutSeriesInputSchema),z.lazy(() => followUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => followCreateWithoutSeriesInputSchema),z.lazy(() => followUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const followUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.followUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => followUpdateWithoutSeriesInputSchema),z.lazy(() => followUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const followUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.followUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => followScalarWhereInputSchema),
  data: z.union([ z.lazy(() => followUpdateManyMutationInputSchema),z.lazy(() => followUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const followScalarWhereInputSchema: z.ZodType<Prisma.followScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => followScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => followScalarWhereInputSchema),z.lazy(() => followScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const likeUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.likeUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => likeUpdateWithoutSeriesInputSchema),z.lazy(() => likeUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => likeCreateWithoutSeriesInputSchema),z.lazy(() => likeUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const likeUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.likeUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => likeUpdateWithoutSeriesInputSchema),z.lazy(() => likeUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const likeUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.likeUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => likeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => likeUpdateManyMutationInputSchema),z.lazy(() => likeUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const likeScalarWhereInputSchema: z.ZodType<Prisma.likeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => likeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => likeScalarWhereInputSchema),z.lazy(() => likeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  eventCommentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const VenueUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => VenueUpdateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const VenueUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => VenueUpdateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const VenueUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => VenueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => VenueUpdateManyMutationInputSchema),z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const VenueScalarWhereInputSchema: z.ZodType<Prisma.VenueScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VenueScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  burgee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.lazy(() => JsonNullableFilterSchema).optional(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrganizationCreateWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrgInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutOrganizationInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrgInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const UserCreateWithoutEventInputSchema: z.ZodType<Prisma.UserCreateWithoutEventInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEventInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEventInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const SeriesCreateWithoutEventsInputSchema: z.ZodType<Prisma.SeriesCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Org: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const VenueCreateWithoutEventsInputSchema: z.ZodType<Prisma.VenueCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const RaceCreateWithoutEventInputSchema: z.ZodType<Prisma.RaceCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  compId: z.string().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const RaceCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.RaceCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RaceCreateManyEventInputSchema),z.lazy(() => RaceCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ResultCreateWithoutEventInputSchema: z.ZodType<Prisma.ResultCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutResultsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutResultInputSchema),
  Race: z.lazy(() => RaceCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const ResultUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.ResultUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.ResultCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const ResultCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.ResultCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ResultCreateManyEventInputSchema),z.lazy(() => ResultCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const followCreateWithoutEventInputSchema: z.ZodType<Prisma.followCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const followUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.followUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const followCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.followCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => followCreateWithoutEventInputSchema),z.lazy(() => followUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const followCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.followCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => followCreateManyEventInputSchema),z.lazy(() => followCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const likeCreateWithoutEventInputSchema: z.ZodType<Prisma.likeCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikeInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikeInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikeInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  eventComment: z.lazy(() => eventCommentCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const likeUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.likeUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const likeCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.likeCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => likeCreateWithoutEventInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const likeCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.likeCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => likeCreateManyEventInputSchema),z.lazy(() => likeCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CompCreateWithoutEventsInputSchema: z.ZodType<Prisma.CompCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const eventCommentCreateWithoutEventInputSchema: z.ZodType<Prisma.eventCommentCreateWithoutEventInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutEventCommentInputSchema),
  likes: z.lazy(() => likeCreateNestedManyWithoutEventCommentInputSchema).optional()
}).strict();

export const eventCommentUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.eventCommentUncheckedCreateWithoutEventInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  userId: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  likes: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventCommentInputSchema).optional()
}).strict();

export const eventCommentCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.eventCommentCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => eventCommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => eventCommentCreateWithoutEventInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const eventCommentCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.eventCommentCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => eventCommentCreateManyEventInputSchema),z.lazy(() => eventCommentCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrgNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrgNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutEventInputSchema: z.ZodType<Prisma.UserUpsertWithoutEventInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEventInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEventInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutEventInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutEventInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const UserUpdateWithoutEventInputSchema: z.ZodType<Prisma.UserUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const SeriesUpsertWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => SeriesUpdateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const SeriesUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => SeriesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const SeriesUpdateWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Org: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const VenueUpsertWithoutEventsInputSchema: z.ZodType<Prisma.VenueUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => VenueUpdateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => VenueWhereInputSchema).optional()
}).strict();

export const VenueUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.VenueUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => VenueWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => VenueUpdateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const VenueUpdateWithoutEventsInputSchema: z.ZodType<Prisma.VenueUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional()
}).strict();

export const RaceUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.RaceUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RaceUpdateWithoutEventInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const RaceUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.RaceUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateWithoutEventInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const RaceUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.RaceUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => RaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateManyMutationInputSchema),z.lazy(() => RaceUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const RaceScalarWhereInputSchema: z.ZodType<Prisma.RaceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  uniqueRaceString: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  starts: z.lazy(() => JsonNullableFilterSchema).optional(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailed: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ResultUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.ResultUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ResultUpdateWithoutEventInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const ResultUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.ResultUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateWithoutEventInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const ResultUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.ResultUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => ResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateManyMutationInputSchema),z.lazy(() => ResultUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const ResultScalarWhereInputSchema: z.ZodType<Prisma.ResultScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResultScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finish: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  points: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  discard: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  corrected: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elasped: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  supposedRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elapsedWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ratingWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rrset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const followUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.followUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => followUpdateWithoutEventInputSchema),z.lazy(() => followUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => followCreateWithoutEventInputSchema),z.lazy(() => followUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const followUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.followUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => followUpdateWithoutEventInputSchema),z.lazy(() => followUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const followUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.followUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => followScalarWhereInputSchema),
  data: z.union([ z.lazy(() => followUpdateManyMutationInputSchema),z.lazy(() => followUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const likeUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.likeUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => likeUpdateWithoutEventInputSchema),z.lazy(() => likeUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => likeCreateWithoutEventInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const likeUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.likeUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => likeUpdateWithoutEventInputSchema),z.lazy(() => likeUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const likeUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.likeUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => likeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => likeUpdateManyMutationInputSchema),z.lazy(() => likeUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const CompUpsertWithWhereUniqueWithoutEventsInputSchema: z.ZodType<Prisma.CompUpsertWithWhereUniqueWithoutEventsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CompUpdateWithoutEventsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const CompUpdateWithWhereUniqueWithoutEventsInputSchema: z.ZodType<Prisma.CompUpdateWithWhereUniqueWithoutEventsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CompUpdateWithoutEventsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const CompUpdateManyWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.CompUpdateManyWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => CompScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CompUpdateManyMutationInputSchema),z.lazy(() => CompUncheckedUpdateManyWithoutEventsInputSchema) ]),
}).strict();

export const CompScalarWhereInputSchema: z.ZodType<Prisma.CompScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  compId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  club: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boat: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skipper: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fleet: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  division: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nett: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const eventCommentUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.eventCommentUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => eventCommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => eventCommentUpdateWithoutEventInputSchema),z.lazy(() => eventCommentUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => eventCommentCreateWithoutEventInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const eventCommentUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.eventCommentUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => eventCommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => eventCommentUpdateWithoutEventInputSchema),z.lazy(() => eventCommentUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const eventCommentUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.eventCommentUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => eventCommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => eventCommentUpdateManyMutationInputSchema),z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const eventCommentScalarWhereInputSchema: z.ZodType<Prisma.eventCommentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => eventCommentScalarWhereInputSchema),z.lazy(() => eventCommentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => eventCommentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => eventCommentScalarWhereInputSchema),z.lazy(() => eventCommentScalarWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const EventCreateWithoutRacesInputSchema: z.ZodType<Prisma.EventCreateWithoutRacesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutRacesInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutRacesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutRacesInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutRacesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutRacesInputSchema),z.lazy(() => EventUncheckedCreateWithoutRacesInputSchema) ]),
}).strict();

export const UserCreateWithoutRaceInputSchema: z.ZodType<Prisma.UserCreateWithoutRaceInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const ResultCreateWithoutRaceInputSchema: z.ZodType<Prisma.ResultCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutResultsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutResultsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutResultInputSchema)
}).strict();

export const ResultUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.ResultUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.ResultCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const ResultCreateManyRaceInputEnvelopeSchema: z.ZodType<Prisma.ResultCreateManyRaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ResultCreateManyRaceInputSchema),z.lazy(() => ResultCreateManyRaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const followCreateWithoutRaceInputSchema: z.ZodType<Prisma.followCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const followUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.followUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const followCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.followCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => followCreateWithoutRaceInputSchema),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const followCreateManyRaceInputEnvelopeSchema: z.ZodType<Prisma.followCreateManyRaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => followCreateManyRaceInputSchema),z.lazy(() => followCreateManyRaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const likeCreateWithoutRaceInputSchema: z.ZodType<Prisma.likeCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikeInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikeInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikeInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  eventComment: z.lazy(() => eventCommentCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const likeUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.likeUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const likeCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.likeCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => likeCreateWithoutRaceInputSchema),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const likeCreateManyRaceInputEnvelopeSchema: z.ZodType<Prisma.likeCreateManyRaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => likeCreateManyRaceInputSchema),z.lazy(() => likeCreateManyRaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CompCreateWithoutRacesInputSchema: z.ZodType<Prisma.CompCreateWithoutRacesInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutCompInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutRacesInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutRacesInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutCompInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutRacesInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutRacesInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema) ]),
}).strict();

export const EventUpsertWithoutRacesInputSchema: z.ZodType<Prisma.EventUpsertWithoutRacesInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutRacesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutRacesInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutRacesInputSchema),z.lazy(() => EventUncheckedCreateWithoutRacesInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutRacesInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutRacesInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutRacesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutRacesInputSchema) ]),
}).strict();

export const EventUpdateWithoutRacesInputSchema: z.ZodType<Prisma.EventUpdateWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutRacesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutRaceInputSchema: z.ZodType<Prisma.UserUpsertWithoutRaceInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutRaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutRaceInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutRaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const UserUpdateWithoutRaceInputSchema: z.ZodType<Prisma.UserUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const ResultUpsertWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.ResultUpsertWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ResultUpdateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const ResultUpdateWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.ResultUpdateWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const ResultUpdateManyWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.ResultUpdateManyWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => ResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateManyMutationInputSchema),z.lazy(() => ResultUncheckedUpdateManyWithoutRaceInputSchema) ]),
}).strict();

export const followUpsertWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.followUpsertWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => followUpdateWithoutRaceInputSchema),z.lazy(() => followUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => followCreateWithoutRaceInputSchema),z.lazy(() => followUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const followUpdateWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.followUpdateWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => followUpdateWithoutRaceInputSchema),z.lazy(() => followUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const followUpdateManyWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.followUpdateManyWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => followScalarWhereInputSchema),
  data: z.union([ z.lazy(() => followUpdateManyMutationInputSchema),z.lazy(() => followUncheckedUpdateManyWithoutRaceInputSchema) ]),
}).strict();

export const likeUpsertWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.likeUpsertWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => likeUpdateWithoutRaceInputSchema),z.lazy(() => likeUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => likeCreateWithoutRaceInputSchema),z.lazy(() => likeUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const likeUpdateWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.likeUpdateWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => likeUpdateWithoutRaceInputSchema),z.lazy(() => likeUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const likeUpdateManyWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.likeUpdateManyWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => likeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => likeUpdateManyMutationInputSchema),z.lazy(() => likeUncheckedUpdateManyWithoutRaceInputSchema) ]),
}).strict();

export const CompUpsertWithWhereUniqueWithoutRacesInputSchema: z.ZodType<Prisma.CompUpsertWithWhereUniqueWithoutRacesInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CompUpdateWithoutRacesInputSchema),z.lazy(() => CompUncheckedUpdateWithoutRacesInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema) ]),
}).strict();

export const CompUpdateWithWhereUniqueWithoutRacesInputSchema: z.ZodType<Prisma.CompUpdateWithWhereUniqueWithoutRacesInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CompUpdateWithoutRacesInputSchema),z.lazy(() => CompUncheckedUpdateWithoutRacesInputSchema) ]),
}).strict();

export const CompUpdateManyWithWhereWithoutRacesInputSchema: z.ZodType<Prisma.CompUpdateManyWithWhereWithoutRacesInput> = z.object({
  where: z.lazy(() => CompScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CompUpdateManyMutationInputSchema),z.lazy(() => CompUncheckedUpdateManyWithoutRacesInputSchema) ]),
}).strict();

export const UserCreateWithoutCompInputSchema: z.ZodType<Prisma.UserCreateWithoutCompInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCompInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCompInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const EventCreateWithoutCompsInputSchema: z.ZodType<Prisma.EventCreateWithoutCompsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutCompsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutCompsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutCompsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutCompsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema) ]),
}).strict();

export const ResultCreateWithoutCompInputSchema: z.ZodType<Prisma.ResultCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutResultsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutResultInputSchema),
  Race: z.lazy(() => RaceCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const ResultUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.ResultUncheckedCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.ResultCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const ResultCreateManyCompInputEnvelopeSchema: z.ZodType<Prisma.ResultCreateManyCompInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ResultCreateManyCompInputSchema),z.lazy(() => ResultCreateManyCompInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const followCreateWithoutCompInputSchema: z.ZodType<Prisma.followCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const followUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.followUncheckedCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const followCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.followCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => followCreateWithoutCompInputSchema),z.lazy(() => followUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const followCreateManyCompInputEnvelopeSchema: z.ZodType<Prisma.followCreateManyCompInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => followCreateManyCompInputSchema),z.lazy(() => followCreateManyCompInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const likeCreateWithoutCompInputSchema: z.ZodType<Prisma.likeCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikeInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikeInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikeInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  eventComment: z.lazy(() => eventCommentCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const likeUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.likeUncheckedCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const likeCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.likeCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => likeCreateWithoutCompInputSchema),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const likeCreateManyCompInputEnvelopeSchema: z.ZodType<Prisma.likeCreateManyCompInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => likeCreateManyCompInputSchema),z.lazy(() => likeCreateManyCompInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RaceCreateWithoutCompsInputSchema: z.ZodType<Prisma.RaceCreateWithoutCompsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  compId: z.string().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutCompsInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutCompsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutCompsInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutCompsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema) ]),
}).strict();

export const UserUpsertWithoutCompInputSchema: z.ZodType<Prisma.UserUpsertWithoutCompInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCompInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCompInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCompInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCompInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const UserUpdateWithoutCompInputSchema: z.ZodType<Prisma.UserUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EventUpsertWithWhereUniqueWithoutCompsInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutCompsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutCompsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCompsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutCompsInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutCompsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutCompsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCompsInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutCompsInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutCompsInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutCompsInputSchema) ]),
}).strict();

export const ResultUpsertWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.ResultUpsertWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ResultUpdateWithoutCompInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const ResultUpdateWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.ResultUpdateWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateWithoutCompInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const ResultUpdateManyWithWhereWithoutCompInputSchema: z.ZodType<Prisma.ResultUpdateManyWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => ResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateManyMutationInputSchema),z.lazy(() => ResultUncheckedUpdateManyWithoutCompInputSchema) ]),
}).strict();

export const followUpsertWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.followUpsertWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => followUpdateWithoutCompInputSchema),z.lazy(() => followUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => followCreateWithoutCompInputSchema),z.lazy(() => followUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const followUpdateWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.followUpdateWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => followUpdateWithoutCompInputSchema),z.lazy(() => followUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const followUpdateManyWithWhereWithoutCompInputSchema: z.ZodType<Prisma.followUpdateManyWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => followScalarWhereInputSchema),
  data: z.union([ z.lazy(() => followUpdateManyMutationInputSchema),z.lazy(() => followUncheckedUpdateManyWithoutCompInputSchema) ]),
}).strict();

export const likeUpsertWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.likeUpsertWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => likeUpdateWithoutCompInputSchema),z.lazy(() => likeUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => likeCreateWithoutCompInputSchema),z.lazy(() => likeUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const likeUpdateWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.likeUpdateWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => likeUpdateWithoutCompInputSchema),z.lazy(() => likeUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const likeUpdateManyWithWhereWithoutCompInputSchema: z.ZodType<Prisma.likeUpdateManyWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => likeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => likeUpdateManyMutationInputSchema),z.lazy(() => likeUncheckedUpdateManyWithoutCompInputSchema) ]),
}).strict();

export const RaceUpsertWithWhereUniqueWithoutCompsInputSchema: z.ZodType<Prisma.RaceUpsertWithWhereUniqueWithoutCompsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RaceUpdateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCompsInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema) ]),
}).strict();

export const RaceUpdateWithWhereUniqueWithoutCompsInputSchema: z.ZodType<Prisma.RaceUpdateWithWhereUniqueWithoutCompsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCompsInputSchema) ]),
}).strict();

export const RaceUpdateManyWithWhereWithoutCompsInputSchema: z.ZodType<Prisma.RaceUpdateManyWithWhereWithoutCompsInput> = z.object({
  where: z.lazy(() => RaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateManyMutationInputSchema),z.lazy(() => RaceUncheckedUpdateManyWithoutCompsInputSchema) ]),
}).strict();

export const CompCreateWithoutResultsInputSchema: z.ZodType<Prisma.CompCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutResultsInputSchema),z.lazy(() => CompUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const EventCreateWithoutResultsInputSchema: z.ZodType<Prisma.EventCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutResultsInputSchema),z.lazy(() => EventUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const UserCreateWithoutResultInputSchema: z.ZodType<Prisma.UserCreateWithoutResultInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutResultInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutResultInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutResultInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutResultInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutResultInputSchema),z.lazy(() => UserUncheckedCreateWithoutResultInputSchema) ]),
}).strict();

export const RaceCreateWithoutResultsInputSchema: z.ZodType<Prisma.RaceCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  compId: z.string().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const CompUpsertWithoutResultsInputSchema: z.ZodType<Prisma.CompUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => CompUpdateWithoutResultsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutResultsInputSchema),z.lazy(() => CompUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const CompUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.CompUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => CompWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompUpdateWithoutResultsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const CompUpdateWithoutResultsInputSchema: z.ZodType<Prisma.CompUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutResultsInputSchema: z.ZodType<Prisma.EventUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutResultsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutResultsInputSchema),z.lazy(() => EventUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutResultsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const EventUpdateWithoutResultsInputSchema: z.ZodType<Prisma.EventUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutResultInputSchema: z.ZodType<Prisma.UserUpsertWithoutResultInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutResultInputSchema),z.lazy(() => UserUncheckedUpdateWithoutResultInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutResultInputSchema),z.lazy(() => UserUncheckedCreateWithoutResultInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutResultInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutResultInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutResultInputSchema),z.lazy(() => UserUncheckedUpdateWithoutResultInputSchema) ]),
}).strict();

export const UserUpdateWithoutResultInputSchema: z.ZodType<Prisma.UserUpdateWithoutResultInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutResultInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutResultInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const RaceUpsertWithoutResultsInputSchema: z.ZodType<Prisma.RaceUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => RaceUpdateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const RaceUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.RaceUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => RaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RaceUpdateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const RaceUpdateWithoutResultsInputSchema: z.ZodType<Prisma.RaceUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const EventCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.EventCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const EventCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyOrganizationInputSchema),z.lazy(() => EventCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SeriesCreateWithoutOrgInputSchema: z.ZodType<Prisma.SeriesCreateWithoutOrgInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutOrgInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutOrgInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutOrgInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutOrgInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrgInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema) ]),
}).strict();

export const SeriesCreateManyOrgInputEnvelopeSchema: z.ZodType<Prisma.SeriesCreateManyOrgInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SeriesCreateManyOrgInputSchema),z.lazy(() => SeriesCreateManyOrgInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const followCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.followCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const followUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.followUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const followCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.followCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => followCreateWithoutOrganizationInputSchema),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const followCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.followCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => followCreateManyOrganizationInputSchema),z.lazy(() => followCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const likeCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.likeCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikeInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikeInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikeInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  eventComment: z.lazy(() => eventCommentCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const likeUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.likeUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const likeCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.likeCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => likeCreateWithoutOrganizationInputSchema),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const likeCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.likeCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => likeCreateManyOrganizationInputSchema),z.lazy(() => likeCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpsertWithoutOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EventUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const SeriesUpsertWithWhereUniqueWithoutOrgInputSchema: z.ZodType<Prisma.SeriesUpsertWithWhereUniqueWithoutOrgInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SeriesUpdateWithoutOrgInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutOrgInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrgInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrgInputSchema) ]),
}).strict();

export const SeriesUpdateWithWhereUniqueWithoutOrgInputSchema: z.ZodType<Prisma.SeriesUpdateWithWhereUniqueWithoutOrgInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutOrgInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutOrgInputSchema) ]),
}).strict();

export const SeriesUpdateManyWithWhereWithoutOrgInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithWhereWithoutOrgInput> = z.object({
  where: z.lazy(() => SeriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateManyMutationInputSchema),z.lazy(() => SeriesUncheckedUpdateManyWithoutOrgInputSchema) ]),
}).strict();

export const SeriesScalarWhereInputSchema: z.ZodType<Prisma.SeriesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SeriesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const followUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.followUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => followUpdateWithoutOrganizationInputSchema),z.lazy(() => followUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => followCreateWithoutOrganizationInputSchema),z.lazy(() => followUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const followUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.followUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => followUpdateWithoutOrganizationInputSchema),z.lazy(() => followUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const followUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.followUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => followScalarWhereInputSchema),
  data: z.union([ z.lazy(() => followUpdateManyMutationInputSchema),z.lazy(() => followUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const likeUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.likeUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => likeUpdateWithoutOrganizationInputSchema),z.lazy(() => likeUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => likeCreateWithoutOrganizationInputSchema),z.lazy(() => likeUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const likeUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.likeUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => likeUpdateWithoutOrganizationInputSchema),z.lazy(() => likeUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const likeUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.likeUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => likeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => likeUpdateManyMutationInputSchema),z.lazy(() => likeUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const EventCreateWithoutVenueInputSchema: z.ZodType<Prisma.EventCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutVenueInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutVenueInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutVenueInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const EventCreateManyVenueInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyVenueInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyVenueInputSchema),z.lazy(() => EventCreateManyVenueInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutVenueInputSchema: z.ZodType<Prisma.UserCreateWithoutVenueInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutVenueInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutVenueInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutVenueInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutVenueInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutVenueInputSchema),z.lazy(() => UserUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const SeriesCreateWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesCreateWithoutVenuesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Org: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutVenuesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutVenuesInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema) ]),
}).strict();

export const EventUpsertWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutVenueInputSchema),z.lazy(() => EventUncheckedUpdateWithoutVenueInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutVenueInputSchema),z.lazy(() => EventUncheckedUpdateWithoutVenueInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutVenueInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutVenueInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutVenueInputSchema) ]),
}).strict();

export const UserUpsertWithoutVenueInputSchema: z.ZodType<Prisma.UserUpsertWithoutVenueInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutVenueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutVenueInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutVenueInputSchema),z.lazy(() => UserUncheckedCreateWithoutVenueInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutVenueInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutVenueInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutVenueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutVenueInputSchema) ]),
}).strict();

export const UserUpdateWithoutVenueInputSchema: z.ZodType<Prisma.UserUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutVenueInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUpsertWithWhereUniqueWithoutVenuesInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SeriesUpdateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutVenuesInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema) ]),
}).strict();

export const SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUpdateWithWhereUniqueWithoutVenuesInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutVenuesInputSchema) ]),
}).strict();

export const SeriesUpdateManyWithWhereWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithWhereWithoutVenuesInput> = z.object({
  where: z.lazy(() => SeriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateManyMutationInputSchema),z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesInputSchema) ]),
}).strict();

export const EventCreateWithoutCommentsInputSchema: z.ZodType<Prisma.EventCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutCommentsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutCommentsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutCommentsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCommentsInputSchema) ]),
}).strict();

export const UserCreateWithoutEventCommentInputSchema: z.ZodType<Prisma.UserCreateWithoutEventCommentInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEventCommentInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEventCommentInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEventCommentInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEventCommentInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEventCommentInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventCommentInputSchema) ]),
}).strict();

export const likeCreateWithoutEventCommentInputSchema: z.ZodType<Prisma.likeCreateWithoutEventCommentInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikeInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikeInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikeInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikeInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema)
}).strict();

export const likeUncheckedCreateWithoutEventCommentInputSchema: z.ZodType<Prisma.likeUncheckedCreateWithoutEventCommentInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const likeCreateOrConnectWithoutEventCommentInputSchema: z.ZodType<Prisma.likeCreateOrConnectWithoutEventCommentInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => likeCreateWithoutEventCommentInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema) ]),
}).strict();

export const likeCreateManyEventCommentInputEnvelopeSchema: z.ZodType<Prisma.likeCreateManyEventCommentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => likeCreateManyEventCommentInputSchema),z.lazy(() => likeCreateManyEventCommentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventUpsertWithoutCommentsInputSchema: z.ZodType<Prisma.EventUpsertWithoutCommentsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCommentsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCommentsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutCommentsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutCommentsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCommentsInputSchema) ]),
}).strict();

export const EventUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.EventUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutEventCommentInputSchema: z.ZodType<Prisma.UserUpsertWithoutEventCommentInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEventCommentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventCommentInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEventCommentInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventCommentInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutEventCommentInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutEventCommentInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutEventCommentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventCommentInputSchema) ]),
}).strict();

export const UserUpdateWithoutEventCommentInputSchema: z.ZodType<Prisma.UserUpdateWithoutEventCommentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEventCommentInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEventCommentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const likeUpsertWithWhereUniqueWithoutEventCommentInputSchema: z.ZodType<Prisma.likeUpsertWithWhereUniqueWithoutEventCommentInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => likeUpdateWithoutEventCommentInputSchema),z.lazy(() => likeUncheckedUpdateWithoutEventCommentInputSchema) ]),
  create: z.union([ z.lazy(() => likeCreateWithoutEventCommentInputSchema),z.lazy(() => likeUncheckedCreateWithoutEventCommentInputSchema) ]),
}).strict();

export const likeUpdateWithWhereUniqueWithoutEventCommentInputSchema: z.ZodType<Prisma.likeUpdateWithWhereUniqueWithoutEventCommentInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => likeUpdateWithoutEventCommentInputSchema),z.lazy(() => likeUncheckedUpdateWithoutEventCommentInputSchema) ]),
}).strict();

export const likeUpdateManyWithWhereWithoutEventCommentInputSchema: z.ZodType<Prisma.likeUpdateManyWithWhereWithoutEventCommentInput> = z.object({
  where: z.lazy(() => likeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => likeUpdateManyMutationInputSchema),z.lazy(() => likeUncheckedUpdateManyWithoutEventCommentInputSchema) ]),
}).strict();

export const CompCreateWithoutFollowInputSchema: z.ZodType<Prisma.CompCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutFollowInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutFollowInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutFollowInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutFollowInputSchema),z.lazy(() => CompUncheckedCreateWithoutFollowInputSchema) ]),
}).strict();

export const EventCreateWithoutFollowInputSchema: z.ZodType<Prisma.EventCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutFollowInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutFollowInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutFollowInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutFollowInputSchema),z.lazy(() => EventUncheckedCreateWithoutFollowInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutFollowInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrgInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutFollowInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrgInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutFollowInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutFollowInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFollowInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFollowInputSchema) ]),
}).strict();

export const RaceCreateWithoutFollowInputSchema: z.ZodType<Prisma.RaceCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  compId: z.string().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutFollowInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutFollowInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutFollowInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutFollowInputSchema),z.lazy(() => RaceUncheckedCreateWithoutFollowInputSchema) ]),
}).strict();

export const SeriesCreateWithoutFollowInputSchema: z.ZodType<Prisma.SeriesCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Org: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutFollowInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutFollowInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutFollowInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutFollowInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutFollowInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutFollowInputSchema) ]),
}).strict();

export const UserCreateWithoutFollowInputSchema: z.ZodType<Prisma.UserCreateWithoutFollowInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFollowInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFollowInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFollowInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFollowInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFollowInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowInputSchema) ]),
}).strict();

export const CompUpsertWithoutFollowInputSchema: z.ZodType<Prisma.CompUpsertWithoutFollowInput> = z.object({
  update: z.union([ z.lazy(() => CompUpdateWithoutFollowInputSchema),z.lazy(() => CompUncheckedUpdateWithoutFollowInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutFollowInputSchema),z.lazy(() => CompUncheckedCreateWithoutFollowInputSchema) ]),
  where: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const CompUpdateToOneWithWhereWithoutFollowInputSchema: z.ZodType<Prisma.CompUpdateToOneWithWhereWithoutFollowInput> = z.object({
  where: z.lazy(() => CompWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompUpdateWithoutFollowInputSchema),z.lazy(() => CompUncheckedUpdateWithoutFollowInputSchema) ]),
}).strict();

export const CompUpdateWithoutFollowInputSchema: z.ZodType<Prisma.CompUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutFollowInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutFollowInputSchema: z.ZodType<Prisma.EventUpsertWithoutFollowInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutFollowInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFollowInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutFollowInputSchema),z.lazy(() => EventUncheckedCreateWithoutFollowInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutFollowInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutFollowInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutFollowInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFollowInputSchema) ]),
}).strict();

export const EventUpdateWithoutFollowInputSchema: z.ZodType<Prisma.EventUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutFollowInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutFollowInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutFollowInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutFollowInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFollowInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFollowInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFollowInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutFollowInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutFollowInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutFollowInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFollowInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutFollowInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrgNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutFollowInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrgNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RaceUpsertWithoutFollowInputSchema: z.ZodType<Prisma.RaceUpsertWithoutFollowInput> = z.object({
  update: z.union([ z.lazy(() => RaceUpdateWithoutFollowInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutFollowInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutFollowInputSchema),z.lazy(() => RaceUncheckedCreateWithoutFollowInputSchema) ]),
  where: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const RaceUpdateToOneWithWhereWithoutFollowInputSchema: z.ZodType<Prisma.RaceUpdateToOneWithWhereWithoutFollowInput> = z.object({
  where: z.lazy(() => RaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RaceUpdateWithoutFollowInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutFollowInputSchema) ]),
}).strict();

export const RaceUpdateWithoutFollowInputSchema: z.ZodType<Prisma.RaceUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutFollowInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const SeriesUpsertWithoutFollowInputSchema: z.ZodType<Prisma.SeriesUpsertWithoutFollowInput> = z.object({
  update: z.union([ z.lazy(() => SeriesUpdateWithoutFollowInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutFollowInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutFollowInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutFollowInputSchema) ]),
  where: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const SeriesUpdateToOneWithWhereWithoutFollowInputSchema: z.ZodType<Prisma.SeriesUpdateToOneWithWhereWithoutFollowInput> = z.object({
  where: z.lazy(() => SeriesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutFollowInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutFollowInputSchema) ]),
}).strict();

export const SeriesUpdateWithoutFollowInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Org: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutFollowInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutFollowInputSchema: z.ZodType<Prisma.UserUpsertWithoutFollowInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFollowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFollowInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFollowInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFollowInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFollowInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFollowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFollowInputSchema) ]),
}).strict();

export const UserUpdateWithoutFollowInputSchema: z.ZodType<Prisma.UserUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFollowInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const CompCreateWithoutLikeInputSchema: z.ZodType<Prisma.CompCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutLikeInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutLikeInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutLikeInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutLikeInputSchema),z.lazy(() => CompUncheckedCreateWithoutLikeInputSchema) ]),
}).strict();

export const EventCreateWithoutLikeInputSchema: z.ZodType<Prisma.EventCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutLikeInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutLikeInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutLikeInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutLikeInputSchema),z.lazy(() => EventUncheckedCreateWithoutLikeInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutLikeInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrgInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutLikeInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrgInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutLikeInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutLikeInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLikeInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLikeInputSchema) ]),
}).strict();

export const RaceCreateWithoutLikeInputSchema: z.ZodType<Prisma.RaceCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  compId: z.string().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutLikeInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutLikeInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutLikeInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutLikeInputSchema),z.lazy(() => RaceUncheckedCreateWithoutLikeInputSchema) ]),
}).strict();

export const SeriesCreateWithoutLikeInputSchema: z.ZodType<Prisma.SeriesCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Org: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutLikeInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutLikeInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutLikeInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutLikeInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutLikeInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutLikeInputSchema) ]),
}).strict();

export const UserCreateWithoutLikeInputSchema: z.ZodType<Prisma.UserCreateWithoutLikeInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutLikeInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutLikeInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutLikeInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutLikeInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutLikeInputSchema),z.lazy(() => UserUncheckedCreateWithoutLikeInputSchema) ]),
}).strict();

export const eventCommentCreateWithoutLikesInputSchema: z.ZodType<Prisma.eventCommentCreateWithoutLikesInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutEventCommentInputSchema)
}).strict();

export const eventCommentUncheckedCreateWithoutLikesInputSchema: z.ZodType<Prisma.eventCommentUncheckedCreateWithoutLikesInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const eventCommentCreateOrConnectWithoutLikesInputSchema: z.ZodType<Prisma.eventCommentCreateOrConnectWithoutLikesInput> = z.object({
  where: z.lazy(() => eventCommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => eventCommentCreateWithoutLikesInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutLikesInputSchema) ]),
}).strict();

export const CompUpsertWithoutLikeInputSchema: z.ZodType<Prisma.CompUpsertWithoutLikeInput> = z.object({
  update: z.union([ z.lazy(() => CompUpdateWithoutLikeInputSchema),z.lazy(() => CompUncheckedUpdateWithoutLikeInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutLikeInputSchema),z.lazy(() => CompUncheckedCreateWithoutLikeInputSchema) ]),
  where: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const CompUpdateToOneWithWhereWithoutLikeInputSchema: z.ZodType<Prisma.CompUpdateToOneWithWhereWithoutLikeInput> = z.object({
  where: z.lazy(() => CompWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompUpdateWithoutLikeInputSchema),z.lazy(() => CompUncheckedUpdateWithoutLikeInputSchema) ]),
}).strict();

export const CompUpdateWithoutLikeInputSchema: z.ZodType<Prisma.CompUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutLikeInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutLikeInputSchema: z.ZodType<Prisma.EventUpsertWithoutLikeInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutLikeInputSchema),z.lazy(() => EventUncheckedUpdateWithoutLikeInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutLikeInputSchema),z.lazy(() => EventUncheckedCreateWithoutLikeInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutLikeInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutLikeInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutLikeInputSchema),z.lazy(() => EventUncheckedUpdateWithoutLikeInputSchema) ]),
}).strict();

export const EventUpdateWithoutLikeInputSchema: z.ZodType<Prisma.EventUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutLikeInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutLikeInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutLikeInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutLikeInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLikeInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLikeInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLikeInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutLikeInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutLikeInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutLikeInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLikeInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutLikeInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrgNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutLikeInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrgNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RaceUpsertWithoutLikeInputSchema: z.ZodType<Prisma.RaceUpsertWithoutLikeInput> = z.object({
  update: z.union([ z.lazy(() => RaceUpdateWithoutLikeInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutLikeInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutLikeInputSchema),z.lazy(() => RaceUncheckedCreateWithoutLikeInputSchema) ]),
  where: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const RaceUpdateToOneWithWhereWithoutLikeInputSchema: z.ZodType<Prisma.RaceUpdateToOneWithWhereWithoutLikeInput> = z.object({
  where: z.lazy(() => RaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RaceUpdateWithoutLikeInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutLikeInputSchema) ]),
}).strict();

export const RaceUpdateWithoutLikeInputSchema: z.ZodType<Prisma.RaceUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutLikeInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const SeriesUpsertWithoutLikeInputSchema: z.ZodType<Prisma.SeriesUpsertWithoutLikeInput> = z.object({
  update: z.union([ z.lazy(() => SeriesUpdateWithoutLikeInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutLikeInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutLikeInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutLikeInputSchema) ]),
  where: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const SeriesUpdateToOneWithWhereWithoutLikeInputSchema: z.ZodType<Prisma.SeriesUpdateToOneWithWhereWithoutLikeInput> = z.object({
  where: z.lazy(() => SeriesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutLikeInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutLikeInputSchema) ]),
}).strict();

export const SeriesUpdateWithoutLikeInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Org: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutLikeInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutLikeInputSchema: z.ZodType<Prisma.UserUpsertWithoutLikeInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutLikeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLikeInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutLikeInputSchema),z.lazy(() => UserUncheckedCreateWithoutLikeInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutLikeInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutLikeInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutLikeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLikeInputSchema) ]),
}).strict();

export const UserUpdateWithoutLikeInputSchema: z.ZodType<Prisma.UserUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutLikeInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const eventCommentUpsertWithoutLikesInputSchema: z.ZodType<Prisma.eventCommentUpsertWithoutLikesInput> = z.object({
  update: z.union([ z.lazy(() => eventCommentUpdateWithoutLikesInputSchema),z.lazy(() => eventCommentUncheckedUpdateWithoutLikesInputSchema) ]),
  create: z.union([ z.lazy(() => eventCommentCreateWithoutLikesInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutLikesInputSchema) ]),
  where: z.lazy(() => eventCommentWhereInputSchema).optional()
}).strict();

export const eventCommentUpdateToOneWithWhereWithoutLikesInputSchema: z.ZodType<Prisma.eventCommentUpdateToOneWithWhereWithoutLikesInput> = z.object({
  where: z.lazy(() => eventCommentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => eventCommentUpdateWithoutLikesInputSchema),z.lazy(() => eventCommentUncheckedUpdateWithoutLikesInputSchema) ]),
}).strict();

export const eventCommentUpdateWithoutLikesInputSchema: z.ZodType<Prisma.eventCommentUpdateWithoutLikesInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutEventCommentNestedInputSchema).optional()
}).strict();

export const eventCommentUncheckedUpdateWithoutLikesInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateWithoutLikesInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const KeyCreateWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateWithoutUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const KeyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const KeyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const KeyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.KeyCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => KeyCreateManyUserInputSchema),z.lazy(() => KeyCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserSettingsCreateWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable()
}).strict();

export const UserSettingsUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable()
}).strict();

export const UserSettingsCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserSettingsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SeriesCreateWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Org: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const SeriesCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.SeriesCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SeriesCreateManyPublisherInputSchema),z.lazy(() => SeriesCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventCreateWithoutPublisherInputSchema: z.ZodType<Prisma.EventCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const EventCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyPublisherInputSchema),z.lazy(() => EventCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RaceCreateWithoutPublisherInputSchema: z.ZodType<Prisma.RaceCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  compId: z.string().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const RaceCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.RaceCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RaceCreateManyPublisherInputSchema),z.lazy(() => RaceCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CompCreateWithoutPublisherInputSchema: z.ZodType<Prisma.CompCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const CompCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.CompCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CompCreateManyPublisherInputSchema),z.lazy(() => CompCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ResultCreateWithoutPublisherInputSchema: z.ZodType<Prisma.ResultCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutResultsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutResultsInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const ResultUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.ResultCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const ResultCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.ResultCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ResultCreateManyPublisherInputSchema),z.lazy(() => ResultCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutOwnerInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrgInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutOrganizationInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutOwnerInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrgInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutOwnerInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema) ]),
}).strict();

export const OrganizationCreateManyOwnerInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyOwnerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyOwnerInputSchema),z.lazy(() => OrganizationCreateManyOwnerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const VenueCreateWithoutPublisherInputSchema: z.ZodType<Prisma.VenueCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const VenueCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.VenueCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => VenueCreateManyPublisherInputSchema),z.lazy(() => VenueCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const eventCommentCreateWithoutUserInputSchema: z.ZodType<Prisma.eventCommentCreateWithoutUserInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  likes: z.lazy(() => likeCreateNestedManyWithoutEventCommentInputSchema).optional()
}).strict();

export const eventCommentUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.eventCommentUncheckedCreateWithoutUserInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  likes: z.lazy(() => likeUncheckedCreateNestedManyWithoutEventCommentInputSchema).optional()
}).strict();

export const eventCommentCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.eventCommentCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => eventCommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => eventCommentCreateWithoutUserInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const eventCommentCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.eventCommentCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => eventCommentCreateManyUserInputSchema),z.lazy(() => eventCommentCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const followCreateWithoutUserInputSchema: z.ZodType<Prisma.followCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowInputSchema).optional()
}).strict();

export const followUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.followUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const followCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.followCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => followCreateWithoutUserInputSchema),z.lazy(() => followUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const followCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.followCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => followCreateManyUserInputSchema),z.lazy(() => followCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const likeCreateWithoutUserInputSchema: z.ZodType<Prisma.likeCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikeInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikeInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikeInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikeInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikeInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const likeUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.likeUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const likeCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.likeCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => likeCreateWithoutUserInputSchema),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const likeCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.likeCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => likeCreateManyUserInputSchema),z.lazy(() => likeCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
}).strict();

export const KeyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.KeyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => KeyUpdateWithoutUserInputSchema),z.lazy(() => KeyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const KeyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => KeyUpdateWithoutUserInputSchema),z.lazy(() => KeyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const KeyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => KeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => KeyUpdateManyMutationInputSchema),z.lazy(() => KeyUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const KeyScalarWhereInputSchema: z.ZodType<Prisma.KeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserSettingsUpsertWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => UserSettingsUpdateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => UserSettingsWhereInputSchema).optional()
}).strict();

export const UserSettingsUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserSettingsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserSettingsUpdateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserSettingsUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SeriesUpdateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const SeriesUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => SeriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateManyMutationInputSchema),z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const EventUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const RaceUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RaceUpdateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const RaceUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const RaceUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => RaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateManyMutationInputSchema),z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const CompUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.CompUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CompUpdateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const CompUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.CompUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CompUpdateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const CompUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.CompUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => CompScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CompUpdateManyMutationInputSchema),z.lazy(() => CompUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const ResultUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ResultUpdateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const ResultUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const ResultUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => ResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateManyMutationInputSchema),z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutOwnerInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOwnerInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutOwnerInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOwnerInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutOwnerInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerInputSchema) ]),
}).strict();

export const OrganizationScalarWhereInputSchema: z.ZodType<Prisma.OrganizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VenueUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => VenueUpdateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const VenueUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => VenueUpdateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const VenueUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => VenueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => VenueUpdateManyMutationInputSchema),z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const eventCommentUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.eventCommentUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => eventCommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => eventCommentUpdateWithoutUserInputSchema),z.lazy(() => eventCommentUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => eventCommentCreateWithoutUserInputSchema),z.lazy(() => eventCommentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const eventCommentUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.eventCommentUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => eventCommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => eventCommentUpdateWithoutUserInputSchema),z.lazy(() => eventCommentUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const eventCommentUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.eventCommentUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => eventCommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => eventCommentUpdateManyMutationInputSchema),z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const followUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.followUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => followUpdateWithoutUserInputSchema),z.lazy(() => followUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => followCreateWithoutUserInputSchema),z.lazy(() => followUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const followUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.followUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => followWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => followUpdateWithoutUserInputSchema),z.lazy(() => followUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const followUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.followUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => followScalarWhereInputSchema),
  data: z.union([ z.lazy(() => followUpdateManyMutationInputSchema),z.lazy(() => followUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const likeUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.likeUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => likeUpdateWithoutUserInputSchema),z.lazy(() => likeUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => likeCreateWithoutUserInputSchema),z.lazy(() => likeUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const likeUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.likeUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => likeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => likeUpdateWithoutUserInputSchema),z.lazy(() => likeUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const likeUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.likeUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => likeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => likeUpdateManyMutationInputSchema),z.lazy(() => likeUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const UserCreateWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserCreateWithoutUserSettingsInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserSettingsInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserSettingsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserSettingsInputSchema) ]),
}).strict();

export const UserUpsertWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserSettingsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserSettingsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserSettingsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserSettingsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserSettingsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserSettingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserSettingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateWithoutAuth_sessionInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuth_sessionInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuth_sessionInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]),
}).strict();

export const UserUpsertWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuth_sessionInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuth_sessionInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuth_sessionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuth_sessionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateWithoutAuth_keyInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuth_keyInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  follow: z.lazy(() => followUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => likeUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuth_keyInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]),
}).strict();

export const UserUpsertWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuth_keyInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuth_keyInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuth_keyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuth_keyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EventCreateManySeriesInputSchema: z.ZodType<Prisma.EventCreateManySeriesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const followCreateManySeriesInputSchema: z.ZodType<Prisma.followCreateManySeriesInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const likeCreateManySeriesInputSchema: z.ZodType<Prisma.likeCreateManySeriesInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const EventUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.EventUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const followUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.followUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const followUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.followUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.likeUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikeNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikeNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikeNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const likeUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.likeUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const likeUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceCreateManyEventInputSchema: z.ZodType<Prisma.RaceCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  compId: z.string().optional().nullable()
}).strict();

export const ResultCreateManyEventInputSchema: z.ZodType<Prisma.ResultCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const followCreateManyEventInputSchema: z.ZodType<Prisma.followCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const likeCreateManyEventInputSchema: z.ZodType<Prisma.likeCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const eventCommentCreateManyEventInputSchema: z.ZodType<Prisma.eventCommentCreateManyEventInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  userId: z.string(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const RaceUpdateWithoutEventInputSchema: z.ZodType<Prisma.RaceUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUpdateWithoutEventInputSchema: z.ZodType<Prisma.ResultUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutResultsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneRequiredWithoutResultNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const followUpdateWithoutEventInputSchema: z.ZodType<Prisma.followUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const followUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.followUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeUpdateWithoutEventInputSchema: z.ZodType<Prisma.likeUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikeNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikeNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikeNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const likeUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.likeUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const likeUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompUpdateWithoutEventsInputSchema: z.ZodType<Prisma.CompUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateManyWithoutEventsInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const eventCommentUpdateWithoutEventInputSchema: z.ZodType<Prisma.eventCommentUpdateWithoutEventInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutEventCommentNestedInputSchema).optional(),
  likes: z.lazy(() => likeUpdateManyWithoutEventCommentNestedInputSchema).optional()
}).strict();

export const eventCommentUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateWithoutEventInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.lazy(() => likeUncheckedUpdateManyWithoutEventCommentNestedInputSchema).optional()
}).strict();

export const eventCommentUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateManyWithoutEventInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultCreateManyRaceInputSchema: z.ZodType<Prisma.ResultCreateManyRaceInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const followCreateManyRaceInputSchema: z.ZodType<Prisma.followCreateManyRaceInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const likeCreateManyRaceInputSchema: z.ZodType<Prisma.likeCreateManyRaceInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const ResultUpdateWithoutRaceInputSchema: z.ZodType<Prisma.ResultUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutResultsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutResultsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneRequiredWithoutResultNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyWithoutRaceInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const followUpdateWithoutRaceInputSchema: z.ZodType<Prisma.followUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const followUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.followUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutRaceInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeUpdateWithoutRaceInputSchema: z.ZodType<Prisma.likeUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikeNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikeNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikeNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const likeUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.likeUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const likeUncheckedUpdateManyWithoutRaceInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompUpdateWithoutRacesInputSchema: z.ZodType<Prisma.CompUpdateWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutCompNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutRacesInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutCompNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateManyWithoutRacesInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultCreateManyCompInputSchema: z.ZodType<Prisma.ResultCreateManyCompInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const followCreateManyCompInputSchema: z.ZodType<Prisma.followCreateManyCompInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const likeCreateManyCompInputSchema: z.ZodType<Prisma.likeCreateManyCompInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const EventUpdateWithoutCompsInputSchema: z.ZodType<Prisma.EventUpdateWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutCompsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutCompsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUpdateWithoutCompInputSchema: z.ZodType<Prisma.ResultUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutResultsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneRequiredWithoutResultNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyWithoutCompInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const followUpdateWithoutCompInputSchema: z.ZodType<Prisma.followUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const followUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.followUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutCompInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeUpdateWithoutCompInputSchema: z.ZodType<Prisma.likeUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikeNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikeNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikeNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const likeUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.likeUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const likeUncheckedUpdateManyWithoutCompInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceUpdateWithoutCompsInputSchema: z.ZodType<Prisma.RaceUpdateWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutCompsInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateManyWithoutCompsInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventCreateManyOrganizationInputSchema: z.ZodType<Prisma.EventCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const SeriesCreateManyOrgInputSchema: z.ZodType<Prisma.SeriesCreateManyOrgInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const followCreateManyOrganizationInputSchema: z.ZodType<Prisma.followCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const likeCreateManyOrganizationInputSchema: z.ZodType<Prisma.likeCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const EventUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUpdateWithoutOrgInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutOrgInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutOrgInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutOrgInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateManyWithoutOrgInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutOrgInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const followUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.followUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const followUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.followUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.likeUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikeNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikeNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikeNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const likeUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.likeUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const likeUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventCreateManyVenueInputSchema: z.ZodType<Prisma.EventCreateManyVenueInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const EventUpdateWithoutVenueInputSchema: z.ZodType<Prisma.EventUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutVenueInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutVenueInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUpdateWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutVenuesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Org: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutVenuesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateManyWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutVenuesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const likeCreateManyEventCommentInputSchema: z.ZodType<Prisma.likeCreateManyEventCommentInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const likeUpdateWithoutEventCommentInputSchema: z.ZodType<Prisma.likeUpdateWithoutEventCommentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikeNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikeNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikeNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikeNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional()
}).strict();

export const likeUncheckedUpdateWithoutEventCommentInputSchema: z.ZodType<Prisma.likeUncheckedUpdateWithoutEventCommentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeUncheckedUpdateManyWithoutEventCommentInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutEventCommentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const KeyCreateManyUserInputSchema: z.ZodType<Prisma.KeyCreateManyUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const SeriesCreateManyPublisherInputSchema: z.ZodType<Prisma.SeriesCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const EventCreateManyPublisherInputSchema: z.ZodType<Prisma.EventCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const RaceCreateManyPublisherInputSchema: z.ZodType<Prisma.RaceCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable()
}).strict();

export const CompCreateManyPublisherInputSchema: z.ZodType<Prisma.CompCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateManyPublisherInputSchema: z.ZodType<Prisma.ResultCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const OrganizationCreateManyOwnerInputSchema: z.ZodType<Prisma.OrganizationCreateManyOwnerInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VenueCreateManyPublisherInputSchema: z.ZodType<Prisma.VenueCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const eventCommentCreateManyUserInputSchema: z.ZodType<Prisma.eventCommentCreateManyUserInput> = z.object({
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const followCreateManyUserInputSchema: z.ZodType<Prisma.followCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const likeCreateManyUserInputSchema: z.ZodType<Prisma.likeCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable()
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const KeyUpdateWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Org: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.EventUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  comments: z.lazy(() => eventCommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.CompUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutResultsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutResultsNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUpdateWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutOwnerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrgNestedInputSchema).optional(),
  follow: z.lazy(() => followUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  like: z.lazy(() => likeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutOwnerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrgNestedInputSchema).optional(),
  follow: z.lazy(() => followUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  like: z.lazy(() => likeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOwnerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const eventCommentUpdateWithoutUserInputSchema: z.ZodType<Prisma.eventCommentUpdateWithoutUserInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  likes: z.lazy(() => likeUpdateManyWithoutEventCommentNestedInputSchema).optional()
}).strict();

export const eventCommentUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateWithoutUserInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.lazy(() => likeUncheckedUpdateManyWithoutEventCommentNestedInputSchema).optional()
}).strict();

export const eventCommentUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.eventCommentUncheckedUpdateManyWithoutUserInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const followUpdateWithoutUserInputSchema: z.ZodType<Prisma.followUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowNestedInputSchema).optional()
}).strict();

export const followUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.followUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const followUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.followUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const likeUpdateWithoutUserInputSchema: z.ZodType<Prisma.likeUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikeNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikeNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikeNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikeNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikeNestedInputSchema).optional(),
  eventComment: z.lazy(() => eventCommentUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const likeUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.likeUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const likeUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.likeUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const SeriesFindFirstArgsSchema: z.ZodType<Prisma.SeriesFindFirstArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithRelationInputSchema.array(),SeriesOrderByWithRelationInputSchema ]).optional(),
  cursor: SeriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SeriesScalarFieldEnumSchema,SeriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SeriesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SeriesFindFirstOrThrowArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithRelationInputSchema.array(),SeriesOrderByWithRelationInputSchema ]).optional(),
  cursor: SeriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SeriesScalarFieldEnumSchema,SeriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SeriesFindManyArgsSchema: z.ZodType<Prisma.SeriesFindManyArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithRelationInputSchema.array(),SeriesOrderByWithRelationInputSchema ]).optional(),
  cursor: SeriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SeriesScalarFieldEnumSchema,SeriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SeriesAggregateArgsSchema: z.ZodType<Prisma.SeriesAggregateArgs> = z.object({
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithRelationInputSchema.array(),SeriesOrderByWithRelationInputSchema ]).optional(),
  cursor: SeriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SeriesGroupByArgsSchema: z.ZodType<Prisma.SeriesGroupByArgs> = z.object({
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithAggregationInputSchema.array(),SeriesOrderByWithAggregationInputSchema ]).optional(),
  by: SeriesScalarFieldEnumSchema.array(),
  having: SeriesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SeriesFindUniqueArgsSchema: z.ZodType<Prisma.SeriesFindUniqueArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereUniqueInputSchema,
}).strict()

export const SeriesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SeriesFindUniqueOrThrowArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereUniqueInputSchema,
}).strict()

export const EventFindFirstArgsSchema: z.ZodType<Prisma.EventFindFirstArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const EventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EventFindFirstOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const EventFindManyArgsSchema: z.ZodType<Prisma.EventFindManyArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const EventAggregateArgsSchema: z.ZodType<Prisma.EventAggregateArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const EventGroupByArgsSchema: z.ZodType<Prisma.EventGroupByArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithAggregationInputSchema.array(),EventOrderByWithAggregationInputSchema ]).optional(),
  by: EventScalarFieldEnumSchema.array(),
  having: EventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const EventFindUniqueArgsSchema: z.ZodType<Prisma.EventFindUniqueArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict()

export const EventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EventFindUniqueOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict()

export const RaceFindFirstArgsSchema: z.ZodType<Prisma.RaceFindFirstArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RaceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RaceFindFirstOrThrowArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RaceFindManyArgsSchema: z.ZodType<Prisma.RaceFindManyArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RaceAggregateArgsSchema: z.ZodType<Prisma.RaceAggregateArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RaceGroupByArgsSchema: z.ZodType<Prisma.RaceGroupByArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithAggregationInputSchema.array(),RaceOrderByWithAggregationInputSchema ]).optional(),
  by: RaceScalarFieldEnumSchema.array(),
  having: RaceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RaceFindUniqueArgsSchema: z.ZodType<Prisma.RaceFindUniqueArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict()

export const RaceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RaceFindUniqueOrThrowArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict()

export const CompFindFirstArgsSchema: z.ZodType<Prisma.CompFindFirstArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithRelationInputSchema.array(),CompOrderByWithRelationInputSchema ]).optional(),
  cursor: CompWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompScalarFieldEnumSchema,CompScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CompFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CompFindFirstOrThrowArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithRelationInputSchema.array(),CompOrderByWithRelationInputSchema ]).optional(),
  cursor: CompWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompScalarFieldEnumSchema,CompScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CompFindManyArgsSchema: z.ZodType<Prisma.CompFindManyArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithRelationInputSchema.array(),CompOrderByWithRelationInputSchema ]).optional(),
  cursor: CompWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompScalarFieldEnumSchema,CompScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CompAggregateArgsSchema: z.ZodType<Prisma.CompAggregateArgs> = z.object({
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithRelationInputSchema.array(),CompOrderByWithRelationInputSchema ]).optional(),
  cursor: CompWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const CompGroupByArgsSchema: z.ZodType<Prisma.CompGroupByArgs> = z.object({
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithAggregationInputSchema.array(),CompOrderByWithAggregationInputSchema ]).optional(),
  by: CompScalarFieldEnumSchema.array(),
  having: CompScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const CompFindUniqueArgsSchema: z.ZodType<Prisma.CompFindUniqueArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereUniqueInputSchema,
}).strict()

export const CompFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CompFindUniqueOrThrowArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereUniqueInputSchema,
}).strict()

export const ResultFindFirstArgsSchema: z.ZodType<Prisma.ResultFindFirstArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithRelationInputSchema.array(),ResultOrderByWithRelationInputSchema ]).optional(),
  cursor: ResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ResultFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ResultFindFirstOrThrowArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithRelationInputSchema.array(),ResultOrderByWithRelationInputSchema ]).optional(),
  cursor: ResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ResultFindManyArgsSchema: z.ZodType<Prisma.ResultFindManyArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithRelationInputSchema.array(),ResultOrderByWithRelationInputSchema ]).optional(),
  cursor: ResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ResultAggregateArgsSchema: z.ZodType<Prisma.ResultAggregateArgs> = z.object({
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithRelationInputSchema.array(),ResultOrderByWithRelationInputSchema ]).optional(),
  cursor: ResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ResultGroupByArgsSchema: z.ZodType<Prisma.ResultGroupByArgs> = z.object({
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithAggregationInputSchema.array(),ResultOrderByWithAggregationInputSchema ]).optional(),
  by: ResultScalarFieldEnumSchema.array(),
  having: ResultScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ResultFindUniqueArgsSchema: z.ZodType<Prisma.ResultFindUniqueArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereUniqueInputSchema,
}).strict()

export const ResultFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ResultFindUniqueOrThrowArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereUniqueInputSchema,
}).strict()

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const VenueFindFirstArgsSchema: z.ZodType<Prisma.VenueFindFirstArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithRelationInputSchema.array(),VenueOrderByWithRelationInputSchema ]).optional(),
  cursor: VenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VenueScalarFieldEnumSchema,VenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VenueFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VenueFindFirstOrThrowArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithRelationInputSchema.array(),VenueOrderByWithRelationInputSchema ]).optional(),
  cursor: VenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VenueScalarFieldEnumSchema,VenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VenueFindManyArgsSchema: z.ZodType<Prisma.VenueFindManyArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithRelationInputSchema.array(),VenueOrderByWithRelationInputSchema ]).optional(),
  cursor: VenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VenueScalarFieldEnumSchema,VenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VenueAggregateArgsSchema: z.ZodType<Prisma.VenueAggregateArgs> = z.object({
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithRelationInputSchema.array(),VenueOrderByWithRelationInputSchema ]).optional(),
  cursor: VenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VenueGroupByArgsSchema: z.ZodType<Prisma.VenueGroupByArgs> = z.object({
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithAggregationInputSchema.array(),VenueOrderByWithAggregationInputSchema ]).optional(),
  by: VenueScalarFieldEnumSchema.array(),
  having: VenueScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VenueFindUniqueArgsSchema: z.ZodType<Prisma.VenueFindUniqueArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereUniqueInputSchema,
}).strict()

export const VenueFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VenueFindUniqueOrThrowArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereUniqueInputSchema,
}).strict()

export const eventCommentFindFirstArgsSchema: z.ZodType<Prisma.eventCommentFindFirstArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  where: eventCommentWhereInputSchema.optional(),
  orderBy: z.union([ eventCommentOrderByWithRelationInputSchema.array(),eventCommentOrderByWithRelationInputSchema ]).optional(),
  cursor: eventCommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventCommentScalarFieldEnumSchema,EventCommentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const eventCommentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.eventCommentFindFirstOrThrowArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  where: eventCommentWhereInputSchema.optional(),
  orderBy: z.union([ eventCommentOrderByWithRelationInputSchema.array(),eventCommentOrderByWithRelationInputSchema ]).optional(),
  cursor: eventCommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventCommentScalarFieldEnumSchema,EventCommentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const eventCommentFindManyArgsSchema: z.ZodType<Prisma.eventCommentFindManyArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  where: eventCommentWhereInputSchema.optional(),
  orderBy: z.union([ eventCommentOrderByWithRelationInputSchema.array(),eventCommentOrderByWithRelationInputSchema ]).optional(),
  cursor: eventCommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventCommentScalarFieldEnumSchema,EventCommentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const eventCommentAggregateArgsSchema: z.ZodType<Prisma.eventCommentAggregateArgs> = z.object({
  where: eventCommentWhereInputSchema.optional(),
  orderBy: z.union([ eventCommentOrderByWithRelationInputSchema.array(),eventCommentOrderByWithRelationInputSchema ]).optional(),
  cursor: eventCommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const eventCommentGroupByArgsSchema: z.ZodType<Prisma.eventCommentGroupByArgs> = z.object({
  where: eventCommentWhereInputSchema.optional(),
  orderBy: z.union([ eventCommentOrderByWithAggregationInputSchema.array(),eventCommentOrderByWithAggregationInputSchema ]).optional(),
  by: EventCommentScalarFieldEnumSchema.array(),
  having: eventCommentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const eventCommentFindUniqueArgsSchema: z.ZodType<Prisma.eventCommentFindUniqueArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  where: eventCommentWhereUniqueInputSchema,
}).strict()

export const eventCommentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.eventCommentFindUniqueOrThrowArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  where: eventCommentWhereUniqueInputSchema,
}).strict()

export const followFindFirstArgsSchema: z.ZodType<Prisma.followFindFirstArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  where: followWhereInputSchema.optional(),
  orderBy: z.union([ followOrderByWithRelationInputSchema.array(),followOrderByWithRelationInputSchema ]).optional(),
  cursor: followWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FollowScalarFieldEnumSchema,FollowScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const followFindFirstOrThrowArgsSchema: z.ZodType<Prisma.followFindFirstOrThrowArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  where: followWhereInputSchema.optional(),
  orderBy: z.union([ followOrderByWithRelationInputSchema.array(),followOrderByWithRelationInputSchema ]).optional(),
  cursor: followWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FollowScalarFieldEnumSchema,FollowScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const followFindManyArgsSchema: z.ZodType<Prisma.followFindManyArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  where: followWhereInputSchema.optional(),
  orderBy: z.union([ followOrderByWithRelationInputSchema.array(),followOrderByWithRelationInputSchema ]).optional(),
  cursor: followWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FollowScalarFieldEnumSchema,FollowScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const followAggregateArgsSchema: z.ZodType<Prisma.followAggregateArgs> = z.object({
  where: followWhereInputSchema.optional(),
  orderBy: z.union([ followOrderByWithRelationInputSchema.array(),followOrderByWithRelationInputSchema ]).optional(),
  cursor: followWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const followGroupByArgsSchema: z.ZodType<Prisma.followGroupByArgs> = z.object({
  where: followWhereInputSchema.optional(),
  orderBy: z.union([ followOrderByWithAggregationInputSchema.array(),followOrderByWithAggregationInputSchema ]).optional(),
  by: FollowScalarFieldEnumSchema.array(),
  having: followScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const followFindUniqueArgsSchema: z.ZodType<Prisma.followFindUniqueArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  where: followWhereUniqueInputSchema,
}).strict()

export const followFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.followFindUniqueOrThrowArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  where: followWhereUniqueInputSchema,
}).strict()

export const likeFindFirstArgsSchema: z.ZodType<Prisma.likeFindFirstArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  where: likeWhereInputSchema.optional(),
  orderBy: z.union([ likeOrderByWithRelationInputSchema.array(),likeOrderByWithRelationInputSchema ]).optional(),
  cursor: likeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LikeScalarFieldEnumSchema,LikeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const likeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.likeFindFirstOrThrowArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  where: likeWhereInputSchema.optional(),
  orderBy: z.union([ likeOrderByWithRelationInputSchema.array(),likeOrderByWithRelationInputSchema ]).optional(),
  cursor: likeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LikeScalarFieldEnumSchema,LikeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const likeFindManyArgsSchema: z.ZodType<Prisma.likeFindManyArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  where: likeWhereInputSchema.optional(),
  orderBy: z.union([ likeOrderByWithRelationInputSchema.array(),likeOrderByWithRelationInputSchema ]).optional(),
  cursor: likeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LikeScalarFieldEnumSchema,LikeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const likeAggregateArgsSchema: z.ZodType<Prisma.likeAggregateArgs> = z.object({
  where: likeWhereInputSchema.optional(),
  orderBy: z.union([ likeOrderByWithRelationInputSchema.array(),likeOrderByWithRelationInputSchema ]).optional(),
  cursor: likeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const likeGroupByArgsSchema: z.ZodType<Prisma.likeGroupByArgs> = z.object({
  where: likeWhereInputSchema.optional(),
  orderBy: z.union([ likeOrderByWithAggregationInputSchema.array(),likeOrderByWithAggregationInputSchema ]).optional(),
  by: LikeScalarFieldEnumSchema.array(),
  having: likeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const likeFindUniqueArgsSchema: z.ZodType<Prisma.likeFindUniqueArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  where: likeWhereUniqueInputSchema,
}).strict()

export const likeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.likeFindUniqueOrThrowArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  where: likeWhereUniqueInputSchema,
}).strict()

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserSettingsFindFirstArgsSchema: z.ZodType<Prisma.UserSettingsFindFirstArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithRelationInputSchema.array(),UserSettingsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserSettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserSettingsScalarFieldEnumSchema,UserSettingsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserSettingsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserSettingsFindFirstOrThrowArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithRelationInputSchema.array(),UserSettingsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserSettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserSettingsScalarFieldEnumSchema,UserSettingsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserSettingsFindManyArgsSchema: z.ZodType<Prisma.UserSettingsFindManyArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithRelationInputSchema.array(),UserSettingsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserSettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserSettingsScalarFieldEnumSchema,UserSettingsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserSettingsAggregateArgsSchema: z.ZodType<Prisma.UserSettingsAggregateArgs> = z.object({
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithRelationInputSchema.array(),UserSettingsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserSettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserSettingsGroupByArgsSchema: z.ZodType<Prisma.UserSettingsGroupByArgs> = z.object({
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithAggregationInputSchema.array(),UserSettingsOrderByWithAggregationInputSchema ]).optional(),
  by: UserSettingsScalarFieldEnumSchema.array(),
  having: UserSettingsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserSettingsFindUniqueArgsSchema: z.ZodType<Prisma.UserSettingsFindUniqueArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereUniqueInputSchema,
}).strict()

export const UserSettingsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserSettingsFindUniqueOrThrowArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereUniqueInputSchema,
}).strict()

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const KeyFindFirstArgsSchema: z.ZodType<Prisma.KeyFindFirstArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const KeyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.KeyFindFirstOrThrowArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const KeyFindManyArgsSchema: z.ZodType<Prisma.KeyFindManyArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const KeyAggregateArgsSchema: z.ZodType<Prisma.KeyAggregateArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const KeyGroupByArgsSchema: z.ZodType<Prisma.KeyGroupByArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithAggregationInputSchema.array(),KeyOrderByWithAggregationInputSchema ]).optional(),
  by: KeyScalarFieldEnumSchema.array(),
  having: KeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const KeyFindUniqueArgsSchema: z.ZodType<Prisma.KeyFindUniqueArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict()

export const KeyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.KeyFindUniqueOrThrowArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict()

export const VerificationTokenFindFirstArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenFindManyArgsSchema: z.ZodType<Prisma.VerificationTokenFindManyArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenAggregateArgsSchema: z.ZodType<Prisma.VerificationTokenAggregateArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VerificationTokenGroupByArgsSchema: z.ZodType<Prisma.VerificationTokenGroupByArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithAggregationInputSchema.array(),VerificationTokenOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationTokenScalarFieldEnumSchema.array(),
  having: VerificationTokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VerificationTokenFindUniqueArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const SeriesCreateArgsSchema: z.ZodType<Prisma.SeriesCreateArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  data: z.union([ SeriesCreateInputSchema,SeriesUncheckedCreateInputSchema ]),
}).strict()

export const SeriesUpsertArgsSchema: z.ZodType<Prisma.SeriesUpsertArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereUniqueInputSchema,
  create: z.union([ SeriesCreateInputSchema,SeriesUncheckedCreateInputSchema ]),
  update: z.union([ SeriesUpdateInputSchema,SeriesUncheckedUpdateInputSchema ]),
}).strict()

export const SeriesCreateManyArgsSchema: z.ZodType<Prisma.SeriesCreateManyArgs> = z.object({
  data: z.union([ SeriesCreateManyInputSchema,SeriesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const SeriesDeleteArgsSchema: z.ZodType<Prisma.SeriesDeleteArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereUniqueInputSchema,
}).strict()

export const SeriesUpdateArgsSchema: z.ZodType<Prisma.SeriesUpdateArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  data: z.union([ SeriesUpdateInputSchema,SeriesUncheckedUpdateInputSchema ]),
  where: SeriesWhereUniqueInputSchema,
}).strict()

export const SeriesUpdateManyArgsSchema: z.ZodType<Prisma.SeriesUpdateManyArgs> = z.object({
  data: z.union([ SeriesUpdateManyMutationInputSchema,SeriesUncheckedUpdateManyInputSchema ]),
  where: SeriesWhereInputSchema.optional(),
}).strict()

export const SeriesDeleteManyArgsSchema: z.ZodType<Prisma.SeriesDeleteManyArgs> = z.object({
  where: SeriesWhereInputSchema.optional(),
}).strict()

export const EventCreateArgsSchema: z.ZodType<Prisma.EventCreateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
}).strict()

export const EventUpsertArgsSchema: z.ZodType<Prisma.EventUpsertArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
  create: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
  update: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
}).strict()

export const EventCreateManyArgsSchema: z.ZodType<Prisma.EventCreateManyArgs> = z.object({
  data: z.union([ EventCreateManyInputSchema,EventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const EventDeleteArgsSchema: z.ZodType<Prisma.EventDeleteArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict()

export const EventUpdateArgsSchema: z.ZodType<Prisma.EventUpdateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
  where: EventWhereUniqueInputSchema,
}).strict()

export const EventUpdateManyArgsSchema: z.ZodType<Prisma.EventUpdateManyArgs> = z.object({
  data: z.union([ EventUpdateManyMutationInputSchema,EventUncheckedUpdateManyInputSchema ]),
  where: EventWhereInputSchema.optional(),
}).strict()

export const EventDeleteManyArgsSchema: z.ZodType<Prisma.EventDeleteManyArgs> = z.object({
  where: EventWhereInputSchema.optional(),
}).strict()

export const RaceCreateArgsSchema: z.ZodType<Prisma.RaceCreateArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  data: z.union([ RaceCreateInputSchema,RaceUncheckedCreateInputSchema ]),
}).strict()

export const RaceUpsertArgsSchema: z.ZodType<Prisma.RaceUpsertArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
  create: z.union([ RaceCreateInputSchema,RaceUncheckedCreateInputSchema ]),
  update: z.union([ RaceUpdateInputSchema,RaceUncheckedUpdateInputSchema ]),
}).strict()

export const RaceCreateManyArgsSchema: z.ZodType<Prisma.RaceCreateManyArgs> = z.object({
  data: z.union([ RaceCreateManyInputSchema,RaceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const RaceDeleteArgsSchema: z.ZodType<Prisma.RaceDeleteArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict()

export const RaceUpdateArgsSchema: z.ZodType<Prisma.RaceUpdateArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  data: z.union([ RaceUpdateInputSchema,RaceUncheckedUpdateInputSchema ]),
  where: RaceWhereUniqueInputSchema,
}).strict()

export const RaceUpdateManyArgsSchema: z.ZodType<Prisma.RaceUpdateManyArgs> = z.object({
  data: z.union([ RaceUpdateManyMutationInputSchema,RaceUncheckedUpdateManyInputSchema ]),
  where: RaceWhereInputSchema.optional(),
}).strict()

export const RaceDeleteManyArgsSchema: z.ZodType<Prisma.RaceDeleteManyArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
}).strict()

export const CompCreateArgsSchema: z.ZodType<Prisma.CompCreateArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  data: z.union([ CompCreateInputSchema,CompUncheckedCreateInputSchema ]),
}).strict()

export const CompUpsertArgsSchema: z.ZodType<Prisma.CompUpsertArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereUniqueInputSchema,
  create: z.union([ CompCreateInputSchema,CompUncheckedCreateInputSchema ]),
  update: z.union([ CompUpdateInputSchema,CompUncheckedUpdateInputSchema ]),
}).strict()

export const CompCreateManyArgsSchema: z.ZodType<Prisma.CompCreateManyArgs> = z.object({
  data: z.union([ CompCreateManyInputSchema,CompCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const CompDeleteArgsSchema: z.ZodType<Prisma.CompDeleteArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereUniqueInputSchema,
}).strict()

export const CompUpdateArgsSchema: z.ZodType<Prisma.CompUpdateArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  data: z.union([ CompUpdateInputSchema,CompUncheckedUpdateInputSchema ]),
  where: CompWhereUniqueInputSchema,
}).strict()

export const CompUpdateManyArgsSchema: z.ZodType<Prisma.CompUpdateManyArgs> = z.object({
  data: z.union([ CompUpdateManyMutationInputSchema,CompUncheckedUpdateManyInputSchema ]),
  where: CompWhereInputSchema.optional(),
}).strict()

export const CompDeleteManyArgsSchema: z.ZodType<Prisma.CompDeleteManyArgs> = z.object({
  where: CompWhereInputSchema.optional(),
}).strict()

export const ResultCreateArgsSchema: z.ZodType<Prisma.ResultCreateArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  data: z.union([ ResultCreateInputSchema,ResultUncheckedCreateInputSchema ]),
}).strict()

export const ResultUpsertArgsSchema: z.ZodType<Prisma.ResultUpsertArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereUniqueInputSchema,
  create: z.union([ ResultCreateInputSchema,ResultUncheckedCreateInputSchema ]),
  update: z.union([ ResultUpdateInputSchema,ResultUncheckedUpdateInputSchema ]),
}).strict()

export const ResultCreateManyArgsSchema: z.ZodType<Prisma.ResultCreateManyArgs> = z.object({
  data: z.union([ ResultCreateManyInputSchema,ResultCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ResultDeleteArgsSchema: z.ZodType<Prisma.ResultDeleteArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereUniqueInputSchema,
}).strict()

export const ResultUpdateArgsSchema: z.ZodType<Prisma.ResultUpdateArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  data: z.union([ ResultUpdateInputSchema,ResultUncheckedUpdateInputSchema ]),
  where: ResultWhereUniqueInputSchema,
}).strict()

export const ResultUpdateManyArgsSchema: z.ZodType<Prisma.ResultUpdateManyArgs> = z.object({
  data: z.union([ ResultUpdateManyMutationInputSchema,ResultUncheckedUpdateManyInputSchema ]),
  where: ResultWhereInputSchema.optional(),
}).strict()

export const ResultDeleteManyArgsSchema: z.ZodType<Prisma.ResultDeleteManyArgs> = z.object({
  where: ResultWhereInputSchema.optional(),
}).strict()

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict()

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict()

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
}).strict()

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
}).strict()

export const VenueCreateArgsSchema: z.ZodType<Prisma.VenueCreateArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  data: z.union([ VenueCreateInputSchema,VenueUncheckedCreateInputSchema ]),
}).strict()

export const VenueUpsertArgsSchema: z.ZodType<Prisma.VenueUpsertArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereUniqueInputSchema,
  create: z.union([ VenueCreateInputSchema,VenueUncheckedCreateInputSchema ]),
  update: z.union([ VenueUpdateInputSchema,VenueUncheckedUpdateInputSchema ]),
}).strict()

export const VenueCreateManyArgsSchema: z.ZodType<Prisma.VenueCreateManyArgs> = z.object({
  data: z.union([ VenueCreateManyInputSchema,VenueCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const VenueDeleteArgsSchema: z.ZodType<Prisma.VenueDeleteArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereUniqueInputSchema,
}).strict()

export const VenueUpdateArgsSchema: z.ZodType<Prisma.VenueUpdateArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  data: z.union([ VenueUpdateInputSchema,VenueUncheckedUpdateInputSchema ]),
  where: VenueWhereUniqueInputSchema,
}).strict()

export const VenueUpdateManyArgsSchema: z.ZodType<Prisma.VenueUpdateManyArgs> = z.object({
  data: z.union([ VenueUpdateManyMutationInputSchema,VenueUncheckedUpdateManyInputSchema ]),
  where: VenueWhereInputSchema.optional(),
}).strict()

export const VenueDeleteManyArgsSchema: z.ZodType<Prisma.VenueDeleteManyArgs> = z.object({
  where: VenueWhereInputSchema.optional(),
}).strict()

export const eventCommentCreateArgsSchema: z.ZodType<Prisma.eventCommentCreateArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  data: z.union([ eventCommentCreateInputSchema,eventCommentUncheckedCreateInputSchema ]),
}).strict()

export const eventCommentUpsertArgsSchema: z.ZodType<Prisma.eventCommentUpsertArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  where: eventCommentWhereUniqueInputSchema,
  create: z.union([ eventCommentCreateInputSchema,eventCommentUncheckedCreateInputSchema ]),
  update: z.union([ eventCommentUpdateInputSchema,eventCommentUncheckedUpdateInputSchema ]),
}).strict()

export const eventCommentCreateManyArgsSchema: z.ZodType<Prisma.eventCommentCreateManyArgs> = z.object({
  data: z.union([ eventCommentCreateManyInputSchema,eventCommentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const eventCommentDeleteArgsSchema: z.ZodType<Prisma.eventCommentDeleteArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  where: eventCommentWhereUniqueInputSchema,
}).strict()

export const eventCommentUpdateArgsSchema: z.ZodType<Prisma.eventCommentUpdateArgs> = z.object({
  select: eventCommentSelectSchema.optional(),
  include: eventCommentIncludeSchema.optional(),
  data: z.union([ eventCommentUpdateInputSchema,eventCommentUncheckedUpdateInputSchema ]),
  where: eventCommentWhereUniqueInputSchema,
}).strict()

export const eventCommentUpdateManyArgsSchema: z.ZodType<Prisma.eventCommentUpdateManyArgs> = z.object({
  data: z.union([ eventCommentUpdateManyMutationInputSchema,eventCommentUncheckedUpdateManyInputSchema ]),
  where: eventCommentWhereInputSchema.optional(),
}).strict()

export const eventCommentDeleteManyArgsSchema: z.ZodType<Prisma.eventCommentDeleteManyArgs> = z.object({
  where: eventCommentWhereInputSchema.optional(),
}).strict()

export const followCreateArgsSchema: z.ZodType<Prisma.followCreateArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  data: z.union([ followCreateInputSchema,followUncheckedCreateInputSchema ]),
}).strict()

export const followUpsertArgsSchema: z.ZodType<Prisma.followUpsertArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  where: followWhereUniqueInputSchema,
  create: z.union([ followCreateInputSchema,followUncheckedCreateInputSchema ]),
  update: z.union([ followUpdateInputSchema,followUncheckedUpdateInputSchema ]),
}).strict()

export const followCreateManyArgsSchema: z.ZodType<Prisma.followCreateManyArgs> = z.object({
  data: z.union([ followCreateManyInputSchema,followCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const followDeleteArgsSchema: z.ZodType<Prisma.followDeleteArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  where: followWhereUniqueInputSchema,
}).strict()

export const followUpdateArgsSchema: z.ZodType<Prisma.followUpdateArgs> = z.object({
  select: followSelectSchema.optional(),
  include: followIncludeSchema.optional(),
  data: z.union([ followUpdateInputSchema,followUncheckedUpdateInputSchema ]),
  where: followWhereUniqueInputSchema,
}).strict()

export const followUpdateManyArgsSchema: z.ZodType<Prisma.followUpdateManyArgs> = z.object({
  data: z.union([ followUpdateManyMutationInputSchema,followUncheckedUpdateManyInputSchema ]),
  where: followWhereInputSchema.optional(),
}).strict()

export const followDeleteManyArgsSchema: z.ZodType<Prisma.followDeleteManyArgs> = z.object({
  where: followWhereInputSchema.optional(),
}).strict()

export const likeCreateArgsSchema: z.ZodType<Prisma.likeCreateArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  data: z.union([ likeCreateInputSchema,likeUncheckedCreateInputSchema ]),
}).strict()

export const likeUpsertArgsSchema: z.ZodType<Prisma.likeUpsertArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  where: likeWhereUniqueInputSchema,
  create: z.union([ likeCreateInputSchema,likeUncheckedCreateInputSchema ]),
  update: z.union([ likeUpdateInputSchema,likeUncheckedUpdateInputSchema ]),
}).strict()

export const likeCreateManyArgsSchema: z.ZodType<Prisma.likeCreateManyArgs> = z.object({
  data: z.union([ likeCreateManyInputSchema,likeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const likeDeleteArgsSchema: z.ZodType<Prisma.likeDeleteArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  where: likeWhereUniqueInputSchema,
}).strict()

export const likeUpdateArgsSchema: z.ZodType<Prisma.likeUpdateArgs> = z.object({
  select: likeSelectSchema.optional(),
  include: likeIncludeSchema.optional(),
  data: z.union([ likeUpdateInputSchema,likeUncheckedUpdateInputSchema ]),
  where: likeWhereUniqueInputSchema,
}).strict()

export const likeUpdateManyArgsSchema: z.ZodType<Prisma.likeUpdateManyArgs> = z.object({
  data: z.union([ likeUpdateManyMutationInputSchema,likeUncheckedUpdateManyInputSchema ]),
  where: likeWhereInputSchema.optional(),
}).strict()

export const likeDeleteManyArgsSchema: z.ZodType<Prisma.likeDeleteManyArgs> = z.object({
  where: likeWhereInputSchema.optional(),
}).strict()

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict()

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict()

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict()

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict()

export const UserSettingsCreateArgsSchema: z.ZodType<Prisma.UserSettingsCreateArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  data: z.union([ UserSettingsCreateInputSchema,UserSettingsUncheckedCreateInputSchema ]).optional(),
}).strict()

export const UserSettingsUpsertArgsSchema: z.ZodType<Prisma.UserSettingsUpsertArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereUniqueInputSchema,
  create: z.union([ UserSettingsCreateInputSchema,UserSettingsUncheckedCreateInputSchema ]),
  update: z.union([ UserSettingsUpdateInputSchema,UserSettingsUncheckedUpdateInputSchema ]),
}).strict()

export const UserSettingsCreateManyArgsSchema: z.ZodType<Prisma.UserSettingsCreateManyArgs> = z.object({
  data: z.union([ UserSettingsCreateManyInputSchema,UserSettingsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const UserSettingsDeleteArgsSchema: z.ZodType<Prisma.UserSettingsDeleteArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereUniqueInputSchema,
}).strict()

export const UserSettingsUpdateArgsSchema: z.ZodType<Prisma.UserSettingsUpdateArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  data: z.union([ UserSettingsUpdateInputSchema,UserSettingsUncheckedUpdateInputSchema ]),
  where: UserSettingsWhereUniqueInputSchema,
}).strict()

export const UserSettingsUpdateManyArgsSchema: z.ZodType<Prisma.UserSettingsUpdateManyArgs> = z.object({
  data: z.union([ UserSettingsUpdateManyMutationInputSchema,UserSettingsUncheckedUpdateManyInputSchema ]),
  where: UserSettingsWhereInputSchema.optional(),
}).strict()

export const UserSettingsDeleteManyArgsSchema: z.ZodType<Prisma.UserSettingsDeleteManyArgs> = z.object({
  where: UserSettingsWhereInputSchema.optional(),
}).strict()

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict()

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict()

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
}).strict()

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
}).strict()

export const KeyCreateArgsSchema: z.ZodType<Prisma.KeyCreateArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  data: z.union([ KeyCreateInputSchema,KeyUncheckedCreateInputSchema ]),
}).strict()

export const KeyUpsertArgsSchema: z.ZodType<Prisma.KeyUpsertArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
  create: z.union([ KeyCreateInputSchema,KeyUncheckedCreateInputSchema ]),
  update: z.union([ KeyUpdateInputSchema,KeyUncheckedUpdateInputSchema ]),
}).strict()

export const KeyCreateManyArgsSchema: z.ZodType<Prisma.KeyCreateManyArgs> = z.object({
  data: z.union([ KeyCreateManyInputSchema,KeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const KeyDeleteArgsSchema: z.ZodType<Prisma.KeyDeleteArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict()

export const KeyUpdateArgsSchema: z.ZodType<Prisma.KeyUpdateArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  data: z.union([ KeyUpdateInputSchema,KeyUncheckedUpdateInputSchema ]),
  where: KeyWhereUniqueInputSchema,
}).strict()

export const KeyUpdateManyArgsSchema: z.ZodType<Prisma.KeyUpdateManyArgs> = z.object({
  data: z.union([ KeyUpdateManyMutationInputSchema,KeyUncheckedUpdateManyInputSchema ]),
  where: KeyWhereInputSchema.optional(),
}).strict()

export const KeyDeleteManyArgsSchema: z.ZodType<Prisma.KeyDeleteManyArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
}).strict()

export const VerificationTokenCreateArgsSchema: z.ZodType<Prisma.VerificationTokenCreateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
}).strict()

export const VerificationTokenUpsertArgsSchema: z.ZodType<Prisma.VerificationTokenUpsertArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  create: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
  update: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
}).strict()

export const VerificationTokenCreateManyArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyArgs> = z.object({
  data: z.union([ VerificationTokenCreateManyInputSchema,VerificationTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const VerificationTokenDeleteArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenUpdateArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenUpdateManyArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateManyArgs> = z.object({
  data: z.union([ VerificationTokenUpdateManyMutationInputSchema,VerificationTokenUncheckedUpdateManyInputSchema ]),
  where: VerificationTokenWhereInputSchema.optional(),
}).strict()

export const VerificationTokenDeleteManyArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteManyArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
}).strict()