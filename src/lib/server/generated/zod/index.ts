import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValue: z.ZodType<Prisma.JsonValue> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(JsonValue)),
  z.lazy(() => z.record(JsonValue)),
]);

export type JsonValueType = z.infer<typeof JsonValue>;

export const NullableJsonValue = z
  .union([JsonValue, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValue: z.ZodType<Prisma.InputJsonValue> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(InputJsonValue.nullable())),
  z.lazy(() => z.record(InputJsonValue.nullable())),
]);

export type InputJsonValueType = z.infer<typeof InputJsonValue>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const SeriesScalarFieldEnumSchema = z.enum(['id','name','description','rest','organizationId','publisherId','createdAt','updatedAt']);

export const EventScalarFieldEnumSchema = z.enum(['id','eventeid','uniqueIdString','name','eventwebsite','venueName','description','titleImage','public','fileInfo','resultColumns','rest','email','organizationId','publisherId','seriesId','venueId','createdAt','updatedAt']);

export const RaceScalarFieldEnumSchema = z.enum(['id','raceId','uniqueRaceString','name','starts','rank','date','time','notes','sailed','rating','resultColumns','rest','eventId','publisherId','createdAt','updatedAt']);

export const CompScalarFieldEnumSchema = z.enum(['id','compId','uniqueCompId','raceId','club','boat','skipper','sailno','fleet','division','rating','rank','nett','total','rest','image','publisherId','createdAt','updatedAt']);

export const ResultScalarFieldEnumSchema = z.enum(['id','resultId','points','position','discard','resultType','code','start','finish','corrected','elasped','elapsedWin','ratingWin','raceRating','supposedRating','rrset','publisherId','eventId','compId','raceId','createdAt','updatedAt']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','description','tag','website','email','logo','titleImage','ownerId','createdAt','updatedAt']);

export const VenueScalarFieldEnumSchema = z.enum(['id','name','description','website','email','phone','burgee','titleImage','publisherId','createdAt','updatedAt']);

export const AddressScalarFieldEnumSchema = z.enum(['id','name','street','city','state','country','code','venueId','organizationId','publisherId']);

export const CommentScalarFieldEnumSchema = z.enum(['id','type','ref','comment','eventId','userId','raceId','seriesId','organizationId','venueId','compId','createdAt','updatedAt']);

export const FollowScalarFieldEnumSchema = z.enum(['id','userId','type','seriesId','eventId','organizationId','raceId','compId','updatedAt','createdAt']);

export const LikeScalarFieldEnumSchema = z.enum(['id','userId','type','itemId','seriesId','eventId','organizationId','raceId','compId','updatedAt','createdAt','eventCommentId','commentId','venueId']);

export const UserScalarFieldEnumSchema = z.enum(['id','username','firstname','lastname','email','email_verified','name','avatar']);

export const UserSettingsScalarFieldEnumSchema = z.enum(['id','theme','language','userId']);

export const SessionScalarFieldEnumSchema = z.enum(['id','user_id','active_expires','idle_expires']);

export const KeyScalarFieldEnumSchema = z.enum(['id','hashed_password','user_id']);

export const VerificationTokenScalarFieldEnumSchema = z.enum(['id','user_id','expires']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((v) => transformJsonNull(v));

export const QueryModeSchema = z.enum(['default','insensitive']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]);

export const NullsOrderSchema = z.enum(['first','last']);
/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// SERIES SCHEMA
/////////////////////////////////////////

export const SeriesSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  /**
   * .optional
   */
  description: z.string().nullish(),
  rest: NullableJsonValue.optional(),
  organizationId: z.string().nullish(),
  publisherId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Series = z.infer<typeof SeriesSchema>

/////////////////////////////////////////
// EVENT SCHEMA
/////////////////////////////////////////

export const EventSchema = z.object({
  id: z.string().cuid(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().nullish(),
  venueName: z.string().nullish(),
  description: z.string().nullish(),
  titleImage: z.string().nullish(),
  public: z.boolean(),
  /**
   * [fileInfo]
   */
  fileInfo: NullableJsonValue.optional(),
  /**
   * [resultColumns]
   */
  resultColumns: NullableJsonValue.optional(),
  /**
   * [eventRest]
   */
  rest: NullableJsonValue.optional(),
  email: z.string().nullish(),
  organizationId: z.string().nullish(),
  publisherId: z.string().nullish(),
  seriesId: z.string().nullish(),
  venueId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Event = z.infer<typeof EventSchema>

/////////////////////////////////////////
// RACE SCHEMA
/////////////////////////////////////////

export const RaceSchema = z.object({
  id: z.string().cuid(),
  raceId: z.string().nullish(),
  uniqueRaceString: z.string(),
  name: z.string().nullish(),
  starts: NullableJsonValue.optional(),
  rank: z.string().nullish(),
  date: z.string().nullish(),
  time: z.string().nullish(),
  notes: z.string().nullish(),
  sailed: z.string().nullish(),
  rating: z.string().nullish(),
  resultColumns: NullableJsonValue.optional(),
  /**
   * [raceRest]
   */
  rest: NullableJsonValue.optional(),
  eventId: z.string().nullish(),
  publisherId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Race = z.infer<typeof RaceSchema>

/////////////////////////////////////////
// COMP SCHEMA
/////////////////////////////////////////

export const CompSchema = z.object({
  id: z.string().cuid(),
  compId: z.string(),
  uniqueCompId: z.string().nullish(),
  raceId: z.string().nullish(),
  club: z.string().nullish(),
  boat: z.string().nullish(),
  skipper: z.string().nullish(),
  sailno: z.string().nullish(),
  fleet: z.string().nullish(),
  division: z.string().nullish(),
  rating: z.string().nullish(),
  rank: z.string().nullish(),
  nett: z.string().nullish(),
  total: z.string().nullish(),
  /**
   * [compRest]
   */
  rest: NullableJsonValue.optional(),
  image: z.string().nullish(),
  publisherId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Comp = z.infer<typeof CompSchema>

/////////////////////////////////////////
// RESULT SCHEMA
/////////////////////////////////////////

export const ResultSchema = z.object({
  id: z.string().cuid(),
  resultId: z.string(),
  points: z.string().nullish(),
  position: z.string().nullish(),
  discard: z.string().nullish(),
  resultType: z.string().nullish(),
  code: z.string().nullish(),
  start: z.string().nullish(),
  finish: z.string().nullish(),
  corrected: z.string().nullish(),
  elasped: z.string().nullish(),
  elapsedWin: z.string().nullish(),
  ratingWin: z.string().nullish(),
  raceRating: z.string().nullish(),
  supposedRating: z.string().nullish(),
  rrset: z.string().nullish(),
  publisherId: z.string(),
  eventId: z.string().nullish(),
  compId: z.string().nullish(),
  raceId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Result = z.infer<typeof ResultSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullish(),
  tag: z.string().nullish(),
  website: z.string().nullish(),
  email: z.string().nullish(),
  /**
   * .url
   */
  logo: z.string().nullish(),
  titleImage: z.string().nullish(),
  ownerId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// VENUE SCHEMA
/////////////////////////////////////////

export const VenueSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullish(),
  website: z.string().nullish(),
  email: z.string().nullish(),
  phone: z.string().nullish(),
  burgee: z.string().nullish(),
  titleImage: z.string().nullish(),
  publisherId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Venue = z.infer<typeof VenueSchema>

/////////////////////////////////////////
// ADDRESS SCHEMA
/////////////////////////////////////////

export const AddressSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  street: z.string().nullish(),
  city: z.string().nullish(),
  state: z.string().nullish(),
  country: z.string().nullish(),
  code: z.string().nullish(),
  venueId: z.string().nullish(),
  organizationId: z.string().nullish(),
  publisherId: z.string().nullish(),
})

export type Address = z.infer<typeof AddressSchema>

/////////////////////////////////////////
// COMMENT SCHEMA
/////////////////////////////////////////

export const CommentSchema = z.object({
  id: z.string().cuid(),
  type: z.string().nullish(),
  ref: z.string().nullish(),
  comment: z.string(),
  eventId: z.string().nullish(),
  userId: z.string(),
  raceId: z.string().nullish(),
  seriesId: z.string().nullish(),
  organizationId: z.string().nullish(),
  venueId: z.string().nullish(),
  compId: z.string().nullish(),
  createdAt: z.coerce.date().nullish(),
  updatedAt: z.coerce.date().nullish(),
})

export type Comment = z.infer<typeof CommentSchema>

/////////////////////////////////////////
// FOLLOW SCHEMA
/////////////////////////////////////////

export const FollowSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().nullish(),
  eventId: z.string().nullish(),
  organizationId: z.string().nullish(),
  raceId: z.string().nullish(),
  compId: z.string().nullish(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
})

export type Follow = z.infer<typeof FollowSchema>

/////////////////////////////////////////
// LIKE SCHEMA
/////////////////////////////////////////

export const LikeSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().nullish(),
  seriesId: z.string().nullish(),
  eventId: z.string().nullish(),
  organizationId: z.string().nullish(),
  raceId: z.string().nullish(),
  compId: z.string().nullish(),
  updatedAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  eventCommentId: z.string().nullish(),
  commentId: z.string().nullish(),
  venueId: z.string().nullish(),
})

export type Like = z.infer<typeof LikeSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().nullish(),
  lastname: z.string().nullish(),
  email: z.string().nullish(),
  email_verified: z.number().int().nullish(),
  name: z.string().nullish(),
  avatar: z.string().nullish(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// USER SETTINGS SCHEMA
/////////////////////////////////////////

export const UserSettingsSchema = z.object({
  id: z.string().cuid(),
  theme: z.string().nullish(),
  language: z.string().nullish(),
  userId: z.string().nullish(),
})

export type UserSettings = z.infer<typeof UserSettingsSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// KEY SCHEMA
/////////////////////////////////////////

export const KeySchema = z.object({
  id: z.string(),
  hashed_password: z.string().nullish(),
  user_id: z.string(),
})

export type Key = z.infer<typeof KeySchema>

/////////////////////////////////////////
// VERIFICATION TOKEN SCHEMA
/////////////////////////////////////////

export const VerificationTokenSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  expires: z.bigint(),
})

export type VerificationToken = z.infer<typeof VerificationTokenSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// SERIES
//------------------------------------------------------

export const SeriesIncludeSchema: z.ZodType<Prisma.SeriesInclude> = z.object({
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Venues: z.union([z.boolean(),z.lazy(() => VenueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SeriesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SeriesArgsSchema: z.ZodType<Prisma.SeriesDefaultArgs> = z.object({
  select: z.lazy(() => SeriesSelectSchema).optional(),
  include: z.lazy(() => SeriesIncludeSchema).optional(),
}).strict();

export const SeriesCountOutputTypeArgsSchema: z.ZodType<Prisma.SeriesCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SeriesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SeriesCountOutputTypeSelectSchema: z.ZodType<Prisma.SeriesCountOutputTypeSelect> = z.object({
  Events: z.boolean().optional(),
  Follows: z.boolean().optional(),
  Likes: z.boolean().optional(),
  Comments: z.boolean().optional(),
  Venues: z.boolean().optional(),
}).strict();

export const SeriesSelectSchema: z.ZodType<Prisma.SeriesSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  rest: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Venues: z.union([z.boolean(),z.lazy(() => VenueFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SeriesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EVENT
//------------------------------------------------------

export const EventIncludeSchema: z.ZodType<Prisma.EventInclude> = z.object({
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
  Races: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comps: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EventArgsSchema: z.ZodType<Prisma.EventDefaultArgs> = z.object({
  select: z.lazy(() => EventSelectSchema).optional(),
  include: z.lazy(() => EventIncludeSchema).optional(),
}).strict();

export const EventCountOutputTypeArgsSchema: z.ZodType<Prisma.EventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EventCountOutputTypeSelectSchema: z.ZodType<Prisma.EventCountOutputTypeSelect> = z.object({
  Races: z.boolean().optional(),
  Results: z.boolean().optional(),
  Follows: z.boolean().optional(),
  Likes: z.boolean().optional(),
  Comps: z.boolean().optional(),
  Comments: z.boolean().optional(),
}).strict();

export const EventSelectSchema: z.ZodType<Prisma.EventSelect> = z.object({
  id: z.boolean().optional(),
  eventeid: z.boolean().optional(),
  uniqueIdString: z.boolean().optional(),
  name: z.boolean().optional(),
  eventwebsite: z.boolean().optional(),
  venueName: z.boolean().optional(),
  description: z.boolean().optional(),
  titleImage: z.boolean().optional(),
  public: z.boolean().optional(),
  fileInfo: z.boolean().optional(),
  resultColumns: z.boolean().optional(),
  rest: z.boolean().optional(),
  email: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  seriesId: z.boolean().optional(),
  venueId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
  Races: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comps: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RACE
//------------------------------------------------------

export const RaceIncludeSchema: z.ZodType<Prisma.RaceInclude> = z.object({
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comps: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RaceCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RaceArgsSchema: z.ZodType<Prisma.RaceDefaultArgs> = z.object({
  select: z.lazy(() => RaceSelectSchema).optional(),
  include: z.lazy(() => RaceIncludeSchema).optional(),
}).strict();

export const RaceCountOutputTypeArgsSchema: z.ZodType<Prisma.RaceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RaceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RaceCountOutputTypeSelectSchema: z.ZodType<Prisma.RaceCountOutputTypeSelect> = z.object({
  Results: z.boolean().optional(),
  Follows: z.boolean().optional(),
  Likes: z.boolean().optional(),
  Comps: z.boolean().optional(),
  Comments: z.boolean().optional(),
}).strict();

export const RaceSelectSchema: z.ZodType<Prisma.RaceSelect> = z.object({
  id: z.boolean().optional(),
  raceId: z.boolean().optional(),
  uniqueRaceString: z.boolean().optional(),
  name: z.boolean().optional(),
  starts: z.boolean().optional(),
  rank: z.boolean().optional(),
  date: z.boolean().optional(),
  time: z.boolean().optional(),
  notes: z.boolean().optional(),
  sailed: z.boolean().optional(),
  rating: z.boolean().optional(),
  resultColumns: z.boolean().optional(),
  rest: z.boolean().optional(),
  eventId: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comps: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RaceCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COMP
//------------------------------------------------------

export const CompIncludeSchema: z.ZodType<Prisma.CompInclude> = z.object({
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Commments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Races: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CompCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CompArgsSchema: z.ZodType<Prisma.CompDefaultArgs> = z.object({
  select: z.lazy(() => CompSelectSchema).optional(),
  include: z.lazy(() => CompIncludeSchema).optional(),
}).strict();

export const CompCountOutputTypeArgsSchema: z.ZodType<Prisma.CompCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CompCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CompCountOutputTypeSelectSchema: z.ZodType<Prisma.CompCountOutputTypeSelect> = z.object({
  Events: z.boolean().optional(),
  Results: z.boolean().optional(),
  Follows: z.boolean().optional(),
  Likes: z.boolean().optional(),
  Commments: z.boolean().optional(),
  Races: z.boolean().optional(),
}).strict();

export const CompSelectSchema: z.ZodType<Prisma.CompSelect> = z.object({
  id: z.boolean().optional(),
  compId: z.boolean().optional(),
  uniqueCompId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  club: z.boolean().optional(),
  boat: z.boolean().optional(),
  skipper: z.boolean().optional(),
  sailno: z.boolean().optional(),
  fleet: z.boolean().optional(),
  division: z.boolean().optional(),
  rating: z.boolean().optional(),
  rank: z.boolean().optional(),
  nett: z.boolean().optional(),
  total: z.boolean().optional(),
  rest: z.boolean().optional(),
  image: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Results: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Commments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Races: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CompCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RESULT
//------------------------------------------------------

export const ResultIncludeSchema: z.ZodType<Prisma.ResultInclude> = z.object({
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
}).strict()

export const ResultArgsSchema: z.ZodType<Prisma.ResultDefaultArgs> = z.object({
  select: z.lazy(() => ResultSelectSchema).optional(),
  include: z.lazy(() => ResultIncludeSchema).optional(),
}).strict();

export const ResultSelectSchema: z.ZodType<Prisma.ResultSelect> = z.object({
  id: z.boolean().optional(),
  resultId: z.boolean().optional(),
  points: z.boolean().optional(),
  position: z.boolean().optional(),
  discard: z.boolean().optional(),
  resultType: z.boolean().optional(),
  code: z.boolean().optional(),
  start: z.boolean().optional(),
  finish: z.boolean().optional(),
  corrected: z.boolean().optional(),
  elasped: z.boolean().optional(),
  elapsedWin: z.boolean().optional(),
  ratingWin: z.boolean().optional(),
  raceRating: z.boolean().optional(),
  supposedRating: z.boolean().optional(),
  rrset: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  compId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  Owner: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Addresses: z.union([z.boolean(),z.lazy(() => AddressFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  Events: z.boolean().optional(),
  Series: z.boolean().optional(),
  Follows: z.boolean().optional(),
  Likes: z.boolean().optional(),
  Comments: z.boolean().optional(),
  Addresses: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  tag: z.boolean().optional(),
  website: z.boolean().optional(),
  email: z.boolean().optional(),
  logo: z.boolean().optional(),
  titleImage: z.boolean().optional(),
  ownerId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Owner: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  Follows: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Addresses: z.union([z.boolean(),z.lazy(() => AddressFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// VENUE
//------------------------------------------------------

export const VenueIncludeSchema: z.ZodType<Prisma.VenueInclude> = z.object({
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Addresses: z.union([z.boolean(),z.lazy(() => AddressFindManyArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => VenueCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const VenueArgsSchema: z.ZodType<Prisma.VenueDefaultArgs> = z.object({
  select: z.lazy(() => VenueSelectSchema).optional(),
  include: z.lazy(() => VenueIncludeSchema).optional(),
}).strict();

export const VenueCountOutputTypeArgsSchema: z.ZodType<Prisma.VenueCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => VenueCountOutputTypeSelectSchema).nullish(),
}).strict();

export const VenueCountOutputTypeSelectSchema: z.ZodType<Prisma.VenueCountOutputTypeSelect> = z.object({
  Events: z.boolean().optional(),
  Series: z.boolean().optional(),
  Likes: z.boolean().optional(),
  Comments: z.boolean().optional(),
  Addresses: z.boolean().optional(),
}).strict();

export const VenueSelectSchema: z.ZodType<Prisma.VenueSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  website: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  burgee: z.boolean().optional(),
  titleImage: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Events: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Addresses: z.union([z.boolean(),z.lazy(() => AddressFindManyArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => VenueCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ADDRESS
//------------------------------------------------------

export const AddressIncludeSchema: z.ZodType<Prisma.AddressInclude> = z.object({
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AddressArgsSchema: z.ZodType<Prisma.AddressDefaultArgs> = z.object({
  select: z.lazy(() => AddressSelectSchema).optional(),
  include: z.lazy(() => AddressIncludeSchema).optional(),
}).strict();

export const AddressSelectSchema: z.ZodType<Prisma.AddressSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  street: z.boolean().optional(),
  city: z.boolean().optional(),
  state: z.boolean().optional(),
  country: z.boolean().optional(),
  code: z.boolean().optional(),
  venueId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  publisherId: z.boolean().optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Publisher: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// COMMENT
//------------------------------------------------------

export const CommentIncludeSchema: z.ZodType<Prisma.CommentInclude> = z.object({
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CommentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CommentArgsSchema: z.ZodType<Prisma.CommentDefaultArgs> = z.object({
  select: z.lazy(() => CommentSelectSchema).optional(),
  include: z.lazy(() => CommentIncludeSchema).optional(),
}).strict();

export const CommentCountOutputTypeArgsSchema: z.ZodType<Prisma.CommentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CommentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CommentCountOutputTypeSelectSchema: z.ZodType<Prisma.CommentCountOutputTypeSelect> = z.object({
  Likes: z.boolean().optional(),
}).strict();

export const CommentSelectSchema: z.ZodType<Prisma.CommentSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  ref: z.boolean().optional(),
  comment: z.boolean().optional(),
  eventId: z.boolean().optional(),
  userId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  seriesId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  venueId: z.boolean().optional(),
  compId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Likes: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CommentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FOLLOW
//------------------------------------------------------

export const FollowIncludeSchema: z.ZodType<Prisma.FollowInclude> = z.object({
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const FollowArgsSchema: z.ZodType<Prisma.FollowDefaultArgs> = z.object({
  select: z.lazy(() => FollowSelectSchema).optional(),
  include: z.lazy(() => FollowIncludeSchema).optional(),
}).strict();

export const FollowSelectSchema: z.ZodType<Prisma.FollowSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  seriesId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  compId: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// LIKE
//------------------------------------------------------

export const LikeIncludeSchema: z.ZodType<Prisma.LikeInclude> = z.object({
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Comment: z.union([z.boolean(),z.lazy(() => CommentArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
}).strict()

export const LikeArgsSchema: z.ZodType<Prisma.LikeDefaultArgs> = z.object({
  select: z.lazy(() => LikeSelectSchema).optional(),
  include: z.lazy(() => LikeIncludeSchema).optional(),
}).strict();

export const LikeSelectSchema: z.ZodType<Prisma.LikeSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  itemId: z.boolean().optional(),
  seriesId: z.boolean().optional(),
  eventId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  raceId: z.boolean().optional(),
  compId: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  eventCommentId: z.boolean().optional(),
  commentId: z.boolean().optional(),
  venueId: z.boolean().optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Comment: z.union([z.boolean(),z.lazy(() => CommentArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  auth_session: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  auth_key: z.union([z.boolean(),z.lazy(() => KeyFindManyArgsSchema)]).optional(),
  UserSettings: z.union([z.boolean(),z.lazy(() => UserSettingsArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  Result: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comment: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Address: z.union([z.boolean(),z.lazy(() => AddressFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  auth_session: z.boolean().optional(),
  auth_key: z.boolean().optional(),
  Series: z.boolean().optional(),
  Event: z.boolean().optional(),
  Race: z.boolean().optional(),
  Comp: z.boolean().optional(),
  Result: z.boolean().optional(),
  Organization: z.boolean().optional(),
  Venue: z.boolean().optional(),
  follow: z.boolean().optional(),
  like: z.boolean().optional(),
  Comment: z.boolean().optional(),
  Address: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  username: z.boolean().optional(),
  firstname: z.boolean().optional(),
  lastname: z.boolean().optional(),
  email: z.boolean().optional(),
  email_verified: z.boolean().optional(),
  name: z.boolean().optional(),
  avatar: z.boolean().optional(),
  auth_session: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  auth_key: z.union([z.boolean(),z.lazy(() => KeyFindManyArgsSchema)]).optional(),
  UserSettings: z.union([z.boolean(),z.lazy(() => UserSettingsArgsSchema)]).optional(),
  Series: z.union([z.boolean(),z.lazy(() => SeriesFindManyArgsSchema)]).optional(),
  Event: z.union([z.boolean(),z.lazy(() => EventFindManyArgsSchema)]).optional(),
  Race: z.union([z.boolean(),z.lazy(() => RaceFindManyArgsSchema)]).optional(),
  Comp: z.union([z.boolean(),z.lazy(() => CompFindManyArgsSchema)]).optional(),
  Result: z.union([z.boolean(),z.lazy(() => ResultFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  Venue: z.union([z.boolean(),z.lazy(() => VenueFindManyArgsSchema)]).optional(),
  follow: z.union([z.boolean(),z.lazy(() => FollowFindManyArgsSchema)]).optional(),
  like: z.union([z.boolean(),z.lazy(() => LikeFindManyArgsSchema)]).optional(),
  Comment: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  Address: z.union([z.boolean(),z.lazy(() => AddressFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER SETTINGS
//------------------------------------------------------

export const UserSettingsIncludeSchema: z.ZodType<Prisma.UserSettingsInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserSettingsArgsSchema: z.ZodType<Prisma.UserSettingsDefaultArgs> = z.object({
  select: z.lazy(() => UserSettingsSelectSchema).optional(),
  include: z.lazy(() => UserSettingsIncludeSchema).optional(),
}).strict();

export const UserSettingsSelectSchema: z.ZodType<Prisma.UserSettingsSelect> = z.object({
  id: z.boolean().optional(),
  theme: z.boolean().optional(),
  language: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  active_expires: z.boolean().optional(),
  idle_expires: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// KEY
//------------------------------------------------------

export const KeyIncludeSchema: z.ZodType<Prisma.KeyInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const KeyArgsSchema: z.ZodType<Prisma.KeyDefaultArgs> = z.object({
  select: z.lazy(() => KeySelectSchema).optional(),
  include: z.lazy(() => KeyIncludeSchema).optional(),
}).strict();

export const KeySelectSchema: z.ZodType<Prisma.KeySelect> = z.object({
  id: z.boolean().optional(),
  hashed_password: z.boolean().optional(),
  user_id: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION TOKEN
//------------------------------------------------------

export const VerificationTokenSelectSchema: z.ZodType<Prisma.VerificationTokenSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  expires: z.boolean().optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const SeriesWhereInputSchema: z.ZodType<Prisma.SeriesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SeriesWhereInputSchema),z.lazy(() => SeriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SeriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SeriesWhereInputSchema),z.lazy(() => SeriesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Venues: z.lazy(() => VenueListRelationFilterSchema).optional()
}).strict();

export const SeriesOrderByWithRelationInputSchema: z.ZodType<Prisma.SeriesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Follows: z.lazy(() => FollowOrderByRelationAggregateInputSchema).optional(),
  Likes: z.lazy(() => LikeOrderByRelationAggregateInputSchema).optional(),
  Comments: z.lazy(() => CommentOrderByRelationAggregateInputSchema).optional(),
  Venues: z.lazy(() => VenueOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SeriesWhereUniqueInputSchema: z.ZodType<Prisma.SeriesWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SeriesWhereInputSchema),z.lazy(() => SeriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SeriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SeriesWhereInputSchema),z.lazy(() => SeriesWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Venues: z.lazy(() => VenueListRelationFilterSchema).optional()
}).strict());

export const SeriesOrderByWithAggregationInputSchema: z.ZodType<Prisma.SeriesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SeriesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SeriesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SeriesMinOrderByAggregateInputSchema).optional()
}).strict();

export const SeriesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SeriesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema),z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema),z.lazy(() => SeriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const EventWhereInputSchema: z.ZodType<Prisma.EventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventeid: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  uniqueIdString: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventwebsite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  public: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  fileInfo: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceListRelationFilterSchema).optional(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comps: z.lazy(() => CompListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional()
}).strict();

export const EventOrderByWithRelationInputSchema: z.ZodType<Prisma.EventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  fileInfo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultColumns: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByWithRelationInputSchema).optional(),
  Venue: z.lazy(() => VenueOrderByWithRelationInputSchema).optional(),
  Races: z.lazy(() => RaceOrderByRelationAggregateInputSchema).optional(),
  Results: z.lazy(() => ResultOrderByRelationAggregateInputSchema).optional(),
  Follows: z.lazy(() => FollowOrderByRelationAggregateInputSchema).optional(),
  Likes: z.lazy(() => LikeOrderByRelationAggregateInputSchema).optional(),
  Comps: z.lazy(() => CompOrderByRelationAggregateInputSchema).optional(),
  Comments: z.lazy(() => CommentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EventWhereUniqueInputSchema: z.ZodType<Prisma.EventWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    uniqueIdString: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    uniqueIdString: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  uniqueIdString: z.string().optional(),
  AND: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventWhereInputSchema),z.lazy(() => EventWhereInputSchema).array() ]).optional(),
  eventeid: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventwebsite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  public: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  fileInfo: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceListRelationFilterSchema).optional(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comps: z.lazy(() => CompListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional()
}).strict());

export const EventOrderByWithAggregationInputSchema: z.ZodType<Prisma.EventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  fileInfo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultColumns: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => EventCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EventMinOrderByAggregateInputSchema).optional()
}).strict();

export const EventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereWithAggregatesInputSchema),z.lazy(() => EventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventeid: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  uniqueIdString: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventwebsite: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  venueName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  public: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  fileInfo: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  resultColumns: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const RaceWhereInputSchema: z.ZodType<Prisma.RaceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  uniqueRaceString: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  starts: z.lazy(() => JsonNullableFilterSchema).optional(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailed: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comps: z.lazy(() => CompListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional()
}).strict();

export const RaceOrderByWithRelationInputSchema: z.ZodType<Prisma.RaceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  starts: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rank: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  time: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sailed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultColumns: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Results: z.lazy(() => ResultOrderByRelationAggregateInputSchema).optional(),
  Follows: z.lazy(() => FollowOrderByRelationAggregateInputSchema).optional(),
  Likes: z.lazy(() => LikeOrderByRelationAggregateInputSchema).optional(),
  Comps: z.lazy(() => CompOrderByRelationAggregateInputSchema).optional(),
  Comments: z.lazy(() => CommentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RaceWhereUniqueInputSchema: z.ZodType<Prisma.RaceWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    uniqueRaceString: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    uniqueRaceString: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  uniqueRaceString: z.string().optional(),
  AND: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  starts: z.lazy(() => JsonNullableFilterSchema).optional(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailed: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comps: z.lazy(() => CompListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional()
}).strict());

export const RaceOrderByWithAggregationInputSchema: z.ZodType<Prisma.RaceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  starts: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rank: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  time: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sailed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultColumns: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RaceCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RaceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RaceMinOrderByAggregateInputSchema).optional()
}).strict();

export const RaceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RaceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RaceScalarWhereWithAggregatesInputSchema),z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceScalarWhereWithAggregatesInputSchema),z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  uniqueRaceString: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  starts: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  rank: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sailed: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  resultColumns: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const CompWhereInputSchema: z.ZodType<Prisma.CompWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CompWhereInputSchema),z.lazy(() => CompWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompWhereInputSchema),z.lazy(() => CompWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  compId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  uniqueCompId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  club: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boat: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skipper: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailno: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fleet: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  division: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nett: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Commments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Races: z.lazy(() => RaceListRelationFilterSchema).optional()
}).strict();

export const CompOrderByWithRelationInputSchema: z.ZodType<Prisma.CompOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  uniqueCompId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  club: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boat: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  skipper: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sailno: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fleet: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  division: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rank: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nett: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  total: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Results: z.lazy(() => ResultOrderByRelationAggregateInputSchema).optional(),
  Follows: z.lazy(() => FollowOrderByRelationAggregateInputSchema).optional(),
  Likes: z.lazy(() => LikeOrderByRelationAggregateInputSchema).optional(),
  Commments: z.lazy(() => CommentOrderByRelationAggregateInputSchema).optional(),
  Races: z.lazy(() => RaceOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CompWhereUniqueInputSchema: z.ZodType<Prisma.CompWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    compId: z.string(),
    uniqueCompId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
    compId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    uniqueCompId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    compId: z.string(),
    uniqueCompId: z.string(),
  }),
  z.object({
    compId: z.string(),
  }),
  z.object({
    uniqueCompId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  compId: z.string().optional(),
  uniqueCompId: z.string().optional(),
  AND: z.union([ z.lazy(() => CompWhereInputSchema),z.lazy(() => CompWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompWhereInputSchema),z.lazy(() => CompWhereInputSchema).array() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  club: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boat: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skipper: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailno: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fleet: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  division: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nett: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Results: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Commments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Races: z.lazy(() => RaceListRelationFilterSchema).optional()
}).strict());

export const CompOrderByWithAggregationInputSchema: z.ZodType<Prisma.CompOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  uniqueCompId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  club: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boat: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  skipper: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sailno: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fleet: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  division: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rank: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nett: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  total: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CompCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CompMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CompMinOrderByAggregateInputSchema).optional()
}).strict();

export const CompScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CompScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CompScalarWhereWithAggregatesInputSchema),z.lazy(() => CompScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompScalarWhereWithAggregatesInputSchema),z.lazy(() => CompScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  compId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  uniqueCompId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  club: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  boat: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  skipper: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sailno: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fleet: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  division: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rank: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  nett: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  total: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ResultWhereInputSchema: z.ZodType<Prisma.ResultWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ResultWhereInputSchema),z.lazy(() => ResultWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResultWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResultWhereInputSchema),z.lazy(() => ResultWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  points: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  discard: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finish: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  corrected: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elasped: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elapsedWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ratingWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  supposedRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rrset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ResultOrderByWithRelationInputSchema: z.ZodType<Prisma.ResultOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  points: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  discard: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  start: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finish: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  corrected: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  elasped: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  elapsedWin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ratingWin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceRating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  supposedRating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rrset: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Comp: z.lazy(() => CompOrderByWithRelationInputSchema).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByWithRelationInputSchema).optional()
}).strict();

export const ResultWhereUniqueInputSchema: z.ZodType<Prisma.ResultWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    resultId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    resultId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  resultId: z.string().optional(),
  AND: z.union([ z.lazy(() => ResultWhereInputSchema),z.lazy(() => ResultWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResultWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResultWhereInputSchema),z.lazy(() => ResultWhereInputSchema).array() ]).optional(),
  points: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  discard: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finish: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  corrected: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elasped: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elapsedWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ratingWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  supposedRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rrset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ResultOrderByWithAggregationInputSchema: z.ZodType<Prisma.ResultOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  points: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  discard: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  start: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finish: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  corrected: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  elasped: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  elapsedWin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ratingWin: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceRating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  supposedRating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rrset: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ResultCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ResultMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ResultMinOrderByAggregateInputSchema).optional()
}).strict();

export const ResultScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ResultScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ResultScalarWhereWithAggregatesInputSchema),z.lazy(() => ResultScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResultScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResultScalarWhereWithAggregatesInputSchema),z.lazy(() => ResultScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  points: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  discard: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  resultType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  start: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finish: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  corrected: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  elasped: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  elapsedWin: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ratingWin: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raceRating: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  supposedRating: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rrset: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Owner: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Addresses: z.lazy(() => AddressListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Owner: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByRelationAggregateInputSchema).optional(),
  Follows: z.lazy(() => FollowOrderByRelationAggregateInputSchema).optional(),
  Likes: z.lazy(() => LikeOrderByRelationAggregateInputSchema).optional(),
  Comments: z.lazy(() => CommentOrderByRelationAggregateInputSchema).optional(),
  Addresses: z.lazy(() => AddressOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    name: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Owner: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  Follows: z.lazy(() => FollowListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Addresses: z.lazy(() => AddressListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VenueWhereInputSchema: z.ZodType<Prisma.VenueWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VenueWhereInputSchema),z.lazy(() => VenueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VenueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VenueWhereInputSchema),z.lazy(() => VenueWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  burgee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Addresses: z.lazy(() => AddressListRelationFilterSchema).optional(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const VenueOrderByWithRelationInputSchema: z.ZodType<Prisma.VenueOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  burgee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Events: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByRelationAggregateInputSchema).optional(),
  Likes: z.lazy(() => LikeOrderByRelationAggregateInputSchema).optional(),
  Comments: z.lazy(() => CommentOrderByRelationAggregateInputSchema).optional(),
  Addresses: z.lazy(() => AddressOrderByRelationAggregateInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const VenueWhereUniqueInputSchema: z.ZodType<Prisma.VenueWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    name: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => VenueWhereInputSchema),z.lazy(() => VenueWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VenueWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VenueWhereInputSchema),z.lazy(() => VenueWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  burgee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Events: z.lazy(() => EventListRelationFilterSchema).optional(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Addresses: z.lazy(() => AddressListRelationFilterSchema).optional(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const VenueOrderByWithAggregationInputSchema: z.ZodType<Prisma.VenueOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  burgee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  titleImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => VenueCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VenueMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VenueMinOrderByAggregateInputSchema).optional()
}).strict();

export const VenueScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VenueScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VenueScalarWhereWithAggregatesInputSchema),z.lazy(() => VenueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VenueScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VenueScalarWhereWithAggregatesInputSchema),z.lazy(() => VenueScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  burgee: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const AddressWhereInputSchema: z.ZodType<Prisma.AddressWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AddressWhereInputSchema),z.lazy(() => AddressWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AddressWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AddressWhereInputSchema),z.lazy(() => AddressWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  street: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AddressOrderByWithRelationInputSchema: z.ZodType<Prisma.AddressOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  street: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Venue: z.lazy(() => VenueOrderByWithRelationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Publisher: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AddressWhereUniqueInputSchema: z.ZodType<Prisma.AddressWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AddressWhereInputSchema),z.lazy(() => AddressWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AddressWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AddressWhereInputSchema),z.lazy(() => AddressWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  street: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Publisher: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AddressOrderByWithAggregationInputSchema: z.ZodType<Prisma.AddressOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  street: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publisherId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AddressCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AddressMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AddressMinOrderByAggregateInputSchema).optional()
}).strict();

export const AddressScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AddressScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AddressScalarWhereWithAggregatesInputSchema),z.lazy(() => AddressScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AddressScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AddressScalarWhereWithAggregatesInputSchema),z.lazy(() => AddressScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  street: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const CommentWhereInputSchema: z.ZodType<Prisma.CommentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CommentWhereInputSchema),z.lazy(() => CommentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CommentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CommentWhereInputSchema),z.lazy(() => CommentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
}).strict();

export const CommentOrderByWithRelationInputSchema: z.ZodType<Prisma.CommentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ref: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Likes: z.lazy(() => LikeOrderByRelationAggregateInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByWithRelationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Venue: z.lazy(() => VenueOrderByWithRelationInputSchema).optional(),
  Comp: z.lazy(() => CompOrderByWithRelationInputSchema).optional()
}).strict();

export const CommentWhereUniqueInputSchema: z.ZodType<Prisma.CommentWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => CommentWhereInputSchema),z.lazy(() => CommentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CommentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CommentWhereInputSchema),z.lazy(() => CommentWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  Likes: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
}).strict());

export const CommentOrderByWithAggregationInputSchema: z.ZodType<Prisma.CommentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ref: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CommentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CommentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CommentMinOrderByAggregateInputSchema).optional()
}).strict();

export const CommentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CommentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CommentScalarWhereWithAggregatesInputSchema),z.lazy(() => CommentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CommentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CommentScalarWhereWithAggregatesInputSchema),z.lazy(() => CommentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ref: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const FollowWhereInputSchema: z.ZodType<Prisma.FollowWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FollowWhereInputSchema),z.lazy(() => FollowWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FollowWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FollowWhereInputSchema),z.lazy(() => FollowWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const FollowOrderByWithRelationInputSchema: z.ZodType<Prisma.FollowOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  Comp: z.lazy(() => CompOrderByWithRelationInputSchema).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const FollowWhereUniqueInputSchema: z.ZodType<Prisma.FollowWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => FollowWhereInputSchema),z.lazy(() => FollowWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FollowWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FollowWhereInputSchema),z.lazy(() => FollowWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const FollowOrderByWithAggregationInputSchema: z.ZodType<Prisma.FollowOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FollowCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FollowMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FollowMinOrderByAggregateInputSchema).optional()
}).strict();

export const FollowScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FollowScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FollowScalarWhereWithAggregatesInputSchema),z.lazy(() => FollowScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FollowScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FollowScalarWhereWithAggregatesInputSchema),z.lazy(() => FollowScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LikeWhereInputSchema: z.ZodType<Prisma.LikeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LikeWhereInputSchema),z.lazy(() => LikeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LikeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LikeWhereInputSchema),z.lazy(() => LikeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  itemId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  eventCommentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  commentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  Comment: z.union([ z.lazy(() => CommentNullableRelationFilterSchema),z.lazy(() => CommentWhereInputSchema) ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LikeOrderByWithRelationInputSchema: z.ZodType<Prisma.LikeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  commentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Comp: z.lazy(() => CompOrderByWithRelationInputSchema).optional(),
  Event: z.lazy(() => EventOrderByWithRelationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Comment: z.lazy(() => CommentOrderByWithRelationInputSchema).optional(),
  Venue: z.lazy(() => VenueOrderByWithRelationInputSchema).optional()
}).strict();

export const LikeWhereUniqueInputSchema: z.ZodType<Prisma.LikeWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => LikeWhereInputSchema),z.lazy(() => LikeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LikeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LikeWhereInputSchema),z.lazy(() => LikeWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  itemId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  eventCommentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  commentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Comp: z.union([ z.lazy(() => CompNullableRelationFilterSchema),z.lazy(() => CompWhereInputSchema) ]).optional().nullable(),
  Event: z.union([ z.lazy(() => EventNullableRelationFilterSchema),z.lazy(() => EventWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  Race: z.union([ z.lazy(() => RaceNullableRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional().nullable(),
  Series: z.union([ z.lazy(() => SeriesNullableRelationFilterSchema),z.lazy(() => SeriesWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  Comment: z.union([ z.lazy(() => CommentNullableRelationFilterSchema),z.lazy(() => CommentWhereInputSchema) ]).optional().nullable(),
  Venue: z.union([ z.lazy(() => VenueNullableRelationFilterSchema),z.lazy(() => VenueWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LikeOrderByWithAggregationInputSchema: z.ZodType<Prisma.LikeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  seriesId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  raceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  compId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  commentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  venueId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LikeCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LikeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LikeMinOrderByAggregateInputSchema).optional()
}).strict();

export const LikeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LikeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LikeScalarWhereWithAggregatesInputSchema),z.lazy(() => LikeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LikeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LikeScalarWhereWithAggregatesInputSchema),z.lazy(() => LikeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  itemId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  eventCommentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  commentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  username: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_verified: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  auth_session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  auth_key: z.lazy(() => KeyListRelationFilterSchema).optional(),
  UserSettings: z.union([ z.lazy(() => UserSettingsNullableRelationFilterSchema),z.lazy(() => UserSettingsWhereInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  Event: z.lazy(() => EventListRelationFilterSchema).optional(),
  Race: z.lazy(() => RaceListRelationFilterSchema).optional(),
  Comp: z.lazy(() => CompListRelationFilterSchema).optional(),
  Result: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  Venue: z.lazy(() => VenueListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comment: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Address: z.lazy(() => AddressListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_verified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  auth_session: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  auth_key: z.lazy(() => KeyOrderByRelationAggregateInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsOrderByWithRelationInputSchema).optional(),
  Series: z.lazy(() => SeriesOrderByRelationAggregateInputSchema).optional(),
  Event: z.lazy(() => EventOrderByRelationAggregateInputSchema).optional(),
  Race: z.lazy(() => RaceOrderByRelationAggregateInputSchema).optional(),
  Comp: z.lazy(() => CompOrderByRelationAggregateInputSchema).optional(),
  Result: z.lazy(() => ResultOrderByRelationAggregateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional(),
  Venue: z.lazy(() => VenueOrderByRelationAggregateInputSchema).optional(),
  follow: z.lazy(() => FollowOrderByRelationAggregateInputSchema).optional(),
  like: z.lazy(() => LikeOrderByRelationAggregateInputSchema).optional(),
  Comment: z.lazy(() => CommentOrderByRelationAggregateInputSchema).optional(),
  Address: z.lazy(() => AddressOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  username: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email_verified: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  auth_session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  auth_key: z.lazy(() => KeyListRelationFilterSchema).optional(),
  UserSettings: z.union([ z.lazy(() => UserSettingsNullableRelationFilterSchema),z.lazy(() => UserSettingsWhereInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesListRelationFilterSchema).optional(),
  Event: z.lazy(() => EventListRelationFilterSchema).optional(),
  Race: z.lazy(() => RaceListRelationFilterSchema).optional(),
  Comp: z.lazy(() => CompListRelationFilterSchema).optional(),
  Result: z.lazy(() => ResultListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  Venue: z.lazy(() => VenueListRelationFilterSchema).optional(),
  follow: z.lazy(() => FollowListRelationFilterSchema).optional(),
  like: z.lazy(() => LikeListRelationFilterSchema).optional(),
  Comment: z.lazy(() => CommentListRelationFilterSchema).optional(),
  Address: z.lazy(() => AddressListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email_verified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  avatar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  username: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  firstname: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  lastname: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email_verified: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  avatar: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserSettingsWhereInputSchema: z.ZodType<Prisma.UserSettingsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserSettingsWhereInputSchema),z.lazy(() => UserSettingsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserSettingsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserSettingsWhereInputSchema),z.lazy(() => UserSettingsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  theme: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsOrderByWithRelationInputSchema: z.ZodType<Prisma.UserSettingsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const UserSettingsWhereUniqueInputSchema: z.ZodType<Prisma.UserSettingsWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    userId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    userId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional(),
  AND: z.union([ z.lazy(() => UserSettingsWhereInputSchema),z.lazy(() => UserSettingsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserSettingsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserSettingsWhereInputSchema),z.lazy(() => UserSettingsWhereInputSchema).array() ]).optional(),
  theme: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const UserSettingsOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserSettingsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserSettingsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserSettingsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserSettingsMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserSettingsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserSettingsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema),z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema),z.lazy(() => UserSettingsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  theme: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SessionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SessionSumOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
}).strict();

export const KeyWhereInputSchema: z.ZodType<Prisma.KeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const KeyOrderByWithRelationInputSchema: z.ZodType<Prisma.KeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const KeyWhereUniqueInputSchema: z.ZodType<Prisma.KeyWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const KeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.KeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => KeyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => KeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => KeyMinOrderByAggregateInputSchema).optional()
}).strict();

export const KeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.KeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => KeyScalarWhereWithAggregatesInputSchema),z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyScalarWhereWithAggregatesInputSchema),z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const VerificationTokenWhereInputSchema: z.ZodType<Prisma.VerificationTokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
}).strict();

export const VerificationTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenWhereUniqueInputSchema: z.ZodType<Prisma.VerificationTokenWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_id: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_id: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_id: z.string().optional(),
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
}).strict());

export const VerificationTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VerificationTokenCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => VerificationTokenAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationTokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationTokenMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => VerificationTokenSumOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationTokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
}).strict();

export const SeriesCreateInputSchema: z.ZodType<Prisma.SeriesCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUpdateInputSchema: z.ZodType<Prisma.SeriesUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesCreateManyInputSchema: z.ZodType<Prisma.SeriesCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const SeriesUpdateManyMutationInputSchema: z.ZodType<Prisma.SeriesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventCreateInputSchema: z.ZodType<Prisma.EventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateInputSchema: z.ZodType<Prisma.EventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUpdateInputSchema: z.ZodType<Prisma.EventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateInputSchema: z.ZodType<Prisma.EventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventCreateManyInputSchema: z.ZodType<Prisma.EventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const EventUpdateManyMutationInputSchema: z.ZodType<Prisma.EventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceCreateInputSchema: z.ZodType<Prisma.RaceCreateInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateInputSchema: z.ZodType<Prisma.RaceUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUpdateInputSchema: z.ZodType<Prisma.RaceUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceCreateManyInputSchema: z.ZodType<Prisma.RaceCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const RaceUpdateManyMutationInputSchema: z.ZodType<Prisma.RaceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompCreateInputSchema: z.ZodType<Prisma.CompCreateInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateInputSchema: z.ZodType<Prisma.CompUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUpdateInputSchema: z.ZodType<Prisma.CompUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateInputSchema: z.ZodType<Prisma.CompUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompCreateManyInputSchema: z.ZodType<Prisma.CompCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const CompUpdateManyMutationInputSchema: z.ZodType<Prisma.CompUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultCreateInputSchema: z.ZodType<Prisma.ResultCreateInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutResultsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutResultsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutResultInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const ResultUncheckedCreateInputSchema: z.ZodType<Prisma.ResultUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultUpdateInputSchema: z.ZodType<Prisma.ResultUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutResultsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutResultsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutResultNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultCreateManyInputSchema: z.ZodType<Prisma.ResultCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultUpdateManyMutationInputSchema: z.ZodType<Prisma.ResultUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueCreateInputSchema: z.ZodType<Prisma.VenueCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutVenueInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional()
}).strict();

export const VenueUncheckedCreateInputSchema: z.ZodType<Prisma.VenueUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueUpdateInputSchema: z.ZodType<Prisma.VenueUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutVenueNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueCreateManyInputSchema: z.ZodType<Prisma.VenueCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VenueUpdateManyMutationInputSchema: z.ZodType<Prisma.VenueUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressCreateInputSchema: z.ZodType<Prisma.AddressCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutAddressesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutAddressesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutAddressInputSchema).optional()
}).strict();

export const AddressUncheckedCreateInputSchema: z.ZodType<Prisma.AddressUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable()
}).strict();

export const AddressUpdateInputSchema: z.ZodType<Prisma.AddressUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Venue: z.lazy(() => VenueUpdateOneWithoutAddressesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutAddressesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutAddressNestedInputSchema).optional()
}).strict();

export const AddressUncheckedUpdateInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressCreateManyInputSchema: z.ZodType<Prisma.AddressCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable()
}).strict();

export const AddressUpdateManyMutationInputSchema: z.ZodType<Prisma.AddressUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentCreateInputSchema: z.ZodType<Prisma.CommentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutCommentInputSchema),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCommentInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutCommentsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutCommentsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutCommentsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutCommentsInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutCommmentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateInputSchema: z.ZodType<Prisma.CommentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCommentInputSchema).optional()
}).strict();

export const CommentUpdateInputSchema: z.ZodType<Prisma.CommentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutCommentNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCommentNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutCommmentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCommentNestedInputSchema).optional()
}).strict();

export const CommentCreateManyInputSchema: z.ZodType<Prisma.CommentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const CommentUpdateManyMutationInputSchema: z.ZodType<Prisma.CommentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FollowCreateInputSchema: z.ZodType<Prisma.FollowCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowsInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const FollowUncheckedCreateInputSchema: z.ZodType<Prisma.FollowUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FollowUpdateInputSchema: z.ZodType<Prisma.FollowUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const FollowUncheckedUpdateInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FollowCreateManyInputSchema: z.ZodType<Prisma.FollowCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FollowUpdateManyMutationInputSchema: z.ZodType<Prisma.FollowUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LikeCreateInputSchema: z.ZodType<Prisma.LikeCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikesInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikesInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikesInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikesInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  Comment: z.lazy(() => CommentCreateNestedOneWithoutLikesInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateInputSchema: z.ZodType<Prisma.LikeUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeUpdateInputSchema: z.ZodType<Prisma.LikeUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikesNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikesNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikesNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikesNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateOneWithoutLikesNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeCreateManyInputSchema: z.ZodType<Prisma.LikeCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeUpdateManyMutationInputSchema: z.ZodType<Prisma.LikeUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsCreateInputSchema: z.ZodType<Prisma.UserSettingsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserSettingsInputSchema).optional()
}).strict();

export const UserSettingsUncheckedCreateInputSchema: z.ZodType<Prisma.UserSettingsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  userId: z.string().optional().nullable()
}).strict();

export const UserSettingsUpdateInputSchema: z.ZodType<Prisma.UserSettingsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneWithoutUserSettingsNestedInputSchema).optional()
}).strict();

export const UserSettingsUncheckedUpdateInputSchema: z.ZodType<Prisma.UserSettingsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsCreateManyInputSchema: z.ZodType<Prisma.UserSettingsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable(),
  userId: z.string().optional().nullable()
}).strict();

export const UserSettingsUpdateManyMutationInputSchema: z.ZodType<Prisma.UserSettingsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserSettingsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuth_sessionInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuth_sessionNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const KeyCreateInputSchema: z.ZodType<Prisma.KeyCreateInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuth_keyInputSchema)
}).strict();

export const KeyUncheckedCreateInputSchema: z.ZodType<Prisma.KeyUncheckedCreateInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user_id: z.string()
}).strict();

export const KeyUpdateInputSchema: z.ZodType<Prisma.KeyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuth_keyNestedInputSchema).optional()
}).strict();

export const KeyUncheckedUpdateInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const KeyCreateManyInputSchema: z.ZodType<Prisma.KeyCreateManyInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user_id: z.string()
}).strict();

export const KeyUpdateManyMutationInputSchema: z.ZodType<Prisma.KeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateInputSchema: z.ZodType<Prisma.VerificationTokenCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  expires: z.bigint()
}).strict();

export const VerificationTokenUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedCreateInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  expires: z.bigint()
}).strict();

export const VerificationTokenUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateManyInputSchema: z.ZodType<Prisma.VerificationTokenCreateManyInput> = z.object({
  id: z.string(),
  user_id: z.string(),
  expires: z.bigint()
}).strict();

export const VerificationTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationTokenUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValue.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: InputJsonValue.optional()
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EventListRelationFilterSchema: z.ZodType<Prisma.EventListRelationFilter> = z.object({
  every: z.lazy(() => EventWhereInputSchema).optional(),
  some: z.lazy(() => EventWhereInputSchema).optional(),
  none: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const OrganizationNullableRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const UserNullableRelationFilterSchema: z.ZodType<Prisma.UserNullableRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const FollowListRelationFilterSchema: z.ZodType<Prisma.FollowListRelationFilter> = z.object({
  every: z.lazy(() => FollowWhereInputSchema).optional(),
  some: z.lazy(() => FollowWhereInputSchema).optional(),
  none: z.lazy(() => FollowWhereInputSchema).optional()
}).strict();

export const LikeListRelationFilterSchema: z.ZodType<Prisma.LikeListRelationFilter> = z.object({
  every: z.lazy(() => LikeWhereInputSchema).optional(),
  some: z.lazy(() => LikeWhereInputSchema).optional(),
  none: z.lazy(() => LikeWhereInputSchema).optional()
}).strict();

export const CommentListRelationFilterSchema: z.ZodType<Prisma.CommentListRelationFilter> = z.object({
  every: z.lazy(() => CommentWhereInputSchema).optional(),
  some: z.lazy(() => CommentWhereInputSchema).optional(),
  none: z.lazy(() => CommentWhereInputSchema).optional()
}).strict();

export const VenueListRelationFilterSchema: z.ZodType<Prisma.VenueListRelationFilter> = z.object({
  every: z.lazy(() => VenueWhereInputSchema).optional(),
  some: z.lazy(() => VenueWhereInputSchema).optional(),
  none: z.lazy(() => VenueWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const EventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FollowOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FollowOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LikeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LikeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CommentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CommentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VenueOrderByRelationAggregateInputSchema: z.ZodType<Prisma.VenueOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SeriesCountOrderByAggregateInputSchema: z.ZodType<Prisma.SeriesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  rest: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SeriesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SeriesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SeriesMinOrderByAggregateInputSchema: z.ZodType<Prisma.SeriesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValue.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: InputJsonValue.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const SeriesNullableRelationFilterSchema: z.ZodType<Prisma.SeriesNullableRelationFilter> = z.object({
  is: z.lazy(() => SeriesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SeriesWhereInputSchema).optional().nullable()
}).strict();

export const VenueNullableRelationFilterSchema: z.ZodType<Prisma.VenueNullableRelationFilter> = z.object({
  is: z.lazy(() => VenueWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => VenueWhereInputSchema).optional().nullable()
}).strict();

export const RaceListRelationFilterSchema: z.ZodType<Prisma.RaceListRelationFilter> = z.object({
  every: z.lazy(() => RaceWhereInputSchema).optional(),
  some: z.lazy(() => RaceWhereInputSchema).optional(),
  none: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const ResultListRelationFilterSchema: z.ZodType<Prisma.ResultListRelationFilter> = z.object({
  every: z.lazy(() => ResultWhereInputSchema).optional(),
  some: z.lazy(() => ResultWhereInputSchema).optional(),
  none: z.lazy(() => ResultWhereInputSchema).optional()
}).strict();

export const CompListRelationFilterSchema: z.ZodType<Prisma.CompListRelationFilter> = z.object({
  every: z.lazy(() => CompWhereInputSchema).optional(),
  some: z.lazy(() => CompWhereInputSchema).optional(),
  none: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const RaceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RaceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResultOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ResultOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CompOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventCountOrderByAggregateInputSchema: z.ZodType<Prisma.EventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.lazy(() => SortOrderSchema).optional(),
  venueName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  fileInfo: z.lazy(() => SortOrderSchema).optional(),
  resultColumns: z.lazy(() => SortOrderSchema).optional(),
  rest: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.lazy(() => SortOrderSchema).optional(),
  venueName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventMinOrderByAggregateInputSchema: z.ZodType<Prisma.EventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventeid: z.lazy(() => SortOrderSchema).optional(),
  uniqueIdString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  eventwebsite: z.lazy(() => SortOrderSchema).optional(),
  venueName: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  public: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const EventNullableRelationFilterSchema: z.ZodType<Prisma.EventNullableRelationFilter> = z.object({
  is: z.lazy(() => EventWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => EventWhereInputSchema).optional().nullable()
}).strict();

export const RaceCountOrderByAggregateInputSchema: z.ZodType<Prisma.RaceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  starts: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  sailed: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  resultColumns: z.lazy(() => SortOrderSchema).optional(),
  rest: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RaceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  sailed: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceMinOrderByAggregateInputSchema: z.ZodType<Prisma.RaceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  uniqueRaceString: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  sailed: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompCountOrderByAggregateInputSchema: z.ZodType<Prisma.CompCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  uniqueCompId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  club: z.lazy(() => SortOrderSchema).optional(),
  boat: z.lazy(() => SortOrderSchema).optional(),
  skipper: z.lazy(() => SortOrderSchema).optional(),
  sailno: z.lazy(() => SortOrderSchema).optional(),
  fleet: z.lazy(() => SortOrderSchema).optional(),
  division: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  nett: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  rest: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CompMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  uniqueCompId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  club: z.lazy(() => SortOrderSchema).optional(),
  boat: z.lazy(() => SortOrderSchema).optional(),
  skipper: z.lazy(() => SortOrderSchema).optional(),
  sailno: z.lazy(() => SortOrderSchema).optional(),
  fleet: z.lazy(() => SortOrderSchema).optional(),
  division: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  nett: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompMinOrderByAggregateInputSchema: z.ZodType<Prisma.CompMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  uniqueCompId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  club: z.lazy(() => SortOrderSchema).optional(),
  boat: z.lazy(() => SortOrderSchema).optional(),
  skipper: z.lazy(() => SortOrderSchema).optional(),
  sailno: z.lazy(() => SortOrderSchema).optional(),
  fleet: z.lazy(() => SortOrderSchema).optional(),
  division: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  rank: z.lazy(() => SortOrderSchema).optional(),
  nett: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CompNullableRelationFilterSchema: z.ZodType<Prisma.CompNullableRelationFilter> = z.object({
  is: z.lazy(() => CompWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CompWhereInputSchema).optional().nullable()
}).strict();

export const RaceNullableRelationFilterSchema: z.ZodType<Prisma.RaceNullableRelationFilter> = z.object({
  is: z.lazy(() => RaceWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RaceWhereInputSchema).optional().nullable()
}).strict();

export const ResultCountOrderByAggregateInputSchema: z.ZodType<Prisma.ResultCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  discard: z.lazy(() => SortOrderSchema).optional(),
  resultType: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  finish: z.lazy(() => SortOrderSchema).optional(),
  corrected: z.lazy(() => SortOrderSchema).optional(),
  elasped: z.lazy(() => SortOrderSchema).optional(),
  elapsedWin: z.lazy(() => SortOrderSchema).optional(),
  ratingWin: z.lazy(() => SortOrderSchema).optional(),
  raceRating: z.lazy(() => SortOrderSchema).optional(),
  supposedRating: z.lazy(() => SortOrderSchema).optional(),
  rrset: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResultMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ResultMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  discard: z.lazy(() => SortOrderSchema).optional(),
  resultType: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  finish: z.lazy(() => SortOrderSchema).optional(),
  corrected: z.lazy(() => SortOrderSchema).optional(),
  elasped: z.lazy(() => SortOrderSchema).optional(),
  elapsedWin: z.lazy(() => SortOrderSchema).optional(),
  ratingWin: z.lazy(() => SortOrderSchema).optional(),
  raceRating: z.lazy(() => SortOrderSchema).optional(),
  supposedRating: z.lazy(() => SortOrderSchema).optional(),
  rrset: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResultMinOrderByAggregateInputSchema: z.ZodType<Prisma.ResultMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  points: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  discard: z.lazy(() => SortOrderSchema).optional(),
  resultType: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  start: z.lazy(() => SortOrderSchema).optional(),
  finish: z.lazy(() => SortOrderSchema).optional(),
  corrected: z.lazy(() => SortOrderSchema).optional(),
  elasped: z.lazy(() => SortOrderSchema).optional(),
  elapsedWin: z.lazy(() => SortOrderSchema).optional(),
  ratingWin: z.lazy(() => SortOrderSchema).optional(),
  raceRating: z.lazy(() => SortOrderSchema).optional(),
  supposedRating: z.lazy(() => SortOrderSchema).optional(),
  rrset: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SeriesListRelationFilterSchema: z.ZodType<Prisma.SeriesListRelationFilter> = z.object({
  every: z.lazy(() => SeriesWhereInputSchema).optional(),
  some: z.lazy(() => SeriesWhereInputSchema).optional(),
  none: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const AddressListRelationFilterSchema: z.ZodType<Prisma.AddressListRelationFilter> = z.object({
  every: z.lazy(() => AddressWhereInputSchema).optional(),
  some: z.lazy(() => AddressWhereInputSchema).optional(),
  none: z.lazy(() => AddressWhereInputSchema).optional()
}).strict();

export const SeriesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SeriesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AddressOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AddressOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  tag: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VenueCountOrderByAggregateInputSchema: z.ZodType<Prisma.VenueCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  burgee: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VenueMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VenueMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  burgee: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VenueMinOrderByAggregateInputSchema: z.ZodType<Prisma.VenueMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  burgee: z.lazy(() => SortOrderSchema).optional(),
  titleImage: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AddressCountOrderByAggregateInputSchema: z.ZodType<Prisma.AddressCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  street: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AddressMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AddressMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  street: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AddressMinOrderByAggregateInputSchema: z.ZodType<Prisma.AddressMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  street: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  publisherId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const CommentCountOrderByAggregateInputSchema: z.ZodType<Prisma.CommentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  ref: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CommentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CommentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  ref: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CommentMinOrderByAggregateInputSchema: z.ZodType<Prisma.CommentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  ref: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const FollowCountOrderByAggregateInputSchema: z.ZodType<Prisma.FollowCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FollowMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FollowMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FollowMinOrderByAggregateInputSchema: z.ZodType<Prisma.FollowMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const CommentNullableRelationFilterSchema: z.ZodType<Prisma.CommentNullableRelationFilter> = z.object({
  is: z.lazy(() => CommentWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CommentWhereInputSchema).optional().nullable()
}).strict();

export const LikeCountOrderByAggregateInputSchema: z.ZodType<Prisma.LikeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.lazy(() => SortOrderSchema).optional(),
  commentId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LikeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LikeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.lazy(() => SortOrderSchema).optional(),
  commentId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LikeMinOrderByAggregateInputSchema: z.ZodType<Prisma.LikeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  seriesId: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  raceId: z.lazy(() => SortOrderSchema).optional(),
  compId: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  eventCommentId: z.lazy(() => SortOrderSchema).optional(),
  commentId: z.lazy(() => SortOrderSchema).optional(),
  venueId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const KeyListRelationFilterSchema: z.ZodType<Prisma.KeyListRelationFilter> = z.object({
  every: z.lazy(() => KeyWhereInputSchema).optional(),
  some: z.lazy(() => KeyWhereInputSchema).optional(),
  none: z.lazy(() => KeyWhereInputSchema).optional()
}).strict();

export const UserSettingsNullableRelationFilterSchema: z.ZodType<Prisma.UserSettingsNullableRelationFilter> = z.object({
  is: z.lazy(() => UserSettingsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserSettingsWhereInputSchema).optional().nullable()
}).strict();

export const OrganizationListRelationFilterSchema: z.ZodType<Prisma.OrganizationListRelationFilter> = z.object({
  every: z.lazy(() => OrganizationWhereInputSchema).optional(),
  some: z.lazy(() => OrganizationWhereInputSchema).optional(),
  none: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.KeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrganizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.lazy(() => SortOrderSchema).optional(),
  lastname: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  email_verified: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserAvgOrderByAggregateInput> = z.object({
  email_verified: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.lazy(() => SortOrderSchema).optional(),
  lastname: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  email_verified: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  firstname: z.lazy(() => SortOrderSchema).optional(),
  lastname: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  email_verified: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatar: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserSumOrderByAggregateInput> = z.object({
  email_verified: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const UserSettingsCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserSettingsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSettingsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserSettingsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSettingsMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserSettingsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  theme: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntFilterSchema: z.ZodType<Prisma.BigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SessionAvgOrderByAggregateInput> = z.object({
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionSumOrderByAggregateInputSchema: z.ZodType<Prisma.SessionSumOrderByAggregateInput> = z.object({
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const KeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.KeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.KeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.KeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenAvgOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenAvgOrderByAggregateInput> = z.object({
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenSumOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenSumOrderByAggregateInput> = z.object({
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventCreateWithoutSeriesInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutSeriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutSeriesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutSeriesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSeriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSeriesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const FollowCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.FollowCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutSeriesInputSchema),z.lazy(() => FollowCreateWithoutSeriesInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => FollowCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.LikeCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutSeriesInputSchema),z.lazy(() => LikeCreateWithoutSeriesInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => LikeCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.CommentCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutSeriesInputSchema),z.lazy(() => CommentCreateWithoutSeriesInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => CommentCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VenueCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.VenueCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueCreateWithoutSeriesInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventCreateWithoutSeriesInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.FollowUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutSeriesInputSchema),z.lazy(() => FollowCreateWithoutSeriesInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => FollowCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.LikeUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutSeriesInputSchema),z.lazy(() => LikeCreateWithoutSeriesInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => LikeCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.CommentUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutSeriesInputSchema),z.lazy(() => CommentCreateWithoutSeriesInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => CommentCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManySeriesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VenueUncheckedCreateNestedManyWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUncheckedCreateNestedManyWithoutSeriesInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueCreateWithoutSeriesInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const EventUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventCreateWithoutSeriesInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutSeriesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutSeriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutSeriesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutSeriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutSeriesInputSchema),z.lazy(() => OrganizationUpdateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutSeriesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutSeriesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSeriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSeriesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSeriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSeriesInputSchema),z.lazy(() => UserUpdateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSeriesInputSchema) ]).optional(),
}).strict();

export const FollowUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.FollowUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutSeriesInputSchema),z.lazy(() => FollowCreateWithoutSeriesInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => FollowCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.LikeUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutSeriesInputSchema),z.lazy(() => LikeCreateWithoutSeriesInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => LikeCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.CommentUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutSeriesInputSchema),z.lazy(() => CommentCreateWithoutSeriesInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => CommentCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.VenueUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueCreateWithoutSeriesInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VenueUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => VenueUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VenueUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => VenueUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VenueUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => VenueUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventCreateWithoutSeriesInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => EventCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutSeriesInputSchema),z.lazy(() => FollowCreateWithoutSeriesInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => FollowCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutSeriesInputSchema),z.lazy(() => LikeCreateWithoutSeriesInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => LikeCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutSeriesInputSchema),z.lazy(() => CommentCreateWithoutSeriesInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => CommentCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManySeriesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyWithoutSeriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueCreateWithoutSeriesInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema),z.lazy(() => VenueCreateOrConnectWithoutSeriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VenueUpsertWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => VenueUpsertWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VenueUpdateWithWhereUniqueWithoutSeriesInputSchema),z.lazy(() => VenueUpdateWithWhereUniqueWithoutSeriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VenueUpdateManyWithWhereWithoutSeriesInputSchema),z.lazy(() => VenueUpdateManyWithWhereWithoutSeriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutEventInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.SeriesCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional()
}).strict();

export const VenueCreateNestedOneWithoutEventsInputSchema: z.ZodType<Prisma.VenueCreateNestedOneWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutEventsInputSchema).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional()
}).strict();

export const RaceCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.RaceCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceCreateWithoutEventInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema),z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.ResultCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultCreateWithoutEventInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema),z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.FollowCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutEventInputSchema),z.lazy(() => FollowCreateWithoutEventInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutEventInputSchema),z.lazy(() => FollowCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.LikeCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutEventInputSchema),z.lazy(() => LikeCreateWithoutEventInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutEventInputSchema),z.lazy(() => LikeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedManyWithoutEventsInputSchema: z.ZodType<Prisma.CompCreateNestedManyWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompCreateWithoutEventsInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema),z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.CommentCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutEventInputSchema),z.lazy(() => CommentCreateWithoutEventInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutEventInputSchema),z.lazy(() => CommentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.RaceUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceCreateWithoutEventInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema),z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.ResultUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultCreateWithoutEventInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema),z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.FollowUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutEventInputSchema),z.lazy(() => FollowCreateWithoutEventInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutEventInputSchema),z.lazy(() => FollowCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.LikeUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutEventInputSchema),z.lazy(() => LikeCreateWithoutEventInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutEventInputSchema),z.lazy(() => LikeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedCreateNestedManyWithoutEventsInputSchema: z.ZodType<Prisma.CompUncheckedCreateNestedManyWithoutEventsInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompCreateWithoutEventsInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema),z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.CommentUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutEventInputSchema),z.lazy(() => CommentCreateWithoutEventInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutEventInputSchema),z.lazy(() => CommentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const OrganizationUpdateOneWithoutEventsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutEventsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => OrganizationUpdateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutEventNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEventInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEventInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutEventInputSchema),z.lazy(() => UserUpdateWithoutEventInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateOneWithoutEventsNestedInputSchema: z.ZodType<Prisma.SeriesUpdateOneWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => SeriesUpsertWithoutEventsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => SeriesUpdateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const VenueUpdateOneWithoutEventsNestedInputSchema: z.ZodType<Prisma.VenueUpdateOneWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutEventsInputSchema).optional(),
  upsert: z.lazy(() => VenueUpsertWithoutEventsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => VenueUpdateToOneWithWhereWithoutEventsInputSchema),z.lazy(() => VenueUpdateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutEventsInputSchema) ]).optional(),
}).strict();

export const RaceUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.RaceUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceCreateWithoutEventInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema),z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.ResultUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultCreateWithoutEventInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema),z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.FollowUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutEventInputSchema),z.lazy(() => FollowCreateWithoutEventInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutEventInputSchema),z.lazy(() => FollowCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.LikeUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutEventInputSchema),z.lazy(() => LikeCreateWithoutEventInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutEventInputSchema),z.lazy(() => LikeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUpdateManyWithoutEventsNestedInputSchema: z.ZodType<Prisma.CompUpdateManyWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompCreateWithoutEventsInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema),z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutEventsInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutEventsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutEventsInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutEventsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutEventsInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutEventsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.CommentUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutEventInputSchema),z.lazy(() => CommentCreateWithoutEventInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutEventInputSchema),z.lazy(() => CommentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceCreateWithoutEventInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema),z.lazy(() => RaceCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultCreateWithoutEventInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema),z.lazy(() => ResultCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutEventInputSchema),z.lazy(() => FollowCreateWithoutEventInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutEventInputSchema),z.lazy(() => FollowCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutEventInputSchema),z.lazy(() => LikeCreateWithoutEventInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutEventInputSchema),z.lazy(() => LikeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedUpdateManyWithoutEventsNestedInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompCreateWithoutEventsInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema),z.lazy(() => CompCreateOrConnectWithoutEventsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutEventsInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutEventsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutEventsInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutEventsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutEventsInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutEventsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutEventInputSchema),z.lazy(() => CommentCreateWithoutEventInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutEventInputSchema),z.lazy(() => CommentCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedOneWithoutRacesInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutRacesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutRacesInputSchema),z.lazy(() => EventUncheckedCreateWithoutRacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutRacesInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutRaceInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutRaceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRaceInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ResultCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.ResultCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultCreateWithoutRaceInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema),z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.FollowCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutRaceInputSchema),z.lazy(() => FollowCreateWithoutRaceInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutRaceInputSchema),z.lazy(() => FollowCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.LikeCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutRaceInputSchema),z.lazy(() => LikeCreateWithoutRaceInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutRaceInputSchema),z.lazy(() => LikeCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedManyWithoutRacesInputSchema: z.ZodType<Prisma.CompCreateNestedManyWithoutRacesInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompCreateWithoutRacesInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema),z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.CommentCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutRaceInputSchema),z.lazy(() => CommentCreateWithoutRaceInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutRaceInputSchema),z.lazy(() => CommentCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.ResultUncheckedCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultCreateWithoutRaceInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema),z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.FollowUncheckedCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutRaceInputSchema),z.lazy(() => FollowCreateWithoutRaceInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutRaceInputSchema),z.lazy(() => FollowCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.LikeUncheckedCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutRaceInputSchema),z.lazy(() => LikeCreateWithoutRaceInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutRaceInputSchema),z.lazy(() => LikeCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedCreateNestedManyWithoutRacesInputSchema: z.ZodType<Prisma.CompUncheckedCreateNestedManyWithoutRacesInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompCreateWithoutRacesInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema),z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.CommentUncheckedCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutRaceInputSchema),z.lazy(() => CommentCreateWithoutRaceInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutRaceInputSchema),z.lazy(() => CommentCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateOneWithoutRacesNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutRacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutRacesInputSchema),z.lazy(() => EventUncheckedCreateWithoutRacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutRacesInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutRacesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutRacesInputSchema),z.lazy(() => EventUpdateWithoutRacesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutRacesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutRaceNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutRaceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRaceInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutRaceInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutRaceInputSchema),z.lazy(() => UserUpdateWithoutRaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRaceInputSchema) ]).optional(),
}).strict();

export const ResultUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.ResultUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultCreateWithoutRaceInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema),z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.FollowUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutRaceInputSchema),z.lazy(() => FollowCreateWithoutRaceInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutRaceInputSchema),z.lazy(() => FollowCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.LikeUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutRaceInputSchema),z.lazy(() => LikeCreateWithoutRaceInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutRaceInputSchema),z.lazy(() => LikeCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUpdateManyWithoutRacesNestedInputSchema: z.ZodType<Prisma.CompUpdateManyWithoutRacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompCreateWithoutRacesInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema),z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutRacesInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutRacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.CommentUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutRaceInputSchema),z.lazy(() => CommentCreateWithoutRaceInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutRaceInputSchema),z.lazy(() => CommentCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultCreateWithoutRaceInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema),z.lazy(() => ResultCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutRaceInputSchema),z.lazy(() => FollowCreateWithoutRaceInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutRaceInputSchema),z.lazy(() => FollowCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutRaceInputSchema),z.lazy(() => LikeCreateWithoutRaceInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutRaceInputSchema),z.lazy(() => LikeCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedUpdateManyWithoutRacesNestedInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutRacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompCreateWithoutRacesInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema),z.lazy(() => CompCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutRacesInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutRacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutRaceInputSchema),z.lazy(() => CommentCreateWithoutRaceInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutRaceInputSchema),z.lazy(() => CommentCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCompInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCompInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCompInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedManyWithoutCompsInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutCompsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventCreateWithoutCompsInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema),z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.ResultCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultCreateWithoutCompInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema),z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.FollowCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutCompInputSchema),z.lazy(() => FollowCreateWithoutCompInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutCompInputSchema),z.lazy(() => FollowCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.LikeCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutCompInputSchema),z.lazy(() => LikeCreateWithoutCompInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutCompInputSchema),z.lazy(() => LikeCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.CommentCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutCompInputSchema),z.lazy(() => CommentCreateWithoutCompInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutCompInputSchema),z.lazy(() => CommentCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceCreateNestedManyWithoutCompsInputSchema: z.ZodType<Prisma.RaceCreateNestedManyWithoutCompsInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceCreateWithoutCompsInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema),z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutCompsInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutCompsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventCreateWithoutCompsInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema),z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.ResultUncheckedCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultCreateWithoutCompInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema),z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.FollowUncheckedCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutCompInputSchema),z.lazy(() => FollowCreateWithoutCompInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutCompInputSchema),z.lazy(() => FollowCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.LikeUncheckedCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutCompInputSchema),z.lazy(() => LikeCreateWithoutCompInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutCompInputSchema),z.lazy(() => LikeCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedCreateNestedManyWithoutCompInputSchema: z.ZodType<Prisma.CommentUncheckedCreateNestedManyWithoutCompInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutCompInputSchema),z.lazy(() => CommentCreateWithoutCompInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutCompInputSchema),z.lazy(() => CommentCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyCompInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedCreateNestedManyWithoutCompsInputSchema: z.ZodType<Prisma.RaceUncheckedCreateNestedManyWithoutCompsInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceCreateWithoutCompsInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema),z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutCompNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCompInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCompInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCompInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCompInputSchema),z.lazy(() => UserUpdateWithoutCompInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompInputSchema) ]).optional(),
}).strict();

export const EventUpdateManyWithoutCompsNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutCompsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventCreateWithoutCompsInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema),z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutCompsInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutCompsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.ResultUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultCreateWithoutCompInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema),z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.FollowUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutCompInputSchema),z.lazy(() => FollowCreateWithoutCompInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutCompInputSchema),z.lazy(() => FollowCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.LikeUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutCompInputSchema),z.lazy(() => LikeCreateWithoutCompInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutCompInputSchema),z.lazy(() => LikeCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.CommentUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutCompInputSchema),z.lazy(() => CommentCreateWithoutCompInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutCompInputSchema),z.lazy(() => CommentCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUpdateManyWithoutCompsNestedInputSchema: z.ZodType<Prisma.RaceUpdateManyWithoutCompsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceCreateWithoutCompsInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema),z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutCompsInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutCompsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutCompsNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutCompsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventCreateWithoutCompsInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema),z.lazy(() => EventCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutCompsInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutCompsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultCreateWithoutCompInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema),z.lazy(() => ResultCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutCompInputSchema),z.lazy(() => FollowCreateWithoutCompInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutCompInputSchema),z.lazy(() => FollowCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutCompInputSchema),z.lazy(() => LikeCreateWithoutCompInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutCompInputSchema),z.lazy(() => LikeCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutCompNestedInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutCompNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutCompInputSchema),z.lazy(() => CommentCreateWithoutCompInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutCompInputSchema),z.lazy(() => CommentCreateOrConnectWithoutCompInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutCompInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyCompInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutCompInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutCompInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutCompInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutCompInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedUpdateManyWithoutCompsNestedInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutCompsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceCreateWithoutCompsInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema),z.lazy(() => RaceCreateOrConnectWithoutCompsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutCompsInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutCompsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutCompsInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutCompsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.CompCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutResultsInputSchema),z.lazy(() => CompUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutResultsInputSchema),z.lazy(() => EventUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutResultInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutResultInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutResultInputSchema),z.lazy(() => UserUncheckedCreateWithoutResultInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutResultInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RaceCreateNestedOneWithoutResultsInputSchema: z.ZodType<Prisma.RaceCreateNestedOneWithoutResultsInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutResultsInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional()
}).strict();

export const CompUpdateOneWithoutResultsNestedInputSchema: z.ZodType<Prisma.CompUpdateOneWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutResultsInputSchema),z.lazy(() => CompUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => CompUpsertWithoutResultsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => CompUpdateWithoutResultsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutResultsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutResultsInputSchema),z.lazy(() => EventUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutResultsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => EventUpdateWithoutResultsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutResultNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutResultNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutResultInputSchema),z.lazy(() => UserUncheckedCreateWithoutResultInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutResultInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutResultInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutResultInputSchema),z.lazy(() => UserUpdateWithoutResultInputSchema),z.lazy(() => UserUncheckedUpdateWithoutResultInputSchema) ]).optional(),
}).strict();

export const RaceUpdateOneWithoutResultsNestedInputSchema: z.ZodType<Prisma.RaceUpdateOneWithoutResultsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutResultsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutResultsInputSchema).optional(),
  upsert: z.lazy(() => RaceUpsertWithoutResultsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RaceUpdateToOneWithWhereWithoutResultsInputSchema),z.lazy(() => RaceUpdateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutResultsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SeriesCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutOrganizationInputSchema),z.lazy(() => FollowCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FollowCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutOrganizationInputSchema),z.lazy(() => LikeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => LikeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutOrganizationInputSchema),z.lazy(() => CommentCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CommentCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AddressCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutOrganizationInputSchema),z.lazy(() => AddressCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AddressCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SeriesUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutOrganizationInputSchema),z.lazy(() => FollowCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FollowCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutOrganizationInputSchema),z.lazy(() => LikeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => LikeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutOrganizationInputSchema),z.lazy(() => CommentCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CommentCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AddressUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutOrganizationInputSchema),z.lazy(() => AddressCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AddressCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const EventUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SeriesUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.FollowUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutOrganizationInputSchema),z.lazy(() => FollowCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FollowCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.LikeUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutOrganizationInputSchema),z.lazy(() => LikeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => LikeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CommentUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutOrganizationInputSchema),z.lazy(() => CommentCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CommentCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AddressUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.AddressUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutOrganizationInputSchema),z.lazy(() => AddressCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AddressCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AddressUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AddressUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AddressUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AddressUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AddressUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => AddressUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AddressScalarWhereInputSchema),z.lazy(() => AddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EventCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SeriesUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutOrganizationInputSchema),z.lazy(() => FollowCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FollowCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutOrganizationInputSchema),z.lazy(() => LikeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => LikeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutOrganizationInputSchema),z.lazy(() => CommentCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CommentCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AddressUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutOrganizationInputSchema),z.lazy(() => AddressCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AddressCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AddressUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AddressUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AddressUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AddressUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AddressUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => AddressUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AddressScalarWhereInputSchema),z.lazy(() => AddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventCreateWithoutVenueInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema),z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SeriesCreateNestedManyWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesCreateNestedManyWithoutVenuesInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesCreateWithoutVenuesInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.LikeCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutVenueInputSchema),z.lazy(() => LikeCreateWithoutVenueInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutVenueInputSchema),z.lazy(() => LikeCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.CommentCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutVenueInputSchema),z.lazy(() => CommentCreateWithoutVenueInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutVenueInputSchema),z.lazy(() => CommentCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AddressCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.AddressCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutVenueInputSchema),z.lazy(() => AddressCreateWithoutVenueInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutVenueInputSchema),z.lazy(() => AddressCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutVenueInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutVenueInputSchema),z.lazy(() => UserUncheckedCreateWithoutVenueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutVenueInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EventUncheckedCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventCreateWithoutVenueInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema),z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateNestedManyWithoutVenuesInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesCreateWithoutVenuesInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.LikeUncheckedCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutVenueInputSchema),z.lazy(() => LikeCreateWithoutVenueInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutVenueInputSchema),z.lazy(() => LikeCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.CommentUncheckedCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutVenueInputSchema),z.lazy(() => CommentCreateWithoutVenueInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutVenueInputSchema),z.lazy(() => CommentCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AddressUncheckedCreateNestedManyWithoutVenueInputSchema: z.ZodType<Prisma.AddressUncheckedCreateNestedManyWithoutVenueInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutVenueInputSchema),z.lazy(() => AddressCreateWithoutVenueInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutVenueInputSchema),z.lazy(() => AddressCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyVenueInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventCreateWithoutVenueInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema),z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SeriesUpdateManyWithoutVenuesNestedInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithoutVenuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesCreateWithoutVenuesInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutVenuesInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutVenuesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.LikeUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutVenueInputSchema),z.lazy(() => LikeCreateWithoutVenueInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutVenueInputSchema),z.lazy(() => LikeCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.CommentUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutVenueInputSchema),z.lazy(() => CommentCreateWithoutVenueInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutVenueInputSchema),z.lazy(() => CommentCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AddressUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.AddressUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutVenueInputSchema),z.lazy(() => AddressCreateWithoutVenueInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutVenueInputSchema),z.lazy(() => AddressCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AddressUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => AddressUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AddressUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => AddressUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AddressUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => AddressUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AddressScalarWhereInputSchema),z.lazy(() => AddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutVenueNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutVenueInputSchema),z.lazy(() => UserUncheckedCreateWithoutVenueInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutVenueInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutVenueInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutVenueInputSchema),z.lazy(() => UserUpdateWithoutVenueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutVenueInputSchema) ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventCreateWithoutVenueInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema),z.lazy(() => EventCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutVenuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesCreateWithoutVenuesInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutVenuesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutVenuesInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutVenuesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutVenueInputSchema),z.lazy(() => LikeCreateWithoutVenueInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutVenueInputSchema),z.lazy(() => LikeCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutVenueInputSchema),z.lazy(() => CommentCreateWithoutVenueInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutVenueInputSchema),z.lazy(() => CommentCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AddressUncheckedUpdateManyWithoutVenueNestedInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateManyWithoutVenueNestedInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutVenueInputSchema),z.lazy(() => AddressCreateWithoutVenueInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutVenueInputSchema),z.lazy(() => AddressCreateOrConnectWithoutVenueInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AddressUpsertWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => AddressUpsertWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyVenueInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AddressUpdateWithWhereUniqueWithoutVenueInputSchema),z.lazy(() => AddressUpdateWithWhereUniqueWithoutVenueInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AddressUpdateManyWithWhereWithoutVenueInputSchema),z.lazy(() => AddressUpdateManyWithWhereWithoutVenueInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AddressScalarWhereInputSchema),z.lazy(() => AddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueCreateNestedOneWithoutAddressesInputSchema: z.ZodType<Prisma.VenueCreateNestedOneWithoutAddressesInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutAddressesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutAddressesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutAddressesInputSchema).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutAddressesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutAddressesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAddressesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAddressesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAddressesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAddressInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAddressInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAddressInputSchema),z.lazy(() => UserUncheckedCreateWithoutAddressInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAddressInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const VenueUpdateOneWithoutAddressesNestedInputSchema: z.ZodType<Prisma.VenueUpdateOneWithoutAddressesNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutAddressesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutAddressesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutAddressesInputSchema).optional(),
  upsert: z.lazy(() => VenueUpsertWithoutAddressesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => VenueUpdateToOneWithWhereWithoutAddressesInputSchema),z.lazy(() => VenueUpdateWithoutAddressesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutAddressesInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutAddressesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutAddressesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAddressesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAddressesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAddressesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutAddressesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutAddressesInputSchema),z.lazy(() => OrganizationUpdateWithoutAddressesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAddressesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutAddressNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutAddressNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAddressInputSchema),z.lazy(() => UserUncheckedCreateWithoutAddressInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAddressInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAddressInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAddressInputSchema),z.lazy(() => UserUpdateWithoutAddressInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAddressInputSchema) ]).optional(),
}).strict();

export const EventCreateNestedOneWithoutCommentsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutCommentsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutCommentsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutCommentInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCommentInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCommentInputSchema),z.lazy(() => UserUncheckedCreateWithoutCommentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCommentInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const LikeCreateNestedManyWithoutCommentInputSchema: z.ZodType<Prisma.LikeCreateNestedManyWithoutCommentInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutCommentInputSchema),z.lazy(() => LikeCreateWithoutCommentInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutCommentInputSchema),z.lazy(() => LikeCreateOrConnectWithoutCommentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyCommentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceCreateNestedOneWithoutCommentsInputSchema: z.ZodType<Prisma.RaceCreateNestedOneWithoutCommentsInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCommentsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutCommentsInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedOneWithoutCommentsInputSchema: z.ZodType<Prisma.SeriesCreateNestedOneWithoutCommentsInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutCommentsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutCommentsInputSchema).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutCommentsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutCommentsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCommentsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCommentsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const VenueCreateNestedOneWithoutCommentsInputSchema: z.ZodType<Prisma.VenueCreateNestedOneWithoutCommentsInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutCommentsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutCommentsInputSchema).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional()
}).strict();

export const CompCreateNestedOneWithoutCommmentsInputSchema: z.ZodType<Prisma.CompCreateNestedOneWithoutCommmentsInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutCommmentsInputSchema),z.lazy(() => CompUncheckedCreateWithoutCommmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutCommmentsInputSchema).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional()
}).strict();

export const LikeUncheckedCreateNestedManyWithoutCommentInputSchema: z.ZodType<Prisma.LikeUncheckedCreateNestedManyWithoutCommentInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutCommentInputSchema),z.lazy(() => LikeCreateWithoutCommentInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutCommentInputSchema),z.lazy(() => LikeCreateOrConnectWithoutCommentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyCommentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateOneWithoutCommentsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutCommentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutCommentsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutCommentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutCommentsInputSchema),z.lazy(() => EventUpdateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCommentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCommentNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCommentNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCommentInputSchema),z.lazy(() => UserUncheckedCreateWithoutCommentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCommentInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCommentInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCommentInputSchema),z.lazy(() => UserUpdateWithoutCommentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCommentInputSchema) ]).optional(),
}).strict();

export const LikeUpdateManyWithoutCommentNestedInputSchema: z.ZodType<Prisma.LikeUpdateManyWithoutCommentNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutCommentInputSchema),z.lazy(() => LikeCreateWithoutCommentInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutCommentInputSchema),z.lazy(() => LikeCreateOrConnectWithoutCommentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutCommentInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutCommentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyCommentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutCommentInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutCommentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutCommentInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutCommentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUpdateOneWithoutCommentsNestedInputSchema: z.ZodType<Prisma.RaceUpdateOneWithoutCommentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCommentsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutCommentsInputSchema).optional(),
  upsert: z.lazy(() => RaceUpsertWithoutCommentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RaceUpdateToOneWithWhereWithoutCommentsInputSchema),z.lazy(() => RaceUpdateWithoutCommentsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCommentsInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateOneWithoutCommentsNestedInputSchema: z.ZodType<Prisma.SeriesUpdateOneWithoutCommentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutCommentsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutCommentsInputSchema).optional(),
  upsert: z.lazy(() => SeriesUpsertWithoutCommentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateToOneWithWhereWithoutCommentsInputSchema),z.lazy(() => SeriesUpdateWithoutCommentsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutCommentsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutCommentsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutCommentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCommentsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCommentsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutCommentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutCommentsInputSchema),z.lazy(() => OrganizationUpdateWithoutCommentsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCommentsInputSchema) ]).optional(),
}).strict();

export const VenueUpdateOneWithoutCommentsNestedInputSchema: z.ZodType<Prisma.VenueUpdateOneWithoutCommentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutCommentsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutCommentsInputSchema).optional(),
  upsert: z.lazy(() => VenueUpsertWithoutCommentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => VenueUpdateToOneWithWhereWithoutCommentsInputSchema),z.lazy(() => VenueUpdateWithoutCommentsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutCommentsInputSchema) ]).optional(),
}).strict();

export const CompUpdateOneWithoutCommmentsNestedInputSchema: z.ZodType<Prisma.CompUpdateOneWithoutCommmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutCommmentsInputSchema),z.lazy(() => CompUncheckedCreateWithoutCommmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutCommmentsInputSchema).optional(),
  upsert: z.lazy(() => CompUpsertWithoutCommmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompUpdateToOneWithWhereWithoutCommmentsInputSchema),z.lazy(() => CompUpdateWithoutCommmentsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutCommmentsInputSchema) ]).optional(),
}).strict();

export const LikeUncheckedUpdateManyWithoutCommentNestedInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutCommentNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutCommentInputSchema),z.lazy(() => LikeCreateWithoutCommentInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutCommentInputSchema),z.lazy(() => LikeCreateOrConnectWithoutCommentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutCommentInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutCommentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyCommentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutCommentInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutCommentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutCommentInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutCommentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedOneWithoutFollowsInputSchema: z.ZodType<Prisma.CompCreateNestedOneWithoutFollowsInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutFollowsInputSchema),z.lazy(() => CompUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutFollowsInputSchema).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutFollowsInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutFollowsInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutFollowsInputSchema),z.lazy(() => EventUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutFollowsInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutFollowsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutFollowsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFollowsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFollowsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RaceCreateNestedOneWithoutFollowsInputSchema: z.ZodType<Prisma.RaceCreateNestedOneWithoutFollowsInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutFollowsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutFollowsInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedOneWithoutFollowsInputSchema: z.ZodType<Prisma.SeriesCreateNestedOneWithoutFollowsInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutFollowsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutFollowsInputSchema).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutFollowInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFollowInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFollowInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const CompUpdateOneWithoutFollowsNestedInputSchema: z.ZodType<Prisma.CompUpdateOneWithoutFollowsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutFollowsInputSchema),z.lazy(() => CompUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutFollowsInputSchema).optional(),
  upsert: z.lazy(() => CompUpsertWithoutFollowsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompUpdateToOneWithWhereWithoutFollowsInputSchema),z.lazy(() => CompUpdateWithoutFollowsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutFollowsInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutFollowsNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutFollowsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutFollowsInputSchema),z.lazy(() => EventUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutFollowsInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutFollowsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutFollowsInputSchema),z.lazy(() => EventUpdateWithoutFollowsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFollowsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutFollowsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutFollowsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFollowsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFollowsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutFollowsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutFollowsInputSchema),z.lazy(() => OrganizationUpdateWithoutFollowsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFollowsInputSchema) ]).optional(),
}).strict();

export const RaceUpdateOneWithoutFollowsNestedInputSchema: z.ZodType<Prisma.RaceUpdateOneWithoutFollowsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutFollowsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutFollowsInputSchema).optional(),
  upsert: z.lazy(() => RaceUpsertWithoutFollowsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RaceUpdateToOneWithWhereWithoutFollowsInputSchema),z.lazy(() => RaceUpdateWithoutFollowsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutFollowsInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateOneWithoutFollowsNestedInputSchema: z.ZodType<Prisma.SeriesUpdateOneWithoutFollowsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutFollowsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutFollowsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutFollowsInputSchema).optional(),
  upsert: z.lazy(() => SeriesUpsertWithoutFollowsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateToOneWithWhereWithoutFollowsInputSchema),z.lazy(() => SeriesUpdateWithoutFollowsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutFollowsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutFollowNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutFollowNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFollowInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFollowInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFollowInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFollowInputSchema),z.lazy(() => UserUpdateWithoutFollowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFollowInputSchema) ]).optional(),
}).strict();

export const CompCreateNestedOneWithoutLikesInputSchema: z.ZodType<Prisma.CompCreateNestedOneWithoutLikesInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutLikesInputSchema),z.lazy(() => CompUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutLikesInputSchema).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional()
}).strict();

export const EventCreateNestedOneWithoutLikesInputSchema: z.ZodType<Prisma.EventCreateNestedOneWithoutLikesInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutLikesInputSchema),z.lazy(() => EventUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutLikesInputSchema).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutLikesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutLikesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLikesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutLikesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RaceCreateNestedOneWithoutLikesInputSchema: z.ZodType<Prisma.RaceCreateNestedOneWithoutLikesInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutLikesInputSchema),z.lazy(() => RaceUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutLikesInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedOneWithoutLikesInputSchema: z.ZodType<Prisma.SeriesCreateNestedOneWithoutLikesInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutLikesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutLikesInputSchema).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutLikeInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutLikeInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLikeInputSchema),z.lazy(() => UserUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const CommentCreateNestedOneWithoutLikesInputSchema: z.ZodType<Prisma.CommentCreateNestedOneWithoutLikesInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutLikesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CommentCreateOrConnectWithoutLikesInputSchema).optional(),
  connect: z.lazy(() => CommentWhereUniqueInputSchema).optional()
}).strict();

export const VenueCreateNestedOneWithoutLikesInputSchema: z.ZodType<Prisma.VenueCreateNestedOneWithoutLikesInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutLikesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutLikesInputSchema).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional()
}).strict();

export const CompUpdateOneWithoutLikesNestedInputSchema: z.ZodType<Prisma.CompUpdateOneWithoutLikesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutLikesInputSchema),z.lazy(() => CompUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CompCreateOrConnectWithoutLikesInputSchema).optional(),
  upsert: z.lazy(() => CompUpsertWithoutLikesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CompWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CompWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CompUpdateToOneWithWhereWithoutLikesInputSchema),z.lazy(() => CompUpdateWithoutLikesInputSchema),z.lazy(() => CompUncheckedUpdateWithoutLikesInputSchema) ]).optional(),
}).strict();

export const EventUpdateOneWithoutLikesNestedInputSchema: z.ZodType<Prisma.EventUpdateOneWithoutLikesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutLikesInputSchema),z.lazy(() => EventUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EventCreateOrConnectWithoutLikesInputSchema).optional(),
  upsert: z.lazy(() => EventUpsertWithoutLikesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EventUpdateToOneWithWhereWithoutLikesInputSchema),z.lazy(() => EventUpdateWithoutLikesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutLikesInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutLikesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutLikesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLikesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutLikesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutLikesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutLikesInputSchema),z.lazy(() => OrganizationUpdateWithoutLikesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLikesInputSchema) ]).optional(),
}).strict();

export const RaceUpdateOneWithoutLikesNestedInputSchema: z.ZodType<Prisma.RaceUpdateOneWithoutLikesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutLikesInputSchema),z.lazy(() => RaceUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutLikesInputSchema).optional(),
  upsert: z.lazy(() => RaceUpsertWithoutLikesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RaceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RaceUpdateToOneWithWhereWithoutLikesInputSchema),z.lazy(() => RaceUpdateWithoutLikesInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutLikesInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateOneWithoutLikesNestedInputSchema: z.ZodType<Prisma.SeriesUpdateOneWithoutLikesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutLikesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SeriesCreateOrConnectWithoutLikesInputSchema).optional(),
  upsert: z.lazy(() => SeriesUpsertWithoutLikesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SeriesWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SeriesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateToOneWithWhereWithoutLikesInputSchema),z.lazy(() => SeriesUpdateWithoutLikesInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutLikesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutLikeNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutLikeNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLikeInputSchema),z.lazy(() => UserUncheckedCreateWithoutLikeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLikeInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutLikeInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutLikeInputSchema),z.lazy(() => UserUpdateWithoutLikeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLikeInputSchema) ]).optional(),
}).strict();

export const CommentUpdateOneWithoutLikesNestedInputSchema: z.ZodType<Prisma.CommentUpdateOneWithoutLikesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutLikesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CommentCreateOrConnectWithoutLikesInputSchema).optional(),
  upsert: z.lazy(() => CommentUpsertWithoutLikesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CommentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CommentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CommentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CommentUpdateToOneWithWhereWithoutLikesInputSchema),z.lazy(() => CommentUpdateWithoutLikesInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutLikesInputSchema) ]).optional(),
}).strict();

export const VenueUpdateOneWithoutLikesNestedInputSchema: z.ZodType<Prisma.VenueUpdateOneWithoutLikesNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutLikesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutLikesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VenueCreateOrConnectWithoutLikesInputSchema).optional(),
  upsert: z.lazy(() => VenueUpsertWithoutLikesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => VenueWhereInputSchema) ]).optional(),
  connect: z.lazy(() => VenueWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => VenueUpdateToOneWithWhereWithoutLikesInputSchema),z.lazy(() => VenueUpdateWithoutLikesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutLikesInputSchema) ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const KeyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserSettingsCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserSettingsCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => UserSettingsWhereUniqueInputSchema).optional()
}).strict();

export const SeriesCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesCreateWithoutPublisherInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.EventCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventCreateWithoutPublisherInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.RaceCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceCreateWithoutPublisherInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.CompCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompCreateWithoutPublisherInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.ResultCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultCreateWithoutPublisherInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutOwnerInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateWithoutOwnerInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VenueCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.VenueCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueCreateWithoutPublisherInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VenueCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FollowCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutUserInputSchema),z.lazy(() => FollowCreateWithoutUserInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutUserInputSchema),z.lazy(() => FollowCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.LikeCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutUserInputSchema),z.lazy(() => LikeCreateWithoutUserInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutUserInputSchema),z.lazy(() => LikeCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.CommentCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutUserInputSchema),z.lazy(() => CommentCreateWithoutUserInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutUserInputSchema),z.lazy(() => CommentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AddressCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.AddressCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutPublisherInputSchema),z.lazy(() => AddressCreateWithoutPublisherInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => AddressCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const KeyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserSettingsCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => UserSettingsWhereUniqueInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesCreateWithoutPublisherInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.EventUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventCreateWithoutPublisherInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceCreateWithoutPublisherInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.CompUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompCreateWithoutPublisherInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultCreateWithoutPublisherInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutOwnerInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateWithoutOwnerInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VenueUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueCreateWithoutPublisherInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VenueCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FollowUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutUserInputSchema),z.lazy(() => FollowCreateWithoutUserInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutUserInputSchema),z.lazy(() => FollowCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.LikeUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutUserInputSchema),z.lazy(() => LikeCreateWithoutUserInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutUserInputSchema),z.lazy(() => LikeCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.CommentUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutUserInputSchema),z.lazy(() => CommentCreateWithoutUserInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutUserInputSchema),z.lazy(() => CommentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AddressUncheckedCreateNestedManyWithoutPublisherInputSchema: z.ZodType<Prisma.AddressUncheckedCreateNestedManyWithoutPublisherInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutPublisherInputSchema),z.lazy(() => AddressCreateWithoutPublisherInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => AddressCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyPublisherInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const KeyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.KeyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserSettingsUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.UserSettingsUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserSettingsCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => UserSettingsUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserSettingsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserSettingsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserSettingsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserSettingsUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => UserSettingsUpdateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const SeriesUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesCreateWithoutPublisherInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.EventUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventCreateWithoutPublisherInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.RaceUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceCreateWithoutPublisherInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.CompUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompCreateWithoutPublisherInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.ResultUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultCreateWithoutPublisherInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutOwnerNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateWithoutOwnerInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnerInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.VenueUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueCreateWithoutPublisherInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VenueUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => VenueUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VenueCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VenueUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => VenueUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VenueUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => VenueUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FollowUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutUserInputSchema),z.lazy(() => FollowCreateWithoutUserInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutUserInputSchema),z.lazy(() => FollowCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.LikeUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutUserInputSchema),z.lazy(() => LikeCreateWithoutUserInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutUserInputSchema),z.lazy(() => LikeCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.CommentUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutUserInputSchema),z.lazy(() => CommentCreateWithoutUserInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutUserInputSchema),z.lazy(() => CommentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AddressUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.AddressUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutPublisherInputSchema),z.lazy(() => AddressCreateWithoutPublisherInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => AddressCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AddressUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => AddressUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AddressUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => AddressUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AddressUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => AddressUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AddressScalarWhereInputSchema),z.lazy(() => AddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const KeyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.UserSettingsUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserSettingsCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => UserSettingsUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserSettingsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserSettingsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserSettingsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserSettingsUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => UserSettingsUpdateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesCreateWithoutPublisherInputSchema).array(),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => SeriesCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SeriesCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SeriesWhereUniqueInputSchema),z.lazy(() => SeriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SeriesUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => SeriesUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventCreateWithoutPublisherInputSchema).array(),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => EventCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => EventUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventWhereUniqueInputSchema),z.lazy(() => EventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => EventUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => EventUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceCreateWithoutPublisherInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => RaceCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RaceCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CompUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompCreateWithoutPublisherInputSchema).array(),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => CompCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CompUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => CompUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CompCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CompWhereUniqueInputSchema),z.lazy(() => CompWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CompUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => CompUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CompUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => CompUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultCreateWithoutPublisherInputSchema).array(),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => ResultCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ResultUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => ResultUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ResultCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ResultWhereUniqueInputSchema),z.lazy(() => ResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ResultUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => ResultUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ResultUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => ResultUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateWithoutOwnerInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnerInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueCreateWithoutPublisherInputSchema).array(),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => VenueCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VenueUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => VenueUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => VenueCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VenueWhereUniqueInputSchema),z.lazy(() => VenueWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VenueUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => VenueUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VenueUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => VenueUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FollowCreateWithoutUserInputSchema),z.lazy(() => FollowCreateWithoutUserInputSchema).array(),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FollowCreateOrConnectWithoutUserInputSchema),z.lazy(() => FollowCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FollowUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FollowUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FollowCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FollowWhereUniqueInputSchema),z.lazy(() => FollowWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FollowUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FollowUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FollowUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FollowUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LikeUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => LikeCreateWithoutUserInputSchema),z.lazy(() => LikeCreateWithoutUserInputSchema).array(),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LikeCreateOrConnectWithoutUserInputSchema),z.lazy(() => LikeCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LikeUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LikeUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LikeCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LikeWhereUniqueInputSchema),z.lazy(() => LikeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LikeUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LikeUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LikeUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => LikeUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutUserInputSchema),z.lazy(() => CommentCreateWithoutUserInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutUserInputSchema),z.lazy(() => CommentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateManyWithoutPublisherNestedInput> = z.object({
  create: z.union([ z.lazy(() => AddressCreateWithoutPublisherInputSchema),z.lazy(() => AddressCreateWithoutPublisherInputSchema).array(),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AddressCreateOrConnectWithoutPublisherInputSchema),z.lazy(() => AddressCreateOrConnectWithoutPublisherInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AddressUpsertWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => AddressUpsertWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AddressCreateManyPublisherInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AddressWhereUniqueInputSchema),z.lazy(() => AddressWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AddressUpdateWithWhereUniqueWithoutPublisherInputSchema),z.lazy(() => AddressUpdateWithWhereUniqueWithoutPublisherInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AddressUpdateManyWithWhereWithoutPublisherInputSchema),z.lazy(() => AddressUpdateManyWithWhereWithoutPublisherInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AddressScalarWhereInputSchema),z.lazy(() => AddressScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserSettingsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserSettingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserSettingsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutUserSettingsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutUserSettingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserSettingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserSettingsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserSettingsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserSettingsInputSchema),z.lazy(() => UserUpdateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserSettingsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuth_sessionInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_sessionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const BigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BigIntFieldUpdateOperationsInput> = z.object({
  set: z.bigint().optional(),
  increment: z.bigint().optional(),
  decrement: z.bigint().optional(),
  multiply: z.bigint().optional(),
  divide: z.bigint().optional()
}).strict();

export const UserUpdateOneRequiredWithoutAuth_sessionNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAuth_sessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_sessionInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuth_sessionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuth_sessionInputSchema),z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuth_keyInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_keyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAuth_keyNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAuth_keyNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_keyInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuth_keyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuth_keyInputSchema),z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValue.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: InputJsonValue.optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBigIntFilterSchema: z.ZodType<Prisma.NestedBigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const NestedBigIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const EventCreateWithoutSeriesInputSchema: z.ZodType<Prisma.EventCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const EventCreateManySeriesInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManySeriesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManySeriesInputSchema),z.lazy(() => EventCreateManySeriesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const UserCreateWithoutSeriesInputSchema: z.ZodType<Prisma.UserCreateWithoutSeriesInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const FollowCreateWithoutSeriesInputSchema: z.ZodType<Prisma.FollowCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowsInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const FollowUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.FollowUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FollowCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.FollowCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FollowCreateWithoutSeriesInputSchema),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const FollowCreateManySeriesInputEnvelopeSchema: z.ZodType<Prisma.FollowCreateManySeriesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FollowCreateManySeriesInputSchema),z.lazy(() => FollowCreateManySeriesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LikeCreateWithoutSeriesInputSchema: z.ZodType<Prisma.LikeCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikesInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikesInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikesInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  Comment: z.lazy(() => CommentCreateNestedOneWithoutLikesInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.LikeUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.LikeCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LikeCreateWithoutSeriesInputSchema),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const LikeCreateManySeriesInputEnvelopeSchema: z.ZodType<Prisma.LikeCreateManySeriesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LikeCreateManySeriesInputSchema),z.lazy(() => LikeCreateManySeriesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CommentCreateWithoutSeriesInputSchema: z.ZodType<Prisma.CommentCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutCommentInputSchema),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCommentInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutCommentsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutCommentsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutCommentsInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutCommmentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCommentInputSchema).optional()
}).strict();

export const CommentCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutSeriesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const CommentCreateManySeriesInputEnvelopeSchema: z.ZodType<Prisma.CommentCreateManySeriesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CommentCreateManySeriesInputSchema),z.lazy(() => CommentCreateManySeriesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const VenueCreateWithoutSeriesInputSchema: z.ZodType<Prisma.VenueCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutVenueInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutSeriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutSeriesInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutSeriesInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const EventUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutSeriesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const EventScalarWhereInputSchema: z.ZodType<Prisma.EventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventScalarWhereInputSchema),z.lazy(() => EventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventeid: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  uniqueIdString: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventwebsite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  public: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  fileInfo: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrganizationUpsertWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutSeriesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutSeriesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutSeriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutSeriesInputSchema: z.ZodType<Prisma.UserUpsertWithoutSeriesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSeriesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSeriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const UserUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.UserUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const FollowUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.FollowUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FollowUpdateWithoutSeriesInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => FollowCreateWithoutSeriesInputSchema),z.lazy(() => FollowUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const FollowUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.FollowUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateWithoutSeriesInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const FollowUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.FollowUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => FollowScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateManyMutationInputSchema),z.lazy(() => FollowUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const FollowScalarWhereInputSchema: z.ZodType<Prisma.FollowScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FollowScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FollowScalarWhereInputSchema),z.lazy(() => FollowScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LikeUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.LikeUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LikeUpdateWithoutSeriesInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => LikeCreateWithoutSeriesInputSchema),z.lazy(() => LikeUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const LikeUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.LikeUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateWithoutSeriesInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const LikeUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.LikeUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => LikeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateManyMutationInputSchema),z.lazy(() => LikeUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const LikeScalarWhereInputSchema: z.ZodType<Prisma.LikeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LikeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LikeScalarWhereInputSchema),z.lazy(() => LikeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  itemId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  eventCommentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  commentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const CommentUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.CommentUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CommentUpdateWithoutSeriesInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutSeriesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const CommentUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.CommentUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateWithoutSeriesInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const CommentUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.CommentUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => CommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateManyMutationInputSchema),z.lazy(() => CommentUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const CommentScalarWhereInputSchema: z.ZodType<Prisma.CommentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CommentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ref: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seriesId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VenueUpsertWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUpsertWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => VenueUpdateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutSeriesInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutSeriesInputSchema) ]),
}).strict();

export const VenueUpdateWithWhereUniqueWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUpdateWithWhereUniqueWithoutSeriesInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => VenueUpdateWithoutSeriesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutSeriesInputSchema) ]),
}).strict();

export const VenueUpdateManyWithWhereWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUpdateManyWithWhereWithoutSeriesInput> = z.object({
  where: z.lazy(() => VenueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => VenueUpdateManyMutationInputSchema),z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesInputSchema) ]),
}).strict();

export const VenueScalarWhereInputSchema: z.ZodType<Prisma.VenueScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VenueScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VenueScalarWhereInputSchema),z.lazy(() => VenueScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  burgee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrganizationCreateWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const UserCreateWithoutEventInputSchema: z.ZodType<Prisma.UserCreateWithoutEventInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEventInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEventInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const SeriesCreateWithoutEventsInputSchema: z.ZodType<Prisma.SeriesCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const VenueCreateWithoutEventsInputSchema: z.ZodType<Prisma.VenueCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutVenueInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const RaceCreateWithoutEventInputSchema: z.ZodType<Prisma.RaceCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const RaceCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.RaceCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RaceCreateManyEventInputSchema),z.lazy(() => RaceCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ResultCreateWithoutEventInputSchema: z.ZodType<Prisma.ResultCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutResultsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutResultInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const ResultUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.ResultUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.ResultCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const ResultCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.ResultCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ResultCreateManyEventInputSchema),z.lazy(() => ResultCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FollowCreateWithoutEventInputSchema: z.ZodType<Prisma.FollowCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowsInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const FollowUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.FollowUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FollowCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.FollowCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FollowCreateWithoutEventInputSchema),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const FollowCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.FollowCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FollowCreateManyEventInputSchema),z.lazy(() => FollowCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LikeCreateWithoutEventInputSchema: z.ZodType<Prisma.LikeCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikesInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikesInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikesInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  Comment: z.lazy(() => CommentCreateNestedOneWithoutLikesInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.LikeUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.LikeCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LikeCreateWithoutEventInputSchema),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const LikeCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.LikeCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LikeCreateManyEventInputSchema),z.lazy(() => LikeCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CompCreateWithoutEventsInputSchema: z.ZodType<Prisma.CompCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutEventsInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutEventsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutEventsInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutEventsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const CommentCreateWithoutEventInputSchema: z.ZodType<Prisma.CommentCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutCommentInputSchema),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCommentInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutCommentsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutCommentsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutCommentsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutCommentsInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutCommmentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCommentInputSchema).optional()
}).strict();

export const CommentCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutEventInputSchema),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const CommentCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.CommentCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CommentCreateManyEventInputSchema),z.lazy(() => CommentCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutEventsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutEventInputSchema: z.ZodType<Prisma.UserUpsertWithoutEventInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEventInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEventInputSchema),z.lazy(() => UserUncheckedCreateWithoutEventInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutEventInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutEventInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const UserUpdateWithoutEventInputSchema: z.ZodType<Prisma.UserUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const SeriesUpsertWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => SeriesUpdateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const SeriesUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => SeriesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutEventsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const SeriesUpdateWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const VenueUpsertWithoutEventsInputSchema: z.ZodType<Prisma.VenueUpsertWithoutEventsInput> = z.object({
  update: z.union([ z.lazy(() => VenueUpdateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutEventsInputSchema) ]),
  where: z.lazy(() => VenueWhereInputSchema).optional()
}).strict();

export const VenueUpdateToOneWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.VenueUpdateToOneWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => VenueWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => VenueUpdateWithoutEventsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const VenueUpdateWithoutEventsInputSchema: z.ZodType<Prisma.VenueUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutVenueNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const RaceUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.RaceUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RaceUpdateWithoutEventInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutEventInputSchema),z.lazy(() => RaceUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const RaceUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.RaceUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateWithoutEventInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const RaceUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.RaceUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => RaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateManyMutationInputSchema),z.lazy(() => RaceUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const RaceScalarWhereInputSchema: z.ZodType<Prisma.RaceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  uniqueRaceString: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  starts: z.lazy(() => JsonNullableFilterSchema).optional(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailed: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultColumns: z.lazy(() => JsonNullableFilterSchema).optional(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ResultUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.ResultUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ResultUpdateWithoutEventInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => ResultCreateWithoutEventInputSchema),z.lazy(() => ResultUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const ResultUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.ResultUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateWithoutEventInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const ResultUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.ResultUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => ResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateManyMutationInputSchema),z.lazy(() => ResultUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const ResultScalarWhereInputSchema: z.ZodType<Prisma.ResultScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResultScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResultScalarWhereInputSchema),z.lazy(() => ResultScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  points: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  discard: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finish: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  corrected: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elasped: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  elapsedWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ratingWin: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  supposedRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rrset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  compId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const FollowUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.FollowUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FollowUpdateWithoutEventInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => FollowCreateWithoutEventInputSchema),z.lazy(() => FollowUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const FollowUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.FollowUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateWithoutEventInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const FollowUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.FollowUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => FollowScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateManyMutationInputSchema),z.lazy(() => FollowUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const LikeUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.LikeUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LikeUpdateWithoutEventInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => LikeCreateWithoutEventInputSchema),z.lazy(() => LikeUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const LikeUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.LikeUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateWithoutEventInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const LikeUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.LikeUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => LikeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateManyMutationInputSchema),z.lazy(() => LikeUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const CompUpsertWithWhereUniqueWithoutEventsInputSchema: z.ZodType<Prisma.CompUpsertWithWhereUniqueWithoutEventsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CompUpdateWithoutEventsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutEventsInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutEventsInputSchema),z.lazy(() => CompUncheckedCreateWithoutEventsInputSchema) ]),
}).strict();

export const CompUpdateWithWhereUniqueWithoutEventsInputSchema: z.ZodType<Prisma.CompUpdateWithWhereUniqueWithoutEventsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CompUpdateWithoutEventsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutEventsInputSchema) ]),
}).strict();

export const CompUpdateManyWithWhereWithoutEventsInputSchema: z.ZodType<Prisma.CompUpdateManyWithWhereWithoutEventsInput> = z.object({
  where: z.lazy(() => CompScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CompUpdateManyMutationInputSchema),z.lazy(() => CompUncheckedUpdateManyWithoutEventsInputSchema) ]),
}).strict();

export const CompScalarWhereInputSchema: z.ZodType<Prisma.CompScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CompScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CompScalarWhereInputSchema),z.lazy(() => CompScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  compId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  uniqueCompId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  raceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  club: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  boat: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skipper: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sailno: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fleet: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  division: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rank: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nett: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  total: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const CommentUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.CommentUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CommentUpdateWithoutEventInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutEventInputSchema),z.lazy(() => CommentUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const CommentUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.CommentUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateWithoutEventInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const CommentUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.CommentUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => CommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateManyMutationInputSchema),z.lazy(() => CommentUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const EventCreateWithoutRacesInputSchema: z.ZodType<Prisma.EventCreateWithoutRacesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutRacesInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutRacesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutRacesInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutRacesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutRacesInputSchema),z.lazy(() => EventUncheckedCreateWithoutRacesInputSchema) ]),
}).strict();

export const UserCreateWithoutRaceInputSchema: z.ZodType<Prisma.UserCreateWithoutRaceInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const ResultCreateWithoutRaceInputSchema: z.ZodType<Prisma.ResultCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutResultsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutResultsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutResultInputSchema).optional()
}).strict();

export const ResultUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.ResultUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.ResultCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const ResultCreateManyRaceInputEnvelopeSchema: z.ZodType<Prisma.ResultCreateManyRaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ResultCreateManyRaceInputSchema),z.lazy(() => ResultCreateManyRaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FollowCreateWithoutRaceInputSchema: z.ZodType<Prisma.FollowCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const FollowUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.FollowUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FollowCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.FollowCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FollowCreateWithoutRaceInputSchema),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const FollowCreateManyRaceInputEnvelopeSchema: z.ZodType<Prisma.FollowCreateManyRaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FollowCreateManyRaceInputSchema),z.lazy(() => FollowCreateManyRaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LikeCreateWithoutRaceInputSchema: z.ZodType<Prisma.LikeCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikesInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikesInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikesInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  Comment: z.lazy(() => CommentCreateNestedOneWithoutLikesInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.LikeUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.LikeCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LikeCreateWithoutRaceInputSchema),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const LikeCreateManyRaceInputEnvelopeSchema: z.ZodType<Prisma.LikeCreateManyRaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LikeCreateManyRaceInputSchema),z.lazy(() => LikeCreateManyRaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CompCreateWithoutRacesInputSchema: z.ZodType<Prisma.CompCreateWithoutRacesInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentCreateNestedManyWithoutCompInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutRacesInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutRacesInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutCompInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutRacesInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutRacesInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema) ]),
}).strict();

export const CommentCreateWithoutRaceInputSchema: z.ZodType<Prisma.CommentCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutCommentInputSchema),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCommentInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutCommentsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutCommentsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutCommentsInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutCommmentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCommentInputSchema).optional()
}).strict();

export const CommentCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutRaceInputSchema),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const CommentCreateManyRaceInputEnvelopeSchema: z.ZodType<Prisma.CommentCreateManyRaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CommentCreateManyRaceInputSchema),z.lazy(() => CommentCreateManyRaceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventUpsertWithoutRacesInputSchema: z.ZodType<Prisma.EventUpsertWithoutRacesInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutRacesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutRacesInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutRacesInputSchema),z.lazy(() => EventUncheckedCreateWithoutRacesInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutRacesInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutRacesInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutRacesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutRacesInputSchema) ]),
}).strict();

export const EventUpdateWithoutRacesInputSchema: z.ZodType<Prisma.EventUpdateWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutRacesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutRaceInputSchema: z.ZodType<Prisma.UserUpsertWithoutRaceInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutRaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRaceInputSchema),z.lazy(() => UserUncheckedCreateWithoutRaceInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutRaceInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const UserUpdateWithoutRaceInputSchema: z.ZodType<Prisma.UserUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const ResultUpsertWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.ResultUpsertWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ResultUpdateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => ResultCreateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const ResultUpdateWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.ResultUpdateWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateWithoutRaceInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const ResultUpdateManyWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.ResultUpdateManyWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => ResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateManyMutationInputSchema),z.lazy(() => ResultUncheckedUpdateManyWithoutRaceInputSchema) ]),
}).strict();

export const FollowUpsertWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.FollowUpsertWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FollowUpdateWithoutRaceInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => FollowCreateWithoutRaceInputSchema),z.lazy(() => FollowUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const FollowUpdateWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.FollowUpdateWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateWithoutRaceInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const FollowUpdateManyWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.FollowUpdateManyWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => FollowScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateManyMutationInputSchema),z.lazy(() => FollowUncheckedUpdateManyWithoutRaceInputSchema) ]),
}).strict();

export const LikeUpsertWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.LikeUpsertWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LikeUpdateWithoutRaceInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => LikeCreateWithoutRaceInputSchema),z.lazy(() => LikeUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const LikeUpdateWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.LikeUpdateWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateWithoutRaceInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const LikeUpdateManyWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.LikeUpdateManyWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => LikeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateManyMutationInputSchema),z.lazy(() => LikeUncheckedUpdateManyWithoutRaceInputSchema) ]),
}).strict();

export const CompUpsertWithWhereUniqueWithoutRacesInputSchema: z.ZodType<Prisma.CompUpsertWithWhereUniqueWithoutRacesInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CompUpdateWithoutRacesInputSchema),z.lazy(() => CompUncheckedUpdateWithoutRacesInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutRacesInputSchema),z.lazy(() => CompUncheckedCreateWithoutRacesInputSchema) ]),
}).strict();

export const CompUpdateWithWhereUniqueWithoutRacesInputSchema: z.ZodType<Prisma.CompUpdateWithWhereUniqueWithoutRacesInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CompUpdateWithoutRacesInputSchema),z.lazy(() => CompUncheckedUpdateWithoutRacesInputSchema) ]),
}).strict();

export const CompUpdateManyWithWhereWithoutRacesInputSchema: z.ZodType<Prisma.CompUpdateManyWithWhereWithoutRacesInput> = z.object({
  where: z.lazy(() => CompScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CompUpdateManyMutationInputSchema),z.lazy(() => CompUncheckedUpdateManyWithoutRacesInputSchema) ]),
}).strict();

export const CommentUpsertWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.CommentUpsertWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CommentUpdateWithoutRaceInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutRaceInputSchema),z.lazy(() => CommentUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const CommentUpdateWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.CommentUpdateWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateWithoutRaceInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const CommentUpdateManyWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.CommentUpdateManyWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => CommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateManyMutationInputSchema),z.lazy(() => CommentUncheckedUpdateManyWithoutRaceInputSchema) ]),
}).strict();

export const UserCreateWithoutCompInputSchema: z.ZodType<Prisma.UserCreateWithoutCompInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCompInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCompInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const EventCreateWithoutCompsInputSchema: z.ZodType<Prisma.EventCreateWithoutCompsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutCompsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutCompsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutCompsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutCompsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema) ]),
}).strict();

export const ResultCreateWithoutCompInputSchema: z.ZodType<Prisma.ResultCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutResultsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutResultInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const ResultUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.ResultUncheckedCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.ResultCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const ResultCreateManyCompInputEnvelopeSchema: z.ZodType<Prisma.ResultCreateManyCompInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ResultCreateManyCompInputSchema),z.lazy(() => ResultCreateManyCompInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FollowCreateWithoutCompInputSchema: z.ZodType<Prisma.FollowCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowsInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const FollowUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.FollowUncheckedCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FollowCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.FollowCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FollowCreateWithoutCompInputSchema),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const FollowCreateManyCompInputEnvelopeSchema: z.ZodType<Prisma.FollowCreateManyCompInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FollowCreateManyCompInputSchema),z.lazy(() => FollowCreateManyCompInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LikeCreateWithoutCompInputSchema: z.ZodType<Prisma.LikeCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikesInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikesInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikesInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  Comment: z.lazy(() => CommentCreateNestedOneWithoutLikesInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.LikeUncheckedCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.LikeCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LikeCreateWithoutCompInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const LikeCreateManyCompInputEnvelopeSchema: z.ZodType<Prisma.LikeCreateManyCompInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LikeCreateManyCompInputSchema),z.lazy(() => LikeCreateManyCompInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CommentCreateWithoutCompInputSchema: z.ZodType<Prisma.CommentCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutCommentInputSchema),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCommentInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutCommentsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutCommentsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutCommentsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutCommentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateWithoutCompInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutCompInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCommentInputSchema).optional()
}).strict();

export const CommentCreateOrConnectWithoutCompInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutCompInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutCompInputSchema),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const CommentCreateManyCompInputEnvelopeSchema: z.ZodType<Prisma.CommentCreateManyCompInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CommentCreateManyCompInputSchema),z.lazy(() => CommentCreateManyCompInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RaceCreateWithoutCompsInputSchema: z.ZodType<Prisma.RaceCreateWithoutCompsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutCompsInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutCompsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutCompsInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutCompsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema) ]),
}).strict();

export const UserUpsertWithoutCompInputSchema: z.ZodType<Prisma.UserUpsertWithoutCompInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCompInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCompInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCompInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCompInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const UserUpdateWithoutCompInputSchema: z.ZodType<Prisma.UserUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const EventUpsertWithWhereUniqueWithoutCompsInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutCompsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutCompsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCompsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutCompsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCompsInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutCompsInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutCompsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutCompsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCompsInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutCompsInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutCompsInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutCompsInputSchema) ]),
}).strict();

export const ResultUpsertWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.ResultUpsertWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ResultUpdateWithoutCompInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => ResultCreateWithoutCompInputSchema),z.lazy(() => ResultUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const ResultUpdateWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.ResultUpdateWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateWithoutCompInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const ResultUpdateManyWithWhereWithoutCompInputSchema: z.ZodType<Prisma.ResultUpdateManyWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => ResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateManyMutationInputSchema),z.lazy(() => ResultUncheckedUpdateManyWithoutCompInputSchema) ]),
}).strict();

export const FollowUpsertWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.FollowUpsertWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FollowUpdateWithoutCompInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => FollowCreateWithoutCompInputSchema),z.lazy(() => FollowUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const FollowUpdateWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.FollowUpdateWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateWithoutCompInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const FollowUpdateManyWithWhereWithoutCompInputSchema: z.ZodType<Prisma.FollowUpdateManyWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => FollowScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateManyMutationInputSchema),z.lazy(() => FollowUncheckedUpdateManyWithoutCompInputSchema) ]),
}).strict();

export const LikeUpsertWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.LikeUpsertWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LikeUpdateWithoutCompInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => LikeCreateWithoutCompInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const LikeUpdateWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.LikeUpdateWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateWithoutCompInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const LikeUpdateManyWithWhereWithoutCompInputSchema: z.ZodType<Prisma.LikeUpdateManyWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => LikeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateManyMutationInputSchema),z.lazy(() => LikeUncheckedUpdateManyWithoutCompInputSchema) ]),
}).strict();

export const CommentUpsertWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.CommentUpsertWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CommentUpdateWithoutCompInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutCompInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutCompInputSchema),z.lazy(() => CommentUncheckedCreateWithoutCompInputSchema) ]),
}).strict();

export const CommentUpdateWithWhereUniqueWithoutCompInputSchema: z.ZodType<Prisma.CommentUpdateWithWhereUniqueWithoutCompInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateWithoutCompInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutCompInputSchema) ]),
}).strict();

export const CommentUpdateManyWithWhereWithoutCompInputSchema: z.ZodType<Prisma.CommentUpdateManyWithWhereWithoutCompInput> = z.object({
  where: z.lazy(() => CommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateManyMutationInputSchema),z.lazy(() => CommentUncheckedUpdateManyWithoutCompInputSchema) ]),
}).strict();

export const RaceUpsertWithWhereUniqueWithoutCompsInputSchema: z.ZodType<Prisma.RaceUpsertWithWhereUniqueWithoutCompsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RaceUpdateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCompsInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCompsInputSchema) ]),
}).strict();

export const RaceUpdateWithWhereUniqueWithoutCompsInputSchema: z.ZodType<Prisma.RaceUpdateWithWhereUniqueWithoutCompsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateWithoutCompsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCompsInputSchema) ]),
}).strict();

export const RaceUpdateManyWithWhereWithoutCompsInputSchema: z.ZodType<Prisma.RaceUpdateManyWithWhereWithoutCompsInput> = z.object({
  where: z.lazy(() => RaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateManyMutationInputSchema),z.lazy(() => RaceUncheckedUpdateManyWithoutCompsInputSchema) ]),
}).strict();

export const CompCreateWithoutResultsInputSchema: z.ZodType<Prisma.CompCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutResultsInputSchema),z.lazy(() => CompUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const EventCreateWithoutResultsInputSchema: z.ZodType<Prisma.EventCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutResultsInputSchema),z.lazy(() => EventUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const UserCreateWithoutResultInputSchema: z.ZodType<Prisma.UserCreateWithoutResultInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutResultInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutResultInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutResultInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutResultInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutResultInputSchema),z.lazy(() => UserUncheckedCreateWithoutResultInputSchema) ]),
}).strict();

export const RaceCreateWithoutResultsInputSchema: z.ZodType<Prisma.RaceCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutResultsInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutResultsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutResultsInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutResultsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutResultsInputSchema) ]),
}).strict();

export const CompUpsertWithoutResultsInputSchema: z.ZodType<Prisma.CompUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => CompUpdateWithoutResultsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutResultsInputSchema),z.lazy(() => CompUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const CompUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.CompUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => CompWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompUpdateWithoutResultsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const CompUpdateWithoutResultsInputSchema: z.ZodType<Prisma.CompUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutResultsInputSchema: z.ZodType<Prisma.EventUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutResultsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutResultsInputSchema),z.lazy(() => EventUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutResultsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const EventUpdateWithoutResultsInputSchema: z.ZodType<Prisma.EventUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutResultInputSchema: z.ZodType<Prisma.UserUpsertWithoutResultInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutResultInputSchema),z.lazy(() => UserUncheckedUpdateWithoutResultInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutResultInputSchema),z.lazy(() => UserUncheckedCreateWithoutResultInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutResultInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutResultInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutResultInputSchema),z.lazy(() => UserUncheckedUpdateWithoutResultInputSchema) ]),
}).strict();

export const UserUpdateWithoutResultInputSchema: z.ZodType<Prisma.UserUpdateWithoutResultInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutResultInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutResultInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const RaceUpsertWithoutResultsInputSchema: z.ZodType<Prisma.RaceUpsertWithoutResultsInput> = z.object({
  update: z.union([ z.lazy(() => RaceUpdateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutResultsInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutResultsInputSchema) ]),
  where: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const RaceUpdateToOneWithWhereWithoutResultsInputSchema: z.ZodType<Prisma.RaceUpdateToOneWithWhereWithoutResultsInput> = z.object({
  where: z.lazy(() => RaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RaceUpdateWithoutResultsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutResultsInputSchema) ]),
}).strict();

export const RaceUpdateWithoutResultsInputSchema: z.ZodType<Prisma.RaceUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutResultsInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutResultsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const EventCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.EventCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const EventCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyOrganizationInputSchema),z.lazy(() => EventCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SeriesCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const SeriesCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.SeriesCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SeriesCreateManyOrganizationInputSchema),z.lazy(() => SeriesCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FollowCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowsInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutFollowInputSchema)
}).strict();

export const FollowUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FollowCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FollowCreateWithoutOrganizationInputSchema),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const FollowCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.FollowCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FollowCreateManyOrganizationInputSchema),z.lazy(() => FollowCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LikeCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikesInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikesInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikesInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikesInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  Comment: z.lazy(() => CommentCreateNestedOneWithoutLikesInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LikeCreateWithoutOrganizationInputSchema),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const LikeCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.LikeCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LikeCreateManyOrganizationInputSchema),z.lazy(() => LikeCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CommentCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutCommentInputSchema),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCommentInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutCommentsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutCommentsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutCommentsInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutCommmentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCommentInputSchema).optional()
}).strict();

export const CommentCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutOrganizationInputSchema),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CommentCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.CommentCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CommentCreateManyOrganizationInputSchema),z.lazy(() => CommentCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AddressCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutAddressesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutAddressInputSchema).optional()
}).strict();

export const AddressUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable()
}).strict();

export const AddressCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AddressCreateWithoutOrganizationInputSchema),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const AddressCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.AddressCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AddressCreateManyOrganizationInputSchema),z.lazy(() => AddressCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpsertWithoutOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const EventUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutOrganizationInputSchema),z.lazy(() => EventUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const SeriesUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SeriesUpdateWithoutOrganizationInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutOrganizationInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const SeriesUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutOrganizationInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const SeriesUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => SeriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateManyMutationInputSchema),z.lazy(() => SeriesUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const SeriesScalarWhereInputSchema: z.ZodType<Prisma.SeriesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SeriesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SeriesScalarWhereInputSchema),z.lazy(() => SeriesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rest: z.lazy(() => JsonNullableFilterSchema).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const FollowUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FollowUpdateWithoutOrganizationInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => FollowCreateWithoutOrganizationInputSchema),z.lazy(() => FollowUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const FollowUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateWithoutOrganizationInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const FollowUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FollowScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateManyMutationInputSchema),z.lazy(() => FollowUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const LikeUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LikeUpdateWithoutOrganizationInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => LikeCreateWithoutOrganizationInputSchema),z.lazy(() => LikeUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const LikeUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateWithoutOrganizationInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const LikeUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => LikeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateManyMutationInputSchema),z.lazy(() => LikeUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const CommentUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CommentUpdateWithoutOrganizationInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutOrganizationInputSchema),z.lazy(() => CommentUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CommentUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateWithoutOrganizationInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const CommentUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateManyMutationInputSchema),z.lazy(() => CommentUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const AddressUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AddressUpdateWithoutOrganizationInputSchema),z.lazy(() => AddressUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => AddressCreateWithoutOrganizationInputSchema),z.lazy(() => AddressUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const AddressUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AddressUpdateWithoutOrganizationInputSchema),z.lazy(() => AddressUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const AddressUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AddressScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AddressUpdateManyMutationInputSchema),z.lazy(() => AddressUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const AddressScalarWhereInputSchema: z.ZodType<Prisma.AddressScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AddressScalarWhereInputSchema),z.lazy(() => AddressScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AddressScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AddressScalarWhereInputSchema),z.lazy(() => AddressScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  street: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  venueId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publisherId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const EventCreateWithoutVenueInputSchema: z.ZodType<Prisma.EventCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutVenueInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutVenueInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutVenueInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const EventCreateManyVenueInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyVenueInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyVenueInputSchema),z.lazy(() => EventCreateManyVenueInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SeriesCreateWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesCreateWithoutVenuesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutVenuesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutVenuesInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema) ]),
}).strict();

export const LikeCreateWithoutVenueInputSchema: z.ZodType<Prisma.LikeCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikesInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikesInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikesInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikesInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  Comment: z.lazy(() => CommentCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateWithoutVenueInputSchema: z.ZodType<Prisma.LikeUncheckedCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable()
}).strict();

export const LikeCreateOrConnectWithoutVenueInputSchema: z.ZodType<Prisma.LikeCreateOrConnectWithoutVenueInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LikeCreateWithoutVenueInputSchema),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const LikeCreateManyVenueInputEnvelopeSchema: z.ZodType<Prisma.LikeCreateManyVenueInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LikeCreateManyVenueInputSchema),z.lazy(() => LikeCreateManyVenueInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CommentCreateWithoutVenueInputSchema: z.ZodType<Prisma.CommentCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutCommentInputSchema),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCommentInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutCommentsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutCommentsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutCommentsInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutCommmentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateWithoutVenueInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCommentInputSchema).optional()
}).strict();

export const CommentCreateOrConnectWithoutVenueInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutVenueInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutVenueInputSchema),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const CommentCreateManyVenueInputEnvelopeSchema: z.ZodType<Prisma.CommentCreateManyVenueInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CommentCreateManyVenueInputSchema),z.lazy(() => CommentCreateManyVenueInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AddressCreateWithoutVenueInputSchema: z.ZodType<Prisma.AddressCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutAddressesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutAddressInputSchema).optional()
}).strict();

export const AddressUncheckedCreateWithoutVenueInputSchema: z.ZodType<Prisma.AddressUncheckedCreateWithoutVenueInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable()
}).strict();

export const AddressCreateOrConnectWithoutVenueInputSchema: z.ZodType<Prisma.AddressCreateOrConnectWithoutVenueInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AddressCreateWithoutVenueInputSchema),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const AddressCreateManyVenueInputEnvelopeSchema: z.ZodType<Prisma.AddressCreateManyVenueInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AddressCreateManyVenueInputSchema),z.lazy(() => AddressCreateManyVenueInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutVenueInputSchema: z.ZodType<Prisma.UserCreateWithoutVenueInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutVenueInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutVenueInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutVenueInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutVenueInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutVenueInputSchema),z.lazy(() => UserUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const EventUpsertWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutVenueInputSchema),z.lazy(() => EventUncheckedUpdateWithoutVenueInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutVenueInputSchema),z.lazy(() => EventUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutVenueInputSchema),z.lazy(() => EventUncheckedUpdateWithoutVenueInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutVenueInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutVenueInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutVenueInputSchema) ]),
}).strict();

export const SeriesUpsertWithWhereUniqueWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUpsertWithWhereUniqueWithoutVenuesInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SeriesUpdateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutVenuesInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutVenuesInputSchema) ]),
}).strict();

export const SeriesUpdateWithWhereUniqueWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUpdateWithWhereUniqueWithoutVenuesInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutVenuesInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutVenuesInputSchema) ]),
}).strict();

export const SeriesUpdateManyWithWhereWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithWhereWithoutVenuesInput> = z.object({
  where: z.lazy(() => SeriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateManyMutationInputSchema),z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesInputSchema) ]),
}).strict();

export const LikeUpsertWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.LikeUpsertWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LikeUpdateWithoutVenueInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutVenueInputSchema) ]),
  create: z.union([ z.lazy(() => LikeCreateWithoutVenueInputSchema),z.lazy(() => LikeUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const LikeUpdateWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.LikeUpdateWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateWithoutVenueInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutVenueInputSchema) ]),
}).strict();

export const LikeUpdateManyWithWhereWithoutVenueInputSchema: z.ZodType<Prisma.LikeUpdateManyWithWhereWithoutVenueInput> = z.object({
  where: z.lazy(() => LikeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateManyMutationInputSchema),z.lazy(() => LikeUncheckedUpdateManyWithoutVenueInputSchema) ]),
}).strict();

export const CommentUpsertWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.CommentUpsertWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CommentUpdateWithoutVenueInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutVenueInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutVenueInputSchema),z.lazy(() => CommentUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const CommentUpdateWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.CommentUpdateWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateWithoutVenueInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutVenueInputSchema) ]),
}).strict();

export const CommentUpdateManyWithWhereWithoutVenueInputSchema: z.ZodType<Prisma.CommentUpdateManyWithWhereWithoutVenueInput> = z.object({
  where: z.lazy(() => CommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateManyMutationInputSchema),z.lazy(() => CommentUncheckedUpdateManyWithoutVenueInputSchema) ]),
}).strict();

export const AddressUpsertWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.AddressUpsertWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AddressUpdateWithoutVenueInputSchema),z.lazy(() => AddressUncheckedUpdateWithoutVenueInputSchema) ]),
  create: z.union([ z.lazy(() => AddressCreateWithoutVenueInputSchema),z.lazy(() => AddressUncheckedCreateWithoutVenueInputSchema) ]),
}).strict();

export const AddressUpdateWithWhereUniqueWithoutVenueInputSchema: z.ZodType<Prisma.AddressUpdateWithWhereUniqueWithoutVenueInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AddressUpdateWithoutVenueInputSchema),z.lazy(() => AddressUncheckedUpdateWithoutVenueInputSchema) ]),
}).strict();

export const AddressUpdateManyWithWhereWithoutVenueInputSchema: z.ZodType<Prisma.AddressUpdateManyWithWhereWithoutVenueInput> = z.object({
  where: z.lazy(() => AddressScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AddressUpdateManyMutationInputSchema),z.lazy(() => AddressUncheckedUpdateManyWithoutVenueInputSchema) ]),
}).strict();

export const UserUpsertWithoutVenueInputSchema: z.ZodType<Prisma.UserUpsertWithoutVenueInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutVenueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutVenueInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutVenueInputSchema),z.lazy(() => UserUncheckedCreateWithoutVenueInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutVenueInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutVenueInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutVenueInputSchema),z.lazy(() => UserUncheckedUpdateWithoutVenueInputSchema) ]),
}).strict();

export const UserUpdateWithoutVenueInputSchema: z.ZodType<Prisma.UserUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutVenueInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const VenueCreateWithoutAddressesInputSchema: z.ZodType<Prisma.VenueCreateWithoutAddressesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutVenueInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutAddressesInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutAddressesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutAddressesInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutAddressesInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutAddressesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutAddressesInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutAddressesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutAddressesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutAddressesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutAddressesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutAddressesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutAddressesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAddressesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAddressesInputSchema) ]),
}).strict();

export const UserCreateWithoutAddressInputSchema: z.ZodType<Prisma.UserCreateWithoutAddressInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAddressInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAddressInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAddressInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAddressInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAddressInputSchema),z.lazy(() => UserUncheckedCreateWithoutAddressInputSchema) ]),
}).strict();

export const VenueUpsertWithoutAddressesInputSchema: z.ZodType<Prisma.VenueUpsertWithoutAddressesInput> = z.object({
  update: z.union([ z.lazy(() => VenueUpdateWithoutAddressesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutAddressesInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutAddressesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutAddressesInputSchema) ]),
  where: z.lazy(() => VenueWhereInputSchema).optional()
}).strict();

export const VenueUpdateToOneWithWhereWithoutAddressesInputSchema: z.ZodType<Prisma.VenueUpdateToOneWithWhereWithoutAddressesInput> = z.object({
  where: z.lazy(() => VenueWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => VenueUpdateWithoutAddressesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutAddressesInputSchema) ]),
}).strict();

export const VenueUpdateWithoutAddressesInputSchema: z.ZodType<Prisma.VenueUpdateWithoutAddressesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutVenueNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutAddressesInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutAddressesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutAddressesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutAddressesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutAddressesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAddressesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAddressesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAddressesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutAddressesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutAddressesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutAddressesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAddressesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutAddressesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutAddressesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutAddressesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutAddressesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutAddressInputSchema: z.ZodType<Prisma.UserUpsertWithoutAddressInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAddressInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAddressInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAddressInputSchema),z.lazy(() => UserUncheckedCreateWithoutAddressInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAddressInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAddressInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAddressInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAddressInputSchema) ]),
}).strict();

export const UserUpdateWithoutAddressInputSchema: z.ZodType<Prisma.UserUpdateWithoutAddressInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAddressInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAddressInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EventCreateWithoutCommentsInputSchema: z.ZodType<Prisma.EventCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutCommentsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutCommentsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutCommentsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCommentsInputSchema) ]),
}).strict();

export const UserCreateWithoutCommentInputSchema: z.ZodType<Prisma.UserCreateWithoutCommentInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCommentInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCommentInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCommentInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCommentInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCommentInputSchema),z.lazy(() => UserUncheckedCreateWithoutCommentInputSchema) ]),
}).strict();

export const LikeCreateWithoutCommentInputSchema: z.ZodType<Prisma.LikeCreateWithoutCommentInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikesInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikesInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikesInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikesInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutLikeInputSchema),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateWithoutCommentInputSchema: z.ZodType<Prisma.LikeUncheckedCreateWithoutCommentInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeCreateOrConnectWithoutCommentInputSchema: z.ZodType<Prisma.LikeCreateOrConnectWithoutCommentInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LikeCreateWithoutCommentInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema) ]),
}).strict();

export const LikeCreateManyCommentInputEnvelopeSchema: z.ZodType<Prisma.LikeCreateManyCommentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LikeCreateManyCommentInputSchema),z.lazy(() => LikeCreateManyCommentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RaceCreateWithoutCommentsInputSchema: z.ZodType<Prisma.RaceCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutCommentsInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutCommentsInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutCommentsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutCommentsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCommentsInputSchema) ]),
}).strict();

export const SeriesCreateWithoutCommentsInputSchema: z.ZodType<Prisma.SeriesCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutCommentsInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutCommentsInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutCommentsInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutCommentsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutCommentsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutCommentsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutCommentsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutCommentsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutCommentsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCommentsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCommentsInputSchema) ]),
}).strict();

export const VenueCreateWithoutCommentsInputSchema: z.ZodType<Prisma.VenueCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutVenueInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutCommentsInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutCommentsInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutCommentsInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutCommentsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutCommentsInputSchema) ]),
}).strict();

export const CompCreateWithoutCommmentsInputSchema: z.ZodType<Prisma.CompCreateWithoutCommmentsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutCommmentsInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutCommmentsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutCommmentsInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutCommmentsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutCommmentsInputSchema),z.lazy(() => CompUncheckedCreateWithoutCommmentsInputSchema) ]),
}).strict();

export const EventUpsertWithoutCommentsInputSchema: z.ZodType<Prisma.EventUpsertWithoutCommentsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCommentsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedCreateWithoutCommentsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutCommentsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutCommentsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutCommentsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutCommentsInputSchema) ]),
}).strict();

export const EventUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.EventUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutCommentInputSchema: z.ZodType<Prisma.UserUpsertWithoutCommentInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCommentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCommentInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCommentInputSchema),z.lazy(() => UserUncheckedCreateWithoutCommentInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCommentInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCommentInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCommentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCommentInputSchema) ]),
}).strict();

export const UserUpdateWithoutCommentInputSchema: z.ZodType<Prisma.UserUpdateWithoutCommentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCommentInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCommentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const LikeUpsertWithWhereUniqueWithoutCommentInputSchema: z.ZodType<Prisma.LikeUpsertWithWhereUniqueWithoutCommentInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LikeUpdateWithoutCommentInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutCommentInputSchema) ]),
  create: z.union([ z.lazy(() => LikeCreateWithoutCommentInputSchema),z.lazy(() => LikeUncheckedCreateWithoutCommentInputSchema) ]),
}).strict();

export const LikeUpdateWithWhereUniqueWithoutCommentInputSchema: z.ZodType<Prisma.LikeUpdateWithWhereUniqueWithoutCommentInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateWithoutCommentInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutCommentInputSchema) ]),
}).strict();

export const LikeUpdateManyWithWhereWithoutCommentInputSchema: z.ZodType<Prisma.LikeUpdateManyWithWhereWithoutCommentInput> = z.object({
  where: z.lazy(() => LikeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateManyMutationInputSchema),z.lazy(() => LikeUncheckedUpdateManyWithoutCommentInputSchema) ]),
}).strict();

export const RaceUpsertWithoutCommentsInputSchema: z.ZodType<Prisma.RaceUpsertWithoutCommentsInput> = z.object({
  update: z.union([ z.lazy(() => RaceUpdateWithoutCommentsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCommentsInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutCommentsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCommentsInputSchema) ]),
  where: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const RaceUpdateToOneWithWhereWithoutCommentsInputSchema: z.ZodType<Prisma.RaceUpdateToOneWithWhereWithoutCommentsInput> = z.object({
  where: z.lazy(() => RaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RaceUpdateWithoutCommentsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCommentsInputSchema) ]),
}).strict();

export const RaceUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.RaceUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const SeriesUpsertWithoutCommentsInputSchema: z.ZodType<Prisma.SeriesUpsertWithoutCommentsInput> = z.object({
  update: z.union([ z.lazy(() => SeriesUpdateWithoutCommentsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutCommentsInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutCommentsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutCommentsInputSchema) ]),
  where: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const SeriesUpdateToOneWithWhereWithoutCommentsInputSchema: z.ZodType<Prisma.SeriesUpdateToOneWithWhereWithoutCommentsInput> = z.object({
  where: z.lazy(() => SeriesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutCommentsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutCommentsInputSchema) ]),
}).strict();

export const SeriesUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutCommentsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutCommentsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutCommentsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCommentsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCommentsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCommentsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutCommentsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutCommentsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutCommentsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCommentsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const VenueUpsertWithoutCommentsInputSchema: z.ZodType<Prisma.VenueUpsertWithoutCommentsInput> = z.object({
  update: z.union([ z.lazy(() => VenueUpdateWithoutCommentsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutCommentsInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutCommentsInputSchema),z.lazy(() => VenueUncheckedCreateWithoutCommentsInputSchema) ]),
  where: z.lazy(() => VenueWhereInputSchema).optional()
}).strict();

export const VenueUpdateToOneWithWhereWithoutCommentsInputSchema: z.ZodType<Prisma.VenueUpdateToOneWithWhereWithoutCommentsInput> = z.object({
  where: z.lazy(() => VenueWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => VenueUpdateWithoutCommentsInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutCommentsInputSchema) ]),
}).strict();

export const VenueUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.VenueUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutVenueNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const CompUpsertWithoutCommmentsInputSchema: z.ZodType<Prisma.CompUpsertWithoutCommmentsInput> = z.object({
  update: z.union([ z.lazy(() => CompUpdateWithoutCommmentsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutCommmentsInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutCommmentsInputSchema),z.lazy(() => CompUncheckedCreateWithoutCommmentsInputSchema) ]),
  where: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const CompUpdateToOneWithWhereWithoutCommmentsInputSchema: z.ZodType<Prisma.CompUpdateToOneWithWhereWithoutCommmentsInput> = z.object({
  where: z.lazy(() => CompWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompUpdateWithoutCommmentsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutCommmentsInputSchema) ]),
}).strict();

export const CompUpdateWithoutCommmentsInputSchema: z.ZodType<Prisma.CompUpdateWithoutCommmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutCommmentsInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutCommmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompCreateWithoutFollowsInputSchema: z.ZodType<Prisma.CompCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutFollowsInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutFollowsInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutFollowsInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutFollowsInputSchema),z.lazy(() => CompUncheckedCreateWithoutFollowsInputSchema) ]),
}).strict();

export const EventCreateWithoutFollowsInputSchema: z.ZodType<Prisma.EventCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutFollowsInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutFollowsInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutFollowsInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutFollowsInputSchema),z.lazy(() => EventUncheckedCreateWithoutFollowsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutFollowsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutFollowsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutFollowsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutFollowsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFollowsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFollowsInputSchema) ]),
}).strict();

export const RaceCreateWithoutFollowsInputSchema: z.ZodType<Prisma.RaceCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutFollowsInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutFollowsInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutFollowsInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutFollowsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutFollowsInputSchema) ]),
}).strict();

export const SeriesCreateWithoutFollowsInputSchema: z.ZodType<Prisma.SeriesCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutFollowsInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutFollowsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutFollowsInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutFollowsInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutFollowsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutFollowsInputSchema) ]),
}).strict();

export const UserCreateWithoutFollowInputSchema: z.ZodType<Prisma.UserCreateWithoutFollowInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFollowInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFollowInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFollowInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFollowInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFollowInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowInputSchema) ]),
}).strict();

export const CompUpsertWithoutFollowsInputSchema: z.ZodType<Prisma.CompUpsertWithoutFollowsInput> = z.object({
  update: z.union([ z.lazy(() => CompUpdateWithoutFollowsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutFollowsInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutFollowsInputSchema),z.lazy(() => CompUncheckedCreateWithoutFollowsInputSchema) ]),
  where: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const CompUpdateToOneWithWhereWithoutFollowsInputSchema: z.ZodType<Prisma.CompUpdateToOneWithWhereWithoutFollowsInput> = z.object({
  where: z.lazy(() => CompWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompUpdateWithoutFollowsInputSchema),z.lazy(() => CompUncheckedUpdateWithoutFollowsInputSchema) ]),
}).strict();

export const CompUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.CompUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutFollowsInputSchema: z.ZodType<Prisma.EventUpsertWithoutFollowsInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutFollowsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFollowsInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutFollowsInputSchema),z.lazy(() => EventUncheckedCreateWithoutFollowsInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutFollowsInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutFollowsInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutFollowsInputSchema),z.lazy(() => EventUncheckedUpdateWithoutFollowsInputSchema) ]),
}).strict();

export const EventUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.EventUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutFollowsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutFollowsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutFollowsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFollowsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFollowsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFollowsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutFollowsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutFollowsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutFollowsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFollowsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RaceUpsertWithoutFollowsInputSchema: z.ZodType<Prisma.RaceUpsertWithoutFollowsInput> = z.object({
  update: z.union([ z.lazy(() => RaceUpdateWithoutFollowsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutFollowsInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutFollowsInputSchema),z.lazy(() => RaceUncheckedCreateWithoutFollowsInputSchema) ]),
  where: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const RaceUpdateToOneWithWhereWithoutFollowsInputSchema: z.ZodType<Prisma.RaceUpdateToOneWithWhereWithoutFollowsInput> = z.object({
  where: z.lazy(() => RaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RaceUpdateWithoutFollowsInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutFollowsInputSchema) ]),
}).strict();

export const RaceUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.RaceUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const SeriesUpsertWithoutFollowsInputSchema: z.ZodType<Prisma.SeriesUpsertWithoutFollowsInput> = z.object({
  update: z.union([ z.lazy(() => SeriesUpdateWithoutFollowsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutFollowsInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutFollowsInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutFollowsInputSchema) ]),
  where: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const SeriesUpdateToOneWithWhereWithoutFollowsInputSchema: z.ZodType<Prisma.SeriesUpdateToOneWithWhereWithoutFollowsInput> = z.object({
  where: z.lazy(() => SeriesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutFollowsInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutFollowsInputSchema) ]),
}).strict();

export const SeriesUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutFollowsInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutFollowsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutFollowInputSchema: z.ZodType<Prisma.UserUpsertWithoutFollowInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFollowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFollowInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFollowInputSchema),z.lazy(() => UserUncheckedCreateWithoutFollowInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFollowInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFollowInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFollowInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFollowInputSchema) ]),
}).strict();

export const UserUpdateWithoutFollowInputSchema: z.ZodType<Prisma.UserUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFollowInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFollowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const CompCreateWithoutLikesInputSchema: z.ZodType<Prisma.CompCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutCompInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutLikesInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutLikesInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutLikesInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutLikesInputSchema),z.lazy(() => CompUncheckedCreateWithoutLikesInputSchema) ]),
}).strict();

export const EventCreateWithoutLikesInputSchema: z.ZodType<Prisma.EventCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutEventInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutLikesInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutLikesInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutLikesInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutLikesInputSchema),z.lazy(() => EventUncheckedCreateWithoutLikesInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutLikesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Owner: z.lazy(() => UserCreateNestedOneWithoutOrganizationInputSchema).optional(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutLikesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  ownerId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutLikesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutLikesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLikesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLikesInputSchema) ]),
}).strict();

export const RaceCreateWithoutLikesInputSchema: z.ZodType<Prisma.RaceCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutRaceInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutLikesInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutLikesInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutLikesInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutLikesInputSchema),z.lazy(() => RaceUncheckedCreateWithoutLikesInputSchema) ]),
}).strict();

export const SeriesCreateWithoutLikesInputSchema: z.ZodType<Prisma.SeriesCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutLikesInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutLikesInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutLikesInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutLikesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutLikesInputSchema) ]),
}).strict();

export const UserCreateWithoutLikeInputSchema: z.ZodType<Prisma.UserCreateWithoutLikeInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutLikeInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutLikeInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutLikeInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutLikeInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutLikeInputSchema),z.lazy(() => UserUncheckedCreateWithoutLikeInputSchema) ]),
}).strict();

export const CommentCreateWithoutLikesInputSchema: z.ZodType<Prisma.CommentCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutCommentInputSchema),
  Race: z.lazy(() => RaceCreateNestedOneWithoutCommentsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutCommentsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutCommentsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutCommentsInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutCommmentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateWithoutLikesInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const CommentCreateOrConnectWithoutLikesInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutLikesInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutLikesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutLikesInputSchema) ]),
}).strict();

export const VenueCreateWithoutLikesInputSchema: z.ZodType<Prisma.VenueCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutVenueInputSchema).optional(),
  Publisher: z.lazy(() => UserCreateNestedOneWithoutVenueInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutLikesInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutLikesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutLikesInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutLikesInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutLikesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutLikesInputSchema) ]),
}).strict();

export const CompUpsertWithoutLikesInputSchema: z.ZodType<Prisma.CompUpsertWithoutLikesInput> = z.object({
  update: z.union([ z.lazy(() => CompUpdateWithoutLikesInputSchema),z.lazy(() => CompUncheckedUpdateWithoutLikesInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutLikesInputSchema),z.lazy(() => CompUncheckedCreateWithoutLikesInputSchema) ]),
  where: z.lazy(() => CompWhereInputSchema).optional()
}).strict();

export const CompUpdateToOneWithWhereWithoutLikesInputSchema: z.ZodType<Prisma.CompUpdateToOneWithWhereWithoutLikesInput> = z.object({
  where: z.lazy(() => CompWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CompUpdateWithoutLikesInputSchema),z.lazy(() => CompUncheckedUpdateWithoutLikesInputSchema) ]),
}).strict();

export const CompUpdateWithoutLikesInputSchema: z.ZodType<Prisma.CompUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutLikesInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const EventUpsertWithoutLikesInputSchema: z.ZodType<Prisma.EventUpsertWithoutLikesInput> = z.object({
  update: z.union([ z.lazy(() => EventUpdateWithoutLikesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutLikesInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutLikesInputSchema),z.lazy(() => EventUncheckedCreateWithoutLikesInputSchema) ]),
  where: z.lazy(() => EventWhereInputSchema).optional()
}).strict();

export const EventUpdateToOneWithWhereWithoutLikesInputSchema: z.ZodType<Prisma.EventUpdateToOneWithWhereWithoutLikesInput> = z.object({
  where: z.lazy(() => EventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EventUpdateWithoutLikesInputSchema),z.lazy(() => EventUncheckedUpdateWithoutLikesInputSchema) ]),
}).strict();

export const EventUpdateWithoutLikesInputSchema: z.ZodType<Prisma.EventUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutLikesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutLikesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutLikesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutLikesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLikesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLikesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLikesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutLikesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutLikesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutLikesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLikesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutLikesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Owner: z.lazy(() => UserUpdateOneWithoutOrganizationNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutLikesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RaceUpsertWithoutLikesInputSchema: z.ZodType<Prisma.RaceUpsertWithoutLikesInput> = z.object({
  update: z.union([ z.lazy(() => RaceUpdateWithoutLikesInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutLikesInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutLikesInputSchema),z.lazy(() => RaceUncheckedCreateWithoutLikesInputSchema) ]),
  where: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const RaceUpdateToOneWithWhereWithoutLikesInputSchema: z.ZodType<Prisma.RaceUpdateToOneWithWhereWithoutLikesInput> = z.object({
  where: z.lazy(() => RaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RaceUpdateWithoutLikesInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutLikesInputSchema) ]),
}).strict();

export const RaceUpdateWithoutLikesInputSchema: z.ZodType<Prisma.RaceUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutLikesInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const SeriesUpsertWithoutLikesInputSchema: z.ZodType<Prisma.SeriesUpsertWithoutLikesInput> = z.object({
  update: z.union([ z.lazy(() => SeriesUpdateWithoutLikesInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutLikesInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutLikesInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutLikesInputSchema) ]),
  where: z.lazy(() => SeriesWhereInputSchema).optional()
}).strict();

export const SeriesUpdateToOneWithWhereWithoutLikesInputSchema: z.ZodType<Prisma.SeriesUpdateToOneWithWhereWithoutLikesInput> = z.object({
  where: z.lazy(() => SeriesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutLikesInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutLikesInputSchema) ]),
}).strict();

export const SeriesUpdateWithoutLikesInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutLikesInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutLikeInputSchema: z.ZodType<Prisma.UserUpsertWithoutLikeInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutLikeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLikeInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutLikeInputSchema),z.lazy(() => UserUncheckedCreateWithoutLikeInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutLikeInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutLikeInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutLikeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLikeInputSchema) ]),
}).strict();

export const UserUpdateWithoutLikeInputSchema: z.ZodType<Prisma.UserUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutLikeInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutLikeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const CommentUpsertWithoutLikesInputSchema: z.ZodType<Prisma.CommentUpsertWithoutLikesInput> = z.object({
  update: z.union([ z.lazy(() => CommentUpdateWithoutLikesInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutLikesInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutLikesInputSchema),z.lazy(() => CommentUncheckedCreateWithoutLikesInputSchema) ]),
  where: z.lazy(() => CommentWhereInputSchema).optional()
}).strict();

export const CommentUpdateToOneWithWhereWithoutLikesInputSchema: z.ZodType<Prisma.CommentUpdateToOneWithWhereWithoutLikesInput> = z.object({
  where: z.lazy(() => CommentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CommentUpdateWithoutLikesInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutLikesInputSchema) ]),
}).strict();

export const CommentUpdateWithoutLikesInputSchema: z.ZodType<Prisma.CommentUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutCommentNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutCommmentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateWithoutLikesInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueUpsertWithoutLikesInputSchema: z.ZodType<Prisma.VenueUpsertWithoutLikesInput> = z.object({
  update: z.union([ z.lazy(() => VenueUpdateWithoutLikesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutLikesInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutLikesInputSchema),z.lazy(() => VenueUncheckedCreateWithoutLikesInputSchema) ]),
  where: z.lazy(() => VenueWhereInputSchema).optional()
}).strict();

export const VenueUpdateToOneWithWhereWithoutLikesInputSchema: z.ZodType<Prisma.VenueUpdateToOneWithWhereWithoutLikesInput> = z.object({
  where: z.lazy(() => VenueWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => VenueUpdateWithoutLikesInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutLikesInputSchema) ]),
}).strict();

export const VenueUpdateWithoutLikesInputSchema: z.ZodType<Prisma.VenueUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutVenueNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutLikesInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutLikesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const KeyCreateWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateWithoutUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const KeyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const KeyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const KeyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.KeyCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => KeyCreateManyUserInputSchema),z.lazy(() => KeyCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserSettingsCreateWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable()
}).strict();

export const UserSettingsUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  theme: z.string().optional().nullable(),
  language: z.string().optional().nullable()
}).strict();

export const UserSettingsCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserSettingsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SeriesCreateWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutSeriesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutSeriesInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedCreateNestedManyWithoutSeriesInputSchema).optional()
}).strict();

export const SeriesCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const SeriesCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.SeriesCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SeriesCreateManyPublisherInputSchema),z.lazy(() => SeriesCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventCreateWithoutPublisherInputSchema: z.ZodType<Prisma.EventCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutEventsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutEventsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutEventsInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.EventUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutEventInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutEventsInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const EventCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.EventCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const EventCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.EventCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventCreateManyPublisherInputSchema),z.lazy(() => EventCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RaceCreateWithoutPublisherInputSchema: z.ZodType<Prisma.RaceCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutRacesInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutRaceInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedCreateNestedManyWithoutRacesInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const RaceCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.RaceCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RaceCreateManyPublisherInputSchema),z.lazy(() => RaceCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CompCreateWithoutPublisherInputSchema: z.ZodType<Prisma.CompCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.CompUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutCompsInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutCompInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutCompsInputSchema).optional()
}).strict();

export const CompCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.CompCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const CompCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.CompCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CompCreateManyPublisherInputSchema),z.lazy(() => CompCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ResultCreateWithoutPublisherInputSchema: z.ZodType<Prisma.ResultCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutResultsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutResultsInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutResultsInputSchema).optional()
}).strict();

export const ResultUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.ResultCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const ResultCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.ResultCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ResultCreateManyPublisherInputSchema),z.lazy(() => ResultCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutOwnerInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutOwnerInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutOwnerInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema) ]),
}).strict();

export const OrganizationCreateManyOwnerInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyOwnerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyOwnerInputSchema),z.lazy(() => OrganizationCreateManyOwnerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const VenueCreateWithoutPublisherInputSchema: z.ZodType<Prisma.VenueCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Events: z.lazy(() => EventUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutVenuesInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutVenueInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedCreateNestedManyWithoutVenueInputSchema).optional()
}).strict();

export const VenueCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.VenueCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const VenueCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.VenueCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => VenueCreateManyPublisherInputSchema),z.lazy(() => VenueCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FollowCreateWithoutUserInputSchema: z.ZodType<Prisma.FollowCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutFollowsInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutFollowsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutFollowsInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutFollowsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutFollowsInputSchema).optional()
}).strict();

export const FollowUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.FollowUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FollowCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.FollowCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FollowCreateWithoutUserInputSchema),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FollowCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.FollowCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FollowCreateManyUserInputSchema),z.lazy(() => FollowCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LikeCreateWithoutUserInputSchema: z.ZodType<Prisma.LikeCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutLikesInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedOneWithoutLikesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLikesInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutLikesInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutLikesInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedOneWithoutLikesInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutLikesInputSchema).optional()
}).strict();

export const LikeUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.LikeUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.LikeCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LikeCreateWithoutUserInputSchema),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const LikeCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.LikeCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LikeCreateManyUserInputSchema),z.lazy(() => LikeCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CommentCreateWithoutUserInputSchema: z.ZodType<Prisma.CommentCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Event: z.lazy(() => EventCreateNestedOneWithoutCommentsInputSchema).optional(),
  Likes: z.lazy(() => LikeCreateNestedManyWithoutCommentInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedOneWithoutCommentsInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedOneWithoutCommentsInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutCommentsInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutCommentsInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedOneWithoutCommmentsInputSchema).optional()
}).strict();

export const CommentUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedCreateNestedManyWithoutCommentInputSchema).optional()
}).strict();

export const CommentCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutUserInputSchema),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const CommentCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.CommentCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CommentCreateManyUserInputSchema),z.lazy(() => CommentCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AddressCreateWithoutPublisherInputSchema: z.ZodType<Prisma.AddressCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  Venue: z.lazy(() => VenueCreateNestedOneWithoutAddressesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutAddressesInputSchema).optional()
}).strict();

export const AddressUncheckedCreateWithoutPublisherInputSchema: z.ZodType<Prisma.AddressUncheckedCreateWithoutPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable()
}).strict();

export const AddressCreateOrConnectWithoutPublisherInputSchema: z.ZodType<Prisma.AddressCreateOrConnectWithoutPublisherInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AddressCreateWithoutPublisherInputSchema),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const AddressCreateManyPublisherInputEnvelopeSchema: z.ZodType<Prisma.AddressCreateManyPublisherInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AddressCreateManyPublisherInputSchema),z.lazy(() => AddressCreateManyPublisherInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
}).strict();

export const KeyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.KeyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => KeyUpdateWithoutUserInputSchema),z.lazy(() => KeyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const KeyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => KeyUpdateWithoutUserInputSchema),z.lazy(() => KeyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const KeyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => KeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => KeyUpdateManyMutationInputSchema),z.lazy(() => KeyUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const KeyScalarWhereInputSchema: z.ZodType<Prisma.KeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserSettingsUpsertWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => UserSettingsUpdateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserSettingsCreateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => UserSettingsWhereInputSchema).optional()
}).strict();

export const UserSettingsUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserSettingsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserSettingsUpdateWithoutUserInputSchema),z.lazy(() => UserSettingsUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserSettingsUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserSettingsUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserSettingsUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  theme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SeriesUpdateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => SeriesCreateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const SeriesUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => SeriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateWithoutPublisherInputSchema),z.lazy(() => SeriesUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const SeriesUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => SeriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SeriesUpdateManyMutationInputSchema),z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const EventUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.EventUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventUpdateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => EventCreateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const EventUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.EventUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => EventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventUpdateWithoutPublisherInputSchema),z.lazy(() => EventUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const EventUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.EventUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => EventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventUpdateManyMutationInputSchema),z.lazy(() => EventUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const RaceUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RaceUpdateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const RaceUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateWithoutPublisherInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const RaceUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => RaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateManyMutationInputSchema),z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const CompUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.CompUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CompUpdateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => CompCreateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const CompUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.CompUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => CompWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CompUpdateWithoutPublisherInputSchema),z.lazy(() => CompUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const CompUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.CompUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => CompScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CompUpdateManyMutationInputSchema),z.lazy(() => CompUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const ResultUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ResultUpdateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => ResultCreateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const ResultUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => ResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateWithoutPublisherInputSchema),z.lazy(() => ResultUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const ResultUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => ResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ResultUpdateManyMutationInputSchema),z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutOwnerInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOwnerInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnerInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutOwnerInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutOwnerInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOwnerInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutOwnerInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerInputSchema) ]),
}).strict();

export const OrganizationScalarWhereInputSchema: z.ZodType<Prisma.OrganizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  titleImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VenueUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => VenueUpdateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => VenueCreateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const VenueUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => VenueWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => VenueUpdateWithoutPublisherInputSchema),z.lazy(() => VenueUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const VenueUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => VenueScalarWhereInputSchema),
  data: z.union([ z.lazy(() => VenueUpdateManyMutationInputSchema),z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const FollowUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FollowUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FollowUpdateWithoutUserInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => FollowCreateWithoutUserInputSchema),z.lazy(() => FollowUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FollowUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FollowUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FollowWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateWithoutUserInputSchema),z.lazy(() => FollowUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const FollowUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.FollowUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => FollowScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FollowUpdateManyMutationInputSchema),z.lazy(() => FollowUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const LikeUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.LikeUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LikeUpdateWithoutUserInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => LikeCreateWithoutUserInputSchema),z.lazy(() => LikeUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const LikeUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.LikeUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => LikeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateWithoutUserInputSchema),z.lazy(() => LikeUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const LikeUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.LikeUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => LikeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LikeUpdateManyMutationInputSchema),z.lazy(() => LikeUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const CommentUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.CommentUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CommentUpdateWithoutUserInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutUserInputSchema),z.lazy(() => CommentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const CommentUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.CommentUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateWithoutUserInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const CommentUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.CommentUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => CommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateManyMutationInputSchema),z.lazy(() => CommentUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AddressUpsertWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.AddressUpsertWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AddressUpdateWithoutPublisherInputSchema),z.lazy(() => AddressUncheckedUpdateWithoutPublisherInputSchema) ]),
  create: z.union([ z.lazy(() => AddressCreateWithoutPublisherInputSchema),z.lazy(() => AddressUncheckedCreateWithoutPublisherInputSchema) ]),
}).strict();

export const AddressUpdateWithWhereUniqueWithoutPublisherInputSchema: z.ZodType<Prisma.AddressUpdateWithWhereUniqueWithoutPublisherInput> = z.object({
  where: z.lazy(() => AddressWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AddressUpdateWithoutPublisherInputSchema),z.lazy(() => AddressUncheckedUpdateWithoutPublisherInputSchema) ]),
}).strict();

export const AddressUpdateManyWithWhereWithoutPublisherInputSchema: z.ZodType<Prisma.AddressUpdateManyWithWhereWithoutPublisherInput> = z.object({
  where: z.lazy(() => AddressScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AddressUpdateManyMutationInputSchema),z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherInputSchema) ]),
}).strict();

export const UserCreateWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserCreateWithoutUserSettingsInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserSettingsInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserSettingsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserSettingsInputSchema) ]),
}).strict();

export const UserUpsertWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserSettingsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserSettingsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserSettingsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserSettingsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserSettingsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserSettingsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserSettingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserSettingsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserSettingsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateWithoutAuth_sessionInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuth_sessionInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuth_sessionInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]),
}).strict();

export const UserUpsertWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuth_sessionInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuth_sessionInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuth_sessionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuth_sessionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateWithoutAuth_keyInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuth_keyInput> = z.object({
  id: z.string(),
  username: z.string(),
  firstname: z.string().optional().nullable(),
  lastname: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  email_verified: z.number().int().optional().nullable(),
  name: z.string().optional().nullable(),
  avatar: z.string().optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnerInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedCreateNestedManyWithoutPublisherInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedCreateNestedManyWithoutPublisherInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuth_keyInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]),
}).strict();

export const UserUpsertWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuth_keyInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuth_keyInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuth_keyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuth_keyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email_verified: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  avatar: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserSettings: z.lazy(() => UserSettingsUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Event: z.lazy(() => EventUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Result: z.lazy(() => ResultUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnerNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional(),
  follow: z.lazy(() => FollowUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  like: z.lazy(() => LikeUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  Address: z.lazy(() => AddressUncheckedUpdateManyWithoutPublisherNestedInputSchema).optional()
}).strict();

export const EventCreateManySeriesInputSchema: z.ZodType<Prisma.EventCreateManySeriesInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const FollowCreateManySeriesInputSchema: z.ZodType<Prisma.FollowCreateManySeriesInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const LikeCreateManySeriesInputSchema: z.ZodType<Prisma.LikeCreateManySeriesInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const CommentCreateManySeriesInputSchema: z.ZodType<Prisma.CommentCreateManySeriesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const EventUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.EventUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FollowUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.FollowUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const FollowUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LikeUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.LikeUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikesNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikesNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikesNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateOneWithoutLikesNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.CommentUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutCommentNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCommentNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutCommmentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCommentNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutVenueNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateManyWithoutSeriesInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyWithoutSeriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceCreateManyEventInputSchema: z.ZodType<Prisma.RaceCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateManyEventInputSchema: z.ZodType<Prisma.ResultCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const FollowCreateManyEventInputSchema: z.ZodType<Prisma.FollowCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const LikeCreateManyEventInputSchema: z.ZodType<Prisma.LikeCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const CommentCreateManyEventInputSchema: z.ZodType<Prisma.CommentCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const RaceUpdateWithoutEventInputSchema: z.ZodType<Prisma.RaceUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUpdateWithoutEventInputSchema: z.ZodType<Prisma.ResultUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutResultsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutResultNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FollowUpdateWithoutEventInputSchema: z.ZodType<Prisma.FollowUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const FollowUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LikeUpdateWithoutEventInputSchema: z.ZodType<Prisma.LikeUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikesNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikesNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikesNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateOneWithoutLikesNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompUpdateWithoutEventsInputSchema: z.ZodType<Prisma.CompUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutEventsInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateManyWithoutEventsInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentUpdateWithoutEventInputSchema: z.ZodType<Prisma.CommentUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutCommentNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCommentNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutCommmentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCommentNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultCreateManyRaceInputSchema: z.ZodType<Prisma.ResultCreateManyRaceInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const FollowCreateManyRaceInputSchema: z.ZodType<Prisma.FollowCreateManyRaceInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const LikeCreateManyRaceInputSchema: z.ZodType<Prisma.LikeCreateManyRaceInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const CommentCreateManyRaceInputSchema: z.ZodType<Prisma.CommentCreateManyRaceInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultUpdateWithoutRaceInputSchema: z.ZodType<Prisma.ResultUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutResultsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutResultsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutResultNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyWithoutRaceInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FollowUpdateWithoutRaceInputSchema: z.ZodType<Prisma.FollowUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const FollowUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutRaceInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LikeUpdateWithoutRaceInputSchema: z.ZodType<Prisma.LikeUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikesNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikesNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikesNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateOneWithoutLikesNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyWithoutRaceInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompUpdateWithoutRacesInputSchema: z.ZodType<Prisma.CompUpdateWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutCompNestedInputSchema).optional(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUpdateManyWithoutCompNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutRacesInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedUpdateManyWithoutCompNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateManyWithoutRacesInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutRacesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentUpdateWithoutRaceInputSchema: z.ZodType<Prisma.CommentUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutCommentNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCommentNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutCommmentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCommentNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateManyWithoutRaceInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutRaceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultCreateManyCompInputSchema: z.ZodType<Prisma.ResultCreateManyCompInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  publisherId: z.string(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const FollowCreateManyCompInputSchema: z.ZodType<Prisma.FollowCreateManyCompInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const LikeCreateManyCompInputSchema: z.ZodType<Prisma.LikeCreateManyCompInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const CommentCreateManyCompInputSchema: z.ZodType<Prisma.CommentCreateManyCompInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const EventUpdateWithoutCompsInputSchema: z.ZodType<Prisma.EventUpdateWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutCompsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutCompsInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUpdateWithoutCompInputSchema: z.ZodType<Prisma.ResultUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutResultsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutResultNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyWithoutCompInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FollowUpdateWithoutCompInputSchema: z.ZodType<Prisma.FollowUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const FollowUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutCompInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LikeUpdateWithoutCompInputSchema: z.ZodType<Prisma.LikeUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutLikesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikesNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikesNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikesNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateOneWithoutLikesNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyWithoutCompInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentUpdateWithoutCompInputSchema: z.ZodType<Prisma.CommentUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutCommentNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCommentNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutCommentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateWithoutCompInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCommentNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateManyWithoutCompInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutCompInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceUpdateWithoutCompsInputSchema: z.ZodType<Prisma.RaceUpdateWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutRaceNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutCompsInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateManyWithoutCompsInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutCompsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventCreateManyOrganizationInputSchema: z.ZodType<Prisma.EventCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const SeriesCreateManyOrganizationInputSchema: z.ZodType<Prisma.SeriesCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const FollowCreateManyOrganizationInputSchema: z.ZodType<Prisma.FollowCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const LikeCreateManyOrganizationInputSchema: z.ZodType<Prisma.LikeCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const CommentCreateManyOrganizationInputSchema: z.ZodType<Prisma.CommentCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const AddressCreateManyOrganizationInputSchema: z.ZodType<Prisma.AddressCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable()
}).strict();

export const EventUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FollowUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutFollowNestedInputSchema).optional()
}).strict();

export const FollowUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LikeUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikesNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikesNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikesNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikesNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateOneWithoutLikesNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutCommentNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCommentNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutCommmentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCommentNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Venue: z.lazy(() => VenueUpdateOneWithoutAddressesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutAddressNestedInputSchema).optional()
}).strict();

export const AddressUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventCreateManyVenueInputSchema: z.ZodType<Prisma.EventCreateManyVenueInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const LikeCreateManyVenueInputSchema: z.ZodType<Prisma.LikeCreateManyVenueInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable()
}).strict();

export const CommentCreateManyVenueInputSchema: z.ZodType<Prisma.CommentCreateManyVenueInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  userId: z.string(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const AddressCreateManyVenueInputSchema: z.ZodType<Prisma.AddressCreateManyVenueInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  publisherId: z.string().optional().nullable()
}).strict();

export const EventUpdateWithoutVenueInputSchema: z.ZodType<Prisma.EventUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutEventNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutVenueInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutVenueInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUpdateWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutVenuesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutVenuesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateManyWithoutVenuesInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutVenuesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUpdateWithoutVenueInputSchema: z.ZodType<Prisma.LikeUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikesNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikesNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikesNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikesNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateWithoutVenueInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyWithoutVenueInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentUpdateWithoutVenueInputSchema: z.ZodType<Prisma.CommentUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutCommentNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCommentNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutCommmentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateWithoutVenueInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCommentNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateManyWithoutVenueInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressUpdateWithoutVenueInputSchema: z.ZodType<Prisma.AddressUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutAddressesNestedInputSchema).optional(),
  Publisher: z.lazy(() => UserUpdateOneWithoutAddressNestedInputSchema).optional()
}).strict();

export const AddressUncheckedUpdateWithoutVenueInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressUncheckedUpdateManyWithoutVenueInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateManyWithoutVenueInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publisherId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeCreateManyCommentInputSchema: z.ZodType<Prisma.LikeCreateManyCommentInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const LikeUpdateWithoutCommentInputSchema: z.ZodType<Prisma.LikeUpdateWithoutCommentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikesNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikesNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikesNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikesNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutLikeNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateWithoutCommentInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateWithoutCommentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyWithoutCommentInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutCommentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const KeyCreateManyUserInputSchema: z.ZodType<Prisma.KeyCreateManyUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const SeriesCreateManyPublisherInputSchema: z.ZodType<Prisma.SeriesCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const EventCreateManyPublisherInputSchema: z.ZodType<Prisma.EventCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  eventeid: z.string(),
  uniqueIdString: z.string(),
  name: z.string(),
  eventwebsite: z.string().optional().nullable(),
  venueName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  public: z.boolean().optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const RaceCreateManyPublisherInputSchema: z.ZodType<Prisma.RaceCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  raceId: z.string().optional().nullable(),
  uniqueRaceString: z.string(),
  name: z.string().optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  time: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  sailed: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const CompCreateManyPublisherInputSchema: z.ZodType<Prisma.CompCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  compId: z.string(),
  uniqueCompId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  club: z.string().optional().nullable(),
  boat: z.string().optional().nullable(),
  skipper: z.string().optional().nullable(),
  sailno: z.string().optional().nullable(),
  fleet: z.string().optional().nullable(),
  division: z.string().optional().nullable(),
  rating: z.string().optional().nullable(),
  rank: z.string().optional().nullable(),
  nett: z.string().optional().nullable(),
  total: z.string().optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ResultCreateManyPublisherInputSchema: z.ZodType<Prisma.ResultCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  resultId: z.string(),
  points: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  discard: z.string().optional().nullable(),
  resultType: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  start: z.string().optional().nullable(),
  finish: z.string().optional().nullable(),
  corrected: z.string().optional().nullable(),
  elasped: z.string().optional().nullable(),
  elapsedWin: z.string().optional().nullable(),
  ratingWin: z.string().optional().nullable(),
  raceRating: z.string().optional().nullable(),
  supposedRating: z.string().optional().nullable(),
  rrset: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const OrganizationCreateManyOwnerInputSchema: z.ZodType<Prisma.OrganizationCreateManyOwnerInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  tag: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VenueCreateManyPublisherInputSchema: z.ZodType<Prisma.VenueCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  burgee: z.string().optional().nullable(),
  titleImage: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const FollowCreateManyUserInputSchema: z.ZodType<Prisma.FollowCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const LikeCreateManyUserInputSchema: z.ZodType<Prisma.LikeCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  itemId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  eventId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  updatedAt: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  eventCommentId: z.string().optional().nullable(),
  commentId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable()
}).strict();

export const CommentCreateManyUserInputSchema: z.ZodType<Prisma.CommentCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string().optional().nullable(),
  ref: z.string().optional().nullable(),
  comment: z.string(),
  eventId: z.string().optional().nullable(),
  raceId: z.string().optional().nullable(),
  seriesId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  compId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const AddressCreateManyPublisherInputSchema: z.ZodType<Prisma.AddressCreateManyPublisherInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  street: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  code: z.string().optional().nullable(),
  venueId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable()
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const KeyUpdateWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SeriesUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional(),
  Venues: z.lazy(() => VenueUncheckedUpdateManyWithoutSeriesNestedInputSchema).optional()
}).strict();

export const SeriesUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.SeriesUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.EventUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutEventsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutEventsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutEventsNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.EventUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutEventNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutEventsNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const EventUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.EventUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventeid: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueIdString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventwebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  public: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  fileInfo: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RaceUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutRacesNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutRaceNestedInputSchema).optional(),
  Comps: z.lazy(() => CompUncheckedUpdateManyWithoutRacesNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  uniqueRaceString: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starts: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailed: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultColumns: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CompUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.CompUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.CompUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutCompsNestedInputSchema).optional(),
  Results: z.lazy(() => ResultUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Commments: z.lazy(() => CommentUncheckedUpdateManyWithoutCompNestedInputSchema).optional(),
  Races: z.lazy(() => RaceUncheckedUpdateManyWithoutCompsNestedInputSchema).optional()
}).strict();

export const CompUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.CompUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  compId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueCompId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  club: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boat: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skipper: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sailno: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fleet: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  division: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rank: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nett: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  total: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rest: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutResultsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutResultsNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutResultsNestedInputSchema).optional()
}).strict();

export const ResultUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResultUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.ResultUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  points: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  discard: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finish: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  corrected: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elasped: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  elapsedWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ratingWin: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  supposedRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rrset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUpdateWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutOwnerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutOwnerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Follows: z.lazy(() => FollowUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOwnerInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOwnerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VenueUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Events: z.lazy(() => EventUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUncheckedUpdateManyWithoutVenuesNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Comments: z.lazy(() => CommentUncheckedUpdateManyWithoutVenueNestedInputSchema).optional(),
  Addresses: z.lazy(() => AddressUncheckedUpdateManyWithoutVenueNestedInputSchema).optional()
}).strict();

export const VenueUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.VenueUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  burgee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  titleImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FollowUpdateWithoutUserInputSchema: z.ZodType<Prisma.FollowUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutFollowsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutFollowsNestedInputSchema).optional()
}).strict();

export const FollowUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FollowUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.FollowUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LikeUpdateWithoutUserInputSchema: z.ZodType<Prisma.LikeUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comp: z.lazy(() => CompUpdateOneWithoutLikesNestedInputSchema).optional(),
  Event: z.lazy(() => EventUpdateOneWithoutLikesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLikesNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutLikesNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutLikesNestedInputSchema).optional(),
  Comment: z.lazy(() => CommentUpdateOneWithoutLikesNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutLikesNestedInputSchema).optional()
}).strict();

export const LikeUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LikeUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.LikeUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventCommentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CommentUpdateWithoutUserInputSchema: z.ZodType<Prisma.CommentUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Event: z.lazy(() => EventUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Likes: z.lazy(() => LikeUpdateManyWithoutCommentNestedInputSchema).optional(),
  Race: z.lazy(() => RaceUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Series: z.lazy(() => SeriesUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Venue: z.lazy(() => VenueUpdateOneWithoutCommentsNestedInputSchema).optional(),
  Comp: z.lazy(() => CompUpdateOneWithoutCommmentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Likes: z.lazy(() => LikeUncheckedUpdateManyWithoutCommentNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ref: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  raceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seriesId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  compId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.AddressUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Venue: z.lazy(() => VenueUpdateOneWithoutAddressesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutAddressesNestedInputSchema).optional()
}).strict();

export const AddressUncheckedUpdateWithoutPublisherInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AddressUncheckedUpdateManyWithoutPublisherInputSchema: z.ZodType<Prisma.AddressUncheckedUpdateManyWithoutPublisherInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  street: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  venueId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const SeriesFindFirstArgsSchema: z.ZodType<Prisma.SeriesFindFirstArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithRelationInputSchema.array(),SeriesOrderByWithRelationInputSchema ]).optional(),
  cursor: SeriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SeriesScalarFieldEnumSchema,SeriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SeriesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SeriesFindFirstOrThrowArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithRelationInputSchema.array(),SeriesOrderByWithRelationInputSchema ]).optional(),
  cursor: SeriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SeriesScalarFieldEnumSchema,SeriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SeriesFindManyArgsSchema: z.ZodType<Prisma.SeriesFindManyArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithRelationInputSchema.array(),SeriesOrderByWithRelationInputSchema ]).optional(),
  cursor: SeriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SeriesScalarFieldEnumSchema,SeriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SeriesAggregateArgsSchema: z.ZodType<Prisma.SeriesAggregateArgs> = z.object({
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithRelationInputSchema.array(),SeriesOrderByWithRelationInputSchema ]).optional(),
  cursor: SeriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SeriesGroupByArgsSchema: z.ZodType<Prisma.SeriesGroupByArgs> = z.object({
  where: SeriesWhereInputSchema.optional(),
  orderBy: z.union([ SeriesOrderByWithAggregationInputSchema.array(),SeriesOrderByWithAggregationInputSchema ]).optional(),
  by: SeriesScalarFieldEnumSchema.array(),
  having: SeriesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SeriesFindUniqueArgsSchema: z.ZodType<Prisma.SeriesFindUniqueArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereUniqueInputSchema,
}).strict()

export const SeriesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SeriesFindUniqueOrThrowArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereUniqueInputSchema,
}).strict()

export const EventFindFirstArgsSchema: z.ZodType<Prisma.EventFindFirstArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const EventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EventFindFirstOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const EventFindManyArgsSchema: z.ZodType<Prisma.EventFindManyArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventScalarFieldEnumSchema,EventScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const EventAggregateArgsSchema: z.ZodType<Prisma.EventAggregateArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithRelationInputSchema.array(),EventOrderByWithRelationInputSchema ]).optional(),
  cursor: EventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const EventGroupByArgsSchema: z.ZodType<Prisma.EventGroupByArgs> = z.object({
  where: EventWhereInputSchema.optional(),
  orderBy: z.union([ EventOrderByWithAggregationInputSchema.array(),EventOrderByWithAggregationInputSchema ]).optional(),
  by: EventScalarFieldEnumSchema.array(),
  having: EventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const EventFindUniqueArgsSchema: z.ZodType<Prisma.EventFindUniqueArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict()

export const EventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EventFindUniqueOrThrowArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict()

export const RaceFindFirstArgsSchema: z.ZodType<Prisma.RaceFindFirstArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RaceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RaceFindFirstOrThrowArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RaceFindManyArgsSchema: z.ZodType<Prisma.RaceFindManyArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RaceAggregateArgsSchema: z.ZodType<Prisma.RaceAggregateArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RaceGroupByArgsSchema: z.ZodType<Prisma.RaceGroupByArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithAggregationInputSchema.array(),RaceOrderByWithAggregationInputSchema ]).optional(),
  by: RaceScalarFieldEnumSchema.array(),
  having: RaceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RaceFindUniqueArgsSchema: z.ZodType<Prisma.RaceFindUniqueArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict()

export const RaceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RaceFindUniqueOrThrowArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict()

export const CompFindFirstArgsSchema: z.ZodType<Prisma.CompFindFirstArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithRelationInputSchema.array(),CompOrderByWithRelationInputSchema ]).optional(),
  cursor: CompWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompScalarFieldEnumSchema,CompScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CompFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CompFindFirstOrThrowArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithRelationInputSchema.array(),CompOrderByWithRelationInputSchema ]).optional(),
  cursor: CompWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompScalarFieldEnumSchema,CompScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CompFindManyArgsSchema: z.ZodType<Prisma.CompFindManyArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithRelationInputSchema.array(),CompOrderByWithRelationInputSchema ]).optional(),
  cursor: CompWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CompScalarFieldEnumSchema,CompScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CompAggregateArgsSchema: z.ZodType<Prisma.CompAggregateArgs> = z.object({
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithRelationInputSchema.array(),CompOrderByWithRelationInputSchema ]).optional(),
  cursor: CompWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const CompGroupByArgsSchema: z.ZodType<Prisma.CompGroupByArgs> = z.object({
  where: CompWhereInputSchema.optional(),
  orderBy: z.union([ CompOrderByWithAggregationInputSchema.array(),CompOrderByWithAggregationInputSchema ]).optional(),
  by: CompScalarFieldEnumSchema.array(),
  having: CompScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const CompFindUniqueArgsSchema: z.ZodType<Prisma.CompFindUniqueArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereUniqueInputSchema,
}).strict()

export const CompFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CompFindUniqueOrThrowArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereUniqueInputSchema,
}).strict()

export const ResultFindFirstArgsSchema: z.ZodType<Prisma.ResultFindFirstArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithRelationInputSchema.array(),ResultOrderByWithRelationInputSchema ]).optional(),
  cursor: ResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ResultFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ResultFindFirstOrThrowArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithRelationInputSchema.array(),ResultOrderByWithRelationInputSchema ]).optional(),
  cursor: ResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ResultFindManyArgsSchema: z.ZodType<Prisma.ResultFindManyArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithRelationInputSchema.array(),ResultOrderByWithRelationInputSchema ]).optional(),
  cursor: ResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResultScalarFieldEnumSchema,ResultScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const ResultAggregateArgsSchema: z.ZodType<Prisma.ResultAggregateArgs> = z.object({
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithRelationInputSchema.array(),ResultOrderByWithRelationInputSchema ]).optional(),
  cursor: ResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ResultGroupByArgsSchema: z.ZodType<Prisma.ResultGroupByArgs> = z.object({
  where: ResultWhereInputSchema.optional(),
  orderBy: z.union([ ResultOrderByWithAggregationInputSchema.array(),ResultOrderByWithAggregationInputSchema ]).optional(),
  by: ResultScalarFieldEnumSchema.array(),
  having: ResultScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const ResultFindUniqueArgsSchema: z.ZodType<Prisma.ResultFindUniqueArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereUniqueInputSchema,
}).strict()

export const ResultFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ResultFindUniqueOrThrowArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereUniqueInputSchema,
}).strict()

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const VenueFindFirstArgsSchema: z.ZodType<Prisma.VenueFindFirstArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithRelationInputSchema.array(),VenueOrderByWithRelationInputSchema ]).optional(),
  cursor: VenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VenueScalarFieldEnumSchema,VenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VenueFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VenueFindFirstOrThrowArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithRelationInputSchema.array(),VenueOrderByWithRelationInputSchema ]).optional(),
  cursor: VenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VenueScalarFieldEnumSchema,VenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VenueFindManyArgsSchema: z.ZodType<Prisma.VenueFindManyArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithRelationInputSchema.array(),VenueOrderByWithRelationInputSchema ]).optional(),
  cursor: VenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VenueScalarFieldEnumSchema,VenueScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VenueAggregateArgsSchema: z.ZodType<Prisma.VenueAggregateArgs> = z.object({
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithRelationInputSchema.array(),VenueOrderByWithRelationInputSchema ]).optional(),
  cursor: VenueWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VenueGroupByArgsSchema: z.ZodType<Prisma.VenueGroupByArgs> = z.object({
  where: VenueWhereInputSchema.optional(),
  orderBy: z.union([ VenueOrderByWithAggregationInputSchema.array(),VenueOrderByWithAggregationInputSchema ]).optional(),
  by: VenueScalarFieldEnumSchema.array(),
  having: VenueScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VenueFindUniqueArgsSchema: z.ZodType<Prisma.VenueFindUniqueArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereUniqueInputSchema,
}).strict()

export const VenueFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VenueFindUniqueOrThrowArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereUniqueInputSchema,
}).strict()

export const AddressFindFirstArgsSchema: z.ZodType<Prisma.AddressFindFirstArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  where: AddressWhereInputSchema.optional(),
  orderBy: z.union([ AddressOrderByWithRelationInputSchema.array(),AddressOrderByWithRelationInputSchema ]).optional(),
  cursor: AddressWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AddressScalarFieldEnumSchema,AddressScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AddressFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AddressFindFirstOrThrowArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  where: AddressWhereInputSchema.optional(),
  orderBy: z.union([ AddressOrderByWithRelationInputSchema.array(),AddressOrderByWithRelationInputSchema ]).optional(),
  cursor: AddressWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AddressScalarFieldEnumSchema,AddressScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AddressFindManyArgsSchema: z.ZodType<Prisma.AddressFindManyArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  where: AddressWhereInputSchema.optional(),
  orderBy: z.union([ AddressOrderByWithRelationInputSchema.array(),AddressOrderByWithRelationInputSchema ]).optional(),
  cursor: AddressWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AddressScalarFieldEnumSchema,AddressScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const AddressAggregateArgsSchema: z.ZodType<Prisma.AddressAggregateArgs> = z.object({
  where: AddressWhereInputSchema.optional(),
  orderBy: z.union([ AddressOrderByWithRelationInputSchema.array(),AddressOrderByWithRelationInputSchema ]).optional(),
  cursor: AddressWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const AddressGroupByArgsSchema: z.ZodType<Prisma.AddressGroupByArgs> = z.object({
  where: AddressWhereInputSchema.optional(),
  orderBy: z.union([ AddressOrderByWithAggregationInputSchema.array(),AddressOrderByWithAggregationInputSchema ]).optional(),
  by: AddressScalarFieldEnumSchema.array(),
  having: AddressScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const AddressFindUniqueArgsSchema: z.ZodType<Prisma.AddressFindUniqueArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  where: AddressWhereUniqueInputSchema,
}).strict()

export const AddressFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AddressFindUniqueOrThrowArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  where: AddressWhereUniqueInputSchema,
}).strict()

export const CommentFindFirstArgsSchema: z.ZodType<Prisma.CommentFindFirstArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithRelationInputSchema.array(),CommentOrderByWithRelationInputSchema ]).optional(),
  cursor: CommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CommentScalarFieldEnumSchema,CommentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CommentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CommentFindFirstOrThrowArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithRelationInputSchema.array(),CommentOrderByWithRelationInputSchema ]).optional(),
  cursor: CommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CommentScalarFieldEnumSchema,CommentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CommentFindManyArgsSchema: z.ZodType<Prisma.CommentFindManyArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithRelationInputSchema.array(),CommentOrderByWithRelationInputSchema ]).optional(),
  cursor: CommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CommentScalarFieldEnumSchema,CommentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const CommentAggregateArgsSchema: z.ZodType<Prisma.CommentAggregateArgs> = z.object({
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithRelationInputSchema.array(),CommentOrderByWithRelationInputSchema ]).optional(),
  cursor: CommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const CommentGroupByArgsSchema: z.ZodType<Prisma.CommentGroupByArgs> = z.object({
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithAggregationInputSchema.array(),CommentOrderByWithAggregationInputSchema ]).optional(),
  by: CommentScalarFieldEnumSchema.array(),
  having: CommentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const CommentFindUniqueArgsSchema: z.ZodType<Prisma.CommentFindUniqueArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereUniqueInputSchema,
}).strict()

export const CommentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CommentFindUniqueOrThrowArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereUniqueInputSchema,
}).strict()

export const FollowFindFirstArgsSchema: z.ZodType<Prisma.FollowFindFirstArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  where: FollowWhereInputSchema.optional(),
  orderBy: z.union([ FollowOrderByWithRelationInputSchema.array(),FollowOrderByWithRelationInputSchema ]).optional(),
  cursor: FollowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FollowScalarFieldEnumSchema,FollowScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const FollowFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FollowFindFirstOrThrowArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  where: FollowWhereInputSchema.optional(),
  orderBy: z.union([ FollowOrderByWithRelationInputSchema.array(),FollowOrderByWithRelationInputSchema ]).optional(),
  cursor: FollowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FollowScalarFieldEnumSchema,FollowScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const FollowFindManyArgsSchema: z.ZodType<Prisma.FollowFindManyArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  where: FollowWhereInputSchema.optional(),
  orderBy: z.union([ FollowOrderByWithRelationInputSchema.array(),FollowOrderByWithRelationInputSchema ]).optional(),
  cursor: FollowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FollowScalarFieldEnumSchema,FollowScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const FollowAggregateArgsSchema: z.ZodType<Prisma.FollowAggregateArgs> = z.object({
  where: FollowWhereInputSchema.optional(),
  orderBy: z.union([ FollowOrderByWithRelationInputSchema.array(),FollowOrderByWithRelationInputSchema ]).optional(),
  cursor: FollowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const FollowGroupByArgsSchema: z.ZodType<Prisma.FollowGroupByArgs> = z.object({
  where: FollowWhereInputSchema.optional(),
  orderBy: z.union([ FollowOrderByWithAggregationInputSchema.array(),FollowOrderByWithAggregationInputSchema ]).optional(),
  by: FollowScalarFieldEnumSchema.array(),
  having: FollowScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const FollowFindUniqueArgsSchema: z.ZodType<Prisma.FollowFindUniqueArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  where: FollowWhereUniqueInputSchema,
}).strict()

export const FollowFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FollowFindUniqueOrThrowArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  where: FollowWhereUniqueInputSchema,
}).strict()

export const LikeFindFirstArgsSchema: z.ZodType<Prisma.LikeFindFirstArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  where: LikeWhereInputSchema.optional(),
  orderBy: z.union([ LikeOrderByWithRelationInputSchema.array(),LikeOrderByWithRelationInputSchema ]).optional(),
  cursor: LikeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LikeScalarFieldEnumSchema,LikeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const LikeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LikeFindFirstOrThrowArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  where: LikeWhereInputSchema.optional(),
  orderBy: z.union([ LikeOrderByWithRelationInputSchema.array(),LikeOrderByWithRelationInputSchema ]).optional(),
  cursor: LikeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LikeScalarFieldEnumSchema,LikeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const LikeFindManyArgsSchema: z.ZodType<Prisma.LikeFindManyArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  where: LikeWhereInputSchema.optional(),
  orderBy: z.union([ LikeOrderByWithRelationInputSchema.array(),LikeOrderByWithRelationInputSchema ]).optional(),
  cursor: LikeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LikeScalarFieldEnumSchema,LikeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const LikeAggregateArgsSchema: z.ZodType<Prisma.LikeAggregateArgs> = z.object({
  where: LikeWhereInputSchema.optional(),
  orderBy: z.union([ LikeOrderByWithRelationInputSchema.array(),LikeOrderByWithRelationInputSchema ]).optional(),
  cursor: LikeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const LikeGroupByArgsSchema: z.ZodType<Prisma.LikeGroupByArgs> = z.object({
  where: LikeWhereInputSchema.optional(),
  orderBy: z.union([ LikeOrderByWithAggregationInputSchema.array(),LikeOrderByWithAggregationInputSchema ]).optional(),
  by: LikeScalarFieldEnumSchema.array(),
  having: LikeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const LikeFindUniqueArgsSchema: z.ZodType<Prisma.LikeFindUniqueArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  where: LikeWhereUniqueInputSchema,
}).strict()

export const LikeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LikeFindUniqueOrThrowArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  where: LikeWhereUniqueInputSchema,
}).strict()

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserSettingsFindFirstArgsSchema: z.ZodType<Prisma.UserSettingsFindFirstArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithRelationInputSchema.array(),UserSettingsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserSettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserSettingsScalarFieldEnumSchema,UserSettingsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserSettingsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserSettingsFindFirstOrThrowArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithRelationInputSchema.array(),UserSettingsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserSettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserSettingsScalarFieldEnumSchema,UserSettingsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserSettingsFindManyArgsSchema: z.ZodType<Prisma.UserSettingsFindManyArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithRelationInputSchema.array(),UserSettingsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserSettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserSettingsScalarFieldEnumSchema,UserSettingsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UserSettingsAggregateArgsSchema: z.ZodType<Prisma.UserSettingsAggregateArgs> = z.object({
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithRelationInputSchema.array(),UserSettingsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserSettingsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserSettingsGroupByArgsSchema: z.ZodType<Prisma.UserSettingsGroupByArgs> = z.object({
  where: UserSettingsWhereInputSchema.optional(),
  orderBy: z.union([ UserSettingsOrderByWithAggregationInputSchema.array(),UserSettingsOrderByWithAggregationInputSchema ]).optional(),
  by: UserSettingsScalarFieldEnumSchema.array(),
  having: UserSettingsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UserSettingsFindUniqueArgsSchema: z.ZodType<Prisma.UserSettingsFindUniqueArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereUniqueInputSchema,
}).strict()

export const UserSettingsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserSettingsFindUniqueOrThrowArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereUniqueInputSchema,
}).strict()

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const KeyFindFirstArgsSchema: z.ZodType<Prisma.KeyFindFirstArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const KeyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.KeyFindFirstOrThrowArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const KeyFindManyArgsSchema: z.ZodType<Prisma.KeyFindManyArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const KeyAggregateArgsSchema: z.ZodType<Prisma.KeyAggregateArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const KeyGroupByArgsSchema: z.ZodType<Prisma.KeyGroupByArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithAggregationInputSchema.array(),KeyOrderByWithAggregationInputSchema ]).optional(),
  by: KeyScalarFieldEnumSchema.array(),
  having: KeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const KeyFindUniqueArgsSchema: z.ZodType<Prisma.KeyFindUniqueArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict()

export const KeyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.KeyFindUniqueOrThrowArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict()

export const VerificationTokenFindFirstArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenFindManyArgsSchema: z.ZodType<Prisma.VerificationTokenFindManyArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const VerificationTokenAggregateArgsSchema: z.ZodType<Prisma.VerificationTokenAggregateArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VerificationTokenGroupByArgsSchema: z.ZodType<Prisma.VerificationTokenGroupByArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithAggregationInputSchema.array(),VerificationTokenOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationTokenScalarFieldEnumSchema.array(),
  having: VerificationTokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const VerificationTokenFindUniqueArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const SeriesCreateArgsSchema: z.ZodType<Prisma.SeriesCreateArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  data: z.union([ SeriesCreateInputSchema,SeriesUncheckedCreateInputSchema ]),
}).strict()

export const SeriesUpsertArgsSchema: z.ZodType<Prisma.SeriesUpsertArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereUniqueInputSchema,
  create: z.union([ SeriesCreateInputSchema,SeriesUncheckedCreateInputSchema ]),
  update: z.union([ SeriesUpdateInputSchema,SeriesUncheckedUpdateInputSchema ]),
}).strict()

export const SeriesCreateManyArgsSchema: z.ZodType<Prisma.SeriesCreateManyArgs> = z.object({
  data: z.union([ SeriesCreateManyInputSchema,SeriesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const SeriesDeleteArgsSchema: z.ZodType<Prisma.SeriesDeleteArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  where: SeriesWhereUniqueInputSchema,
}).strict()

export const SeriesUpdateArgsSchema: z.ZodType<Prisma.SeriesUpdateArgs> = z.object({
  select: SeriesSelectSchema.optional(),
  include: SeriesIncludeSchema.optional(),
  data: z.union([ SeriesUpdateInputSchema,SeriesUncheckedUpdateInputSchema ]),
  where: SeriesWhereUniqueInputSchema,
}).strict()

export const SeriesUpdateManyArgsSchema: z.ZodType<Prisma.SeriesUpdateManyArgs> = z.object({
  data: z.union([ SeriesUpdateManyMutationInputSchema,SeriesUncheckedUpdateManyInputSchema ]),
  where: SeriesWhereInputSchema.optional(),
}).strict()

export const SeriesDeleteManyArgsSchema: z.ZodType<Prisma.SeriesDeleteManyArgs> = z.object({
  where: SeriesWhereInputSchema.optional(),
}).strict()

export const EventCreateArgsSchema: z.ZodType<Prisma.EventCreateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
}).strict()

export const EventUpsertArgsSchema: z.ZodType<Prisma.EventUpsertArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
  create: z.union([ EventCreateInputSchema,EventUncheckedCreateInputSchema ]),
  update: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
}).strict()

export const EventCreateManyArgsSchema: z.ZodType<Prisma.EventCreateManyArgs> = z.object({
  data: z.union([ EventCreateManyInputSchema,EventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const EventDeleteArgsSchema: z.ZodType<Prisma.EventDeleteArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  where: EventWhereUniqueInputSchema,
}).strict()

export const EventUpdateArgsSchema: z.ZodType<Prisma.EventUpdateArgs> = z.object({
  select: EventSelectSchema.optional(),
  include: EventIncludeSchema.optional(),
  data: z.union([ EventUpdateInputSchema,EventUncheckedUpdateInputSchema ]),
  where: EventWhereUniqueInputSchema,
}).strict()

export const EventUpdateManyArgsSchema: z.ZodType<Prisma.EventUpdateManyArgs> = z.object({
  data: z.union([ EventUpdateManyMutationInputSchema,EventUncheckedUpdateManyInputSchema ]),
  where: EventWhereInputSchema.optional(),
}).strict()

export const EventDeleteManyArgsSchema: z.ZodType<Prisma.EventDeleteManyArgs> = z.object({
  where: EventWhereInputSchema.optional(),
}).strict()

export const RaceCreateArgsSchema: z.ZodType<Prisma.RaceCreateArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  data: z.union([ RaceCreateInputSchema,RaceUncheckedCreateInputSchema ]),
}).strict()

export const RaceUpsertArgsSchema: z.ZodType<Prisma.RaceUpsertArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
  create: z.union([ RaceCreateInputSchema,RaceUncheckedCreateInputSchema ]),
  update: z.union([ RaceUpdateInputSchema,RaceUncheckedUpdateInputSchema ]),
}).strict()

export const RaceCreateManyArgsSchema: z.ZodType<Prisma.RaceCreateManyArgs> = z.object({
  data: z.union([ RaceCreateManyInputSchema,RaceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const RaceDeleteArgsSchema: z.ZodType<Prisma.RaceDeleteArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict()

export const RaceUpdateArgsSchema: z.ZodType<Prisma.RaceUpdateArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  data: z.union([ RaceUpdateInputSchema,RaceUncheckedUpdateInputSchema ]),
  where: RaceWhereUniqueInputSchema,
}).strict()

export const RaceUpdateManyArgsSchema: z.ZodType<Prisma.RaceUpdateManyArgs> = z.object({
  data: z.union([ RaceUpdateManyMutationInputSchema,RaceUncheckedUpdateManyInputSchema ]),
  where: RaceWhereInputSchema.optional(),
}).strict()

export const RaceDeleteManyArgsSchema: z.ZodType<Prisma.RaceDeleteManyArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
}).strict()

export const CompCreateArgsSchema: z.ZodType<Prisma.CompCreateArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  data: z.union([ CompCreateInputSchema,CompUncheckedCreateInputSchema ]),
}).strict()

export const CompUpsertArgsSchema: z.ZodType<Prisma.CompUpsertArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereUniqueInputSchema,
  create: z.union([ CompCreateInputSchema,CompUncheckedCreateInputSchema ]),
  update: z.union([ CompUpdateInputSchema,CompUncheckedUpdateInputSchema ]),
}).strict()

export const CompCreateManyArgsSchema: z.ZodType<Prisma.CompCreateManyArgs> = z.object({
  data: z.union([ CompCreateManyInputSchema,CompCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const CompDeleteArgsSchema: z.ZodType<Prisma.CompDeleteArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  where: CompWhereUniqueInputSchema,
}).strict()

export const CompUpdateArgsSchema: z.ZodType<Prisma.CompUpdateArgs> = z.object({
  select: CompSelectSchema.optional(),
  include: CompIncludeSchema.optional(),
  data: z.union([ CompUpdateInputSchema,CompUncheckedUpdateInputSchema ]),
  where: CompWhereUniqueInputSchema,
}).strict()

export const CompUpdateManyArgsSchema: z.ZodType<Prisma.CompUpdateManyArgs> = z.object({
  data: z.union([ CompUpdateManyMutationInputSchema,CompUncheckedUpdateManyInputSchema ]),
  where: CompWhereInputSchema.optional(),
}).strict()

export const CompDeleteManyArgsSchema: z.ZodType<Prisma.CompDeleteManyArgs> = z.object({
  where: CompWhereInputSchema.optional(),
}).strict()

export const ResultCreateArgsSchema: z.ZodType<Prisma.ResultCreateArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  data: z.union([ ResultCreateInputSchema,ResultUncheckedCreateInputSchema ]),
}).strict()

export const ResultUpsertArgsSchema: z.ZodType<Prisma.ResultUpsertArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereUniqueInputSchema,
  create: z.union([ ResultCreateInputSchema,ResultUncheckedCreateInputSchema ]),
  update: z.union([ ResultUpdateInputSchema,ResultUncheckedUpdateInputSchema ]),
}).strict()

export const ResultCreateManyArgsSchema: z.ZodType<Prisma.ResultCreateManyArgs> = z.object({
  data: z.union([ ResultCreateManyInputSchema,ResultCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const ResultDeleteArgsSchema: z.ZodType<Prisma.ResultDeleteArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  where: ResultWhereUniqueInputSchema,
}).strict()

export const ResultUpdateArgsSchema: z.ZodType<Prisma.ResultUpdateArgs> = z.object({
  select: ResultSelectSchema.optional(),
  include: ResultIncludeSchema.optional(),
  data: z.union([ ResultUpdateInputSchema,ResultUncheckedUpdateInputSchema ]),
  where: ResultWhereUniqueInputSchema,
}).strict()

export const ResultUpdateManyArgsSchema: z.ZodType<Prisma.ResultUpdateManyArgs> = z.object({
  data: z.union([ ResultUpdateManyMutationInputSchema,ResultUncheckedUpdateManyInputSchema ]),
  where: ResultWhereInputSchema.optional(),
}).strict()

export const ResultDeleteManyArgsSchema: z.ZodType<Prisma.ResultDeleteManyArgs> = z.object({
  where: ResultWhereInputSchema.optional(),
}).strict()

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict()

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict()

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
}).strict()

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
}).strict()

export const VenueCreateArgsSchema: z.ZodType<Prisma.VenueCreateArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  data: z.union([ VenueCreateInputSchema,VenueUncheckedCreateInputSchema ]),
}).strict()

export const VenueUpsertArgsSchema: z.ZodType<Prisma.VenueUpsertArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereUniqueInputSchema,
  create: z.union([ VenueCreateInputSchema,VenueUncheckedCreateInputSchema ]),
  update: z.union([ VenueUpdateInputSchema,VenueUncheckedUpdateInputSchema ]),
}).strict()

export const VenueCreateManyArgsSchema: z.ZodType<Prisma.VenueCreateManyArgs> = z.object({
  data: z.union([ VenueCreateManyInputSchema,VenueCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const VenueDeleteArgsSchema: z.ZodType<Prisma.VenueDeleteArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  where: VenueWhereUniqueInputSchema,
}).strict()

export const VenueUpdateArgsSchema: z.ZodType<Prisma.VenueUpdateArgs> = z.object({
  select: VenueSelectSchema.optional(),
  include: VenueIncludeSchema.optional(),
  data: z.union([ VenueUpdateInputSchema,VenueUncheckedUpdateInputSchema ]),
  where: VenueWhereUniqueInputSchema,
}).strict()

export const VenueUpdateManyArgsSchema: z.ZodType<Prisma.VenueUpdateManyArgs> = z.object({
  data: z.union([ VenueUpdateManyMutationInputSchema,VenueUncheckedUpdateManyInputSchema ]),
  where: VenueWhereInputSchema.optional(),
}).strict()

export const VenueDeleteManyArgsSchema: z.ZodType<Prisma.VenueDeleteManyArgs> = z.object({
  where: VenueWhereInputSchema.optional(),
}).strict()

export const AddressCreateArgsSchema: z.ZodType<Prisma.AddressCreateArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  data: z.union([ AddressCreateInputSchema,AddressUncheckedCreateInputSchema ]).optional(),
}).strict()

export const AddressUpsertArgsSchema: z.ZodType<Prisma.AddressUpsertArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  where: AddressWhereUniqueInputSchema,
  create: z.union([ AddressCreateInputSchema,AddressUncheckedCreateInputSchema ]),
  update: z.union([ AddressUpdateInputSchema,AddressUncheckedUpdateInputSchema ]),
}).strict()

export const AddressCreateManyArgsSchema: z.ZodType<Prisma.AddressCreateManyArgs> = z.object({
  data: z.union([ AddressCreateManyInputSchema,AddressCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const AddressDeleteArgsSchema: z.ZodType<Prisma.AddressDeleteArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  where: AddressWhereUniqueInputSchema,
}).strict()

export const AddressUpdateArgsSchema: z.ZodType<Prisma.AddressUpdateArgs> = z.object({
  select: AddressSelectSchema.optional(),
  include: AddressIncludeSchema.optional(),
  data: z.union([ AddressUpdateInputSchema,AddressUncheckedUpdateInputSchema ]),
  where: AddressWhereUniqueInputSchema,
}).strict()

export const AddressUpdateManyArgsSchema: z.ZodType<Prisma.AddressUpdateManyArgs> = z.object({
  data: z.union([ AddressUpdateManyMutationInputSchema,AddressUncheckedUpdateManyInputSchema ]),
  where: AddressWhereInputSchema.optional(),
}).strict()

export const AddressDeleteManyArgsSchema: z.ZodType<Prisma.AddressDeleteManyArgs> = z.object({
  where: AddressWhereInputSchema.optional(),
}).strict()

export const CommentCreateArgsSchema: z.ZodType<Prisma.CommentCreateArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  data: z.union([ CommentCreateInputSchema,CommentUncheckedCreateInputSchema ]),
}).strict()

export const CommentUpsertArgsSchema: z.ZodType<Prisma.CommentUpsertArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereUniqueInputSchema,
  create: z.union([ CommentCreateInputSchema,CommentUncheckedCreateInputSchema ]),
  update: z.union([ CommentUpdateInputSchema,CommentUncheckedUpdateInputSchema ]),
}).strict()

export const CommentCreateManyArgsSchema: z.ZodType<Prisma.CommentCreateManyArgs> = z.object({
  data: z.union([ CommentCreateManyInputSchema,CommentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const CommentDeleteArgsSchema: z.ZodType<Prisma.CommentDeleteArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereUniqueInputSchema,
}).strict()

export const CommentUpdateArgsSchema: z.ZodType<Prisma.CommentUpdateArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  data: z.union([ CommentUpdateInputSchema,CommentUncheckedUpdateInputSchema ]),
  where: CommentWhereUniqueInputSchema,
}).strict()

export const CommentUpdateManyArgsSchema: z.ZodType<Prisma.CommentUpdateManyArgs> = z.object({
  data: z.union([ CommentUpdateManyMutationInputSchema,CommentUncheckedUpdateManyInputSchema ]),
  where: CommentWhereInputSchema.optional(),
}).strict()

export const CommentDeleteManyArgsSchema: z.ZodType<Prisma.CommentDeleteManyArgs> = z.object({
  where: CommentWhereInputSchema.optional(),
}).strict()

export const FollowCreateArgsSchema: z.ZodType<Prisma.FollowCreateArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  data: z.union([ FollowCreateInputSchema,FollowUncheckedCreateInputSchema ]),
}).strict()

export const FollowUpsertArgsSchema: z.ZodType<Prisma.FollowUpsertArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  where: FollowWhereUniqueInputSchema,
  create: z.union([ FollowCreateInputSchema,FollowUncheckedCreateInputSchema ]),
  update: z.union([ FollowUpdateInputSchema,FollowUncheckedUpdateInputSchema ]),
}).strict()

export const FollowCreateManyArgsSchema: z.ZodType<Prisma.FollowCreateManyArgs> = z.object({
  data: z.union([ FollowCreateManyInputSchema,FollowCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const FollowDeleteArgsSchema: z.ZodType<Prisma.FollowDeleteArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  where: FollowWhereUniqueInputSchema,
}).strict()

export const FollowUpdateArgsSchema: z.ZodType<Prisma.FollowUpdateArgs> = z.object({
  select: FollowSelectSchema.optional(),
  include: FollowIncludeSchema.optional(),
  data: z.union([ FollowUpdateInputSchema,FollowUncheckedUpdateInputSchema ]),
  where: FollowWhereUniqueInputSchema,
}).strict()

export const FollowUpdateManyArgsSchema: z.ZodType<Prisma.FollowUpdateManyArgs> = z.object({
  data: z.union([ FollowUpdateManyMutationInputSchema,FollowUncheckedUpdateManyInputSchema ]),
  where: FollowWhereInputSchema.optional(),
}).strict()

export const FollowDeleteManyArgsSchema: z.ZodType<Prisma.FollowDeleteManyArgs> = z.object({
  where: FollowWhereInputSchema.optional(),
}).strict()

export const LikeCreateArgsSchema: z.ZodType<Prisma.LikeCreateArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  data: z.union([ LikeCreateInputSchema,LikeUncheckedCreateInputSchema ]),
}).strict()

export const LikeUpsertArgsSchema: z.ZodType<Prisma.LikeUpsertArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  where: LikeWhereUniqueInputSchema,
  create: z.union([ LikeCreateInputSchema,LikeUncheckedCreateInputSchema ]),
  update: z.union([ LikeUpdateInputSchema,LikeUncheckedUpdateInputSchema ]),
}).strict()

export const LikeCreateManyArgsSchema: z.ZodType<Prisma.LikeCreateManyArgs> = z.object({
  data: z.union([ LikeCreateManyInputSchema,LikeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const LikeDeleteArgsSchema: z.ZodType<Prisma.LikeDeleteArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  where: LikeWhereUniqueInputSchema,
}).strict()

export const LikeUpdateArgsSchema: z.ZodType<Prisma.LikeUpdateArgs> = z.object({
  select: LikeSelectSchema.optional(),
  include: LikeIncludeSchema.optional(),
  data: z.union([ LikeUpdateInputSchema,LikeUncheckedUpdateInputSchema ]),
  where: LikeWhereUniqueInputSchema,
}).strict()

export const LikeUpdateManyArgsSchema: z.ZodType<Prisma.LikeUpdateManyArgs> = z.object({
  data: z.union([ LikeUpdateManyMutationInputSchema,LikeUncheckedUpdateManyInputSchema ]),
  where: LikeWhereInputSchema.optional(),
}).strict()

export const LikeDeleteManyArgsSchema: z.ZodType<Prisma.LikeDeleteManyArgs> = z.object({
  where: LikeWhereInputSchema.optional(),
}).strict()

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict()

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict()

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict()

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict()

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict()

export const UserSettingsCreateArgsSchema: z.ZodType<Prisma.UserSettingsCreateArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  data: z.union([ UserSettingsCreateInputSchema,UserSettingsUncheckedCreateInputSchema ]).optional(),
}).strict()

export const UserSettingsUpsertArgsSchema: z.ZodType<Prisma.UserSettingsUpsertArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereUniqueInputSchema,
  create: z.union([ UserSettingsCreateInputSchema,UserSettingsUncheckedCreateInputSchema ]),
  update: z.union([ UserSettingsUpdateInputSchema,UserSettingsUncheckedUpdateInputSchema ]),
}).strict()

export const UserSettingsCreateManyArgsSchema: z.ZodType<Prisma.UserSettingsCreateManyArgs> = z.object({
  data: z.union([ UserSettingsCreateManyInputSchema,UserSettingsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const UserSettingsDeleteArgsSchema: z.ZodType<Prisma.UserSettingsDeleteArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  where: UserSettingsWhereUniqueInputSchema,
}).strict()

export const UserSettingsUpdateArgsSchema: z.ZodType<Prisma.UserSettingsUpdateArgs> = z.object({
  select: UserSettingsSelectSchema.optional(),
  include: UserSettingsIncludeSchema.optional(),
  data: z.union([ UserSettingsUpdateInputSchema,UserSettingsUncheckedUpdateInputSchema ]),
  where: UserSettingsWhereUniqueInputSchema,
}).strict()

export const UserSettingsUpdateManyArgsSchema: z.ZodType<Prisma.UserSettingsUpdateManyArgs> = z.object({
  data: z.union([ UserSettingsUpdateManyMutationInputSchema,UserSettingsUncheckedUpdateManyInputSchema ]),
  where: UserSettingsWhereInputSchema.optional(),
}).strict()

export const UserSettingsDeleteManyArgsSchema: z.ZodType<Prisma.UserSettingsDeleteManyArgs> = z.object({
  where: UserSettingsWhereInputSchema.optional(),
}).strict()

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict()

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict()

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict()

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
}).strict()

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
}).strict()

export const KeyCreateArgsSchema: z.ZodType<Prisma.KeyCreateArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  data: z.union([ KeyCreateInputSchema,KeyUncheckedCreateInputSchema ]),
}).strict()

export const KeyUpsertArgsSchema: z.ZodType<Prisma.KeyUpsertArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
  create: z.union([ KeyCreateInputSchema,KeyUncheckedCreateInputSchema ]),
  update: z.union([ KeyUpdateInputSchema,KeyUncheckedUpdateInputSchema ]),
}).strict()

export const KeyCreateManyArgsSchema: z.ZodType<Prisma.KeyCreateManyArgs> = z.object({
  data: z.union([ KeyCreateManyInputSchema,KeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const KeyDeleteArgsSchema: z.ZodType<Prisma.KeyDeleteArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict()

export const KeyUpdateArgsSchema: z.ZodType<Prisma.KeyUpdateArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  data: z.union([ KeyUpdateInputSchema,KeyUncheckedUpdateInputSchema ]),
  where: KeyWhereUniqueInputSchema,
}).strict()

export const KeyUpdateManyArgsSchema: z.ZodType<Prisma.KeyUpdateManyArgs> = z.object({
  data: z.union([ KeyUpdateManyMutationInputSchema,KeyUncheckedUpdateManyInputSchema ]),
  where: KeyWhereInputSchema.optional(),
}).strict()

export const KeyDeleteManyArgsSchema: z.ZodType<Prisma.KeyDeleteManyArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
}).strict()

export const VerificationTokenCreateArgsSchema: z.ZodType<Prisma.VerificationTokenCreateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
}).strict()

export const VerificationTokenUpsertArgsSchema: z.ZodType<Prisma.VerificationTokenUpsertArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  create: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
  update: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
}).strict()

export const VerificationTokenCreateManyArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyArgs> = z.object({
  data: z.union([ VerificationTokenCreateManyInputSchema,VerificationTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const VerificationTokenDeleteArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenUpdateArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict()

export const VerificationTokenUpdateManyArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateManyArgs> = z.object({
  data: z.union([ VerificationTokenUpdateManyMutationInputSchema,VerificationTokenUncheckedUpdateManyInputSchema ]),
  where: VerificationTokenWhereInputSchema.optional(),
}).strict()

export const VerificationTokenDeleteManyArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteManyArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
}).strict()