generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

generator zod {
  provider                 = "zod-prisma-types"
  output                   = "../src/lib/server/generated/zod"
  writeNullishInModelTypes = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL")
}

model Series {
  id             String        @id @unique @default(cuid())
  name           String
  description    String? /// @zod.string.optional
  rest           Json?
  Events         Event[]
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  publisherId    String?
  Publisher      User?         @relation(fields: [publisherId], references: [id])
  Follows        Follow[]
  Likes          Like[]
  Comments       Comment[]
  Venues         Venue[]
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
}

model Event {
  id             String        @id @default(cuid())
  eventeid       String?
  uniqueIdString String        @unique
  name           String
  eventwebsite   String?
  venueName      String?
  description    String?
  titleImage     String?
  public         Boolean       @default(true)
  complete       Boolean       @default(false)
  /// [fileInfo]
  fileInfo       Json?
  /// [resultColumns]
  resultColumns  Json?
  /// [eventRest]
  rest           Json?
  email          String?
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  publisherId    String?
  Publisher      User?         @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  seriesId       String?
  Series         Series?       @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  venueId        String?
  Venue          Venue?        @relation(fields: [venueId], references: [id], onDelete: SetNull)
  Races          Race[]
  Results        Result[]
  Follows        Follow[]
  Likes          Like[]
  Comps          Comp[]
  // Comments       EventComment[]
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  Comments       Comment[]
  // EventComment   EventComment[]
}

model Race {
  id               String    @id @unique @default(cuid())
  raceId           String?
  uniqueRaceString String    @unique
  name             String?
  starts           Json?
  rank             String?
  date             String?
  time             String?
  notes            String?
  sailed           String?
  rating           String?
  resultColumns    Json?
  /// [raceRest]
  rest             Json?
  Event            Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String?
  Publisher        User?     @relation(fields: [publisherId], references: [id], onDelete: SetNull)
  publisherId      String?
  Results          Result[]
  Follows          Follow[]
  Likes            Like[]
  Comps            Comp[]
  Comments         Comment[]
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
}

model Comp {
  id          String    @id @default(cuid())
  compId      String    @unique // right now this will only be unique on the same event
  // uniqueCompId String?   @unique
  description String?
  raceId      String?
  club        String?
  boat        String?
  skipper     String?
  sailno      String?
  fleet       String?
  division    String?
  rating      String?
  rank        String?
  nett        String?
  total       String?
  /// [compRest]
  rest        Json?
  image       String?
  publisherId String?
  Publisher   User?     @relation(fields: [publisherId], references: [id], onDelete: SetNull)
  Events      Event[]
  Results     Result[]
  Follows     Follow[]
  Likes       Like[]
  Commments   Comment[]
  Races       Race[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  @@index([compId])
}

model Result {
  id             String    @id @unique @default(cuid())
  resultId       String    @unique
  points         String?
  position       String?
  discard        String?
  resultType     String? // probably could be an enum, but they are a pain
  code           String?
  start          String?
  finish         String?
  corrected      String?
  elasped        String?
  elapsedWin     String?
  ratingWin      String?
  raceRating     String?
  supposedRating String?
  rrset          String?
  Comp           Comp?     @relation(fields: [compId], references: [id], onDelete: Cascade)
  Event          Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Publisher      User?     @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  Race           Race?     @relation(fields: [raceId], references: [id], onDelete: Cascade)
  publisherId    String
  eventId        String?
  compId         String?
  raceId         String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  @@index([raceId])
}

model Organization {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  tag         String?
  website     String?
  email       String?
  logo        String? /// @zod.string.url
  titleImage  String?
  ownerId     String?
  Owner       User?     @relation(fields: [ownerId], references: [id])
  Events      Event[]
  Series      Series[]
  Follows     Follow[]
  Likes       Like[]
  Comments    Comment[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  Addresses   Address[]
  Contact     Contact[]
}

model Venue {
  id          String    @id @unique @default(cuid())
  name        String    @unique
  description String?
  website     String?
  email       String?
  phone       String?
  burgee      String?
  titleImage  String?
  Events      Event[]
  Series      Series[]
  Likes       Like[]
  Follows     Follow[]
  Comments    Comment[]
  Addresses   Address[]
  publisherId String?
  Publisher   User?     @relation(fields: [publisherId], references: [id], onDelete: SetNull)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  Contacts    Contact[]
}

model Address {
  id             String        @id @unique @default(cuid())
  label          String // @default("Mailing Address")
  po             String?
  street         String?
  city           String?
  state          String?
  country        String?
  code           String?
  Venue          Venue?        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId        String?
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  Publisher      User?         @relation(fields: [publisherId], references: [id], onDelete: SetNull)
  publisherId    String?
  Contact        Contact[]
}

model Contact {
  id             String        @id @unique @default(cuid())
  label          String
  type           String?
  email          String?
  phone          String?
  Address        Address?      @relation(fields: [addressId], references: [id])
  addressId      String?
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?
  Venue          Venue?        @relation(fields: [venueId], references: [id])
  venueId        String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
}

model Comment {
  id             String        @id @unique @default(cuid())
  type           String?
  ref            String?
  comment        String
  eventId        String?
  Event          Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId         String
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Likes          Like[]
  Race           Race?         @relation(fields: [raceId], references: [id], onDelete: Cascade)
  raceId         String?
  Series         Series?       @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId       String?
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  Venue          Venue?        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId        String?
  Comp           Comp?         @relation(fields: [compId], references: [id], onDelete: Cascade)
  compId         String?
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  Follow         Follow[]
}

model Follow {
  id             String        @id @unique @default(cuid())
  type           String
  itemId         String?
  Comment        Comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Comp           Comp?         @relation(fields: [compId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Event          Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Venue          Venue?        @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Race           Race?         @relation(fields: [raceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Series         Series?       @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  commentId      String?
  compId         String?
  eventId        String?
  organizationId String?
  venueId        String?
  raceId         String?
  seriesId       String?
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
}

model Like {
  id             String        @id @unique @default(cuid())
  userId         String
  type           String
  itemId         String?
  seriesId       String?
  eventId        String?
  organizationId String?
  raceId         String?
  compId         String?
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  Comp           Comp?         @relation(fields: [compId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Event          Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Race           Race?         @relation(fields: [raceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Series         Series?       @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // eventComment   EventComment? @relation(fields: [eventCommentId], references: [id])
  eventCommentId String?
  Comment        Comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId      String?
  Venue          Venue?        @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venueId        String?
}

model User {
  id             String         @id @unique
  username       String
  firstname      String?
  lastname       String?
  email          String?        @unique
  email_verified Int?
  name           String?
  avatar         String?
  auth_session   Session[]
  auth_key       Key[]
  UserSettings   UserSettings?
  Series         Series[]
  Event          Event[]
  Race           Race[]
  Comp           Comp[]
  Result         Result[]
  Organization   Organization[]
  Venue          Venue[]
  // eventComment   EventComment[]
  follow         Follow[]
  like           Like[]
  Comment        Comment[]
  Address        Address[]
  Contact        Contact[]
}

model UserSettings {
  id       String  @id @unique @default(cuid())
  theme    String?
  language String? @default("english")
  userId   String? @unique
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model VerificationToken {
  id      String @id @unique
  user_id String @unique
  expires BigInt
}
