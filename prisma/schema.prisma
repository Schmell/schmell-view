generator client {
  provider = "prisma-client-js"
}

// generator json {
//   provider  = "prisma-json-types-generator"
//   namespace = "PrismaJson"
// }

generator zod {
  provider                 = "zod-prisma-types"
  output                   = "../src/lib/server/generated/zod"
  writeNullishInModelTypes = true
}

datasource db {
  provider  = "postgresql"
  url       = env("ACC_DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Series {
  id             String        @id @unique @default(cuid())
  name           String
  description    String? /// @zod.string.optional
  rest           Json?
  organizationId String?
  publisherId    String?
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  Events         Event[]
  Org            Organization? @relation(fields: [organizationId], references: [id])
  Publisher      User?         @relation(fields: [publisherId], references: [id])
  Follows        Follow[]
  Likes          Like[]
  Comments       Comment[]
  Venues         Venue[]
}

model Event {
  id             String        @id @default(cuid())
  eventeid       String
  uniqueIdString String        @unique
  name           String
  eventwebsite   String?
  venueName      String?
  description    String?
  titleImage     String?
  public         Boolean       @default(true)
  /// [fileInfo]
  fileInfo       Json?
  /// [resultColumns]
  resultColumns  Json?
  /// [eventRest]
  rest           Json?
  email          String?
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  publisherId    String?
  Publisher      User?         @relation(fields: [publisherId], references: [id])
  seriesId       String?
  Series         Series?       @relation(fields: [seriesId], references: [id])
  venueId        String?
  Venue          Venue?        @relation(fields: [venueId], references: [id])
  Races          Race[]
  Results        Result[]
  Follows        Follow[]
  Likes          Like[]
  Comps          Comp[]
  // Comments       EventComment[]
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  Comments       Comment[]
  // EventComment   EventComment[]
}

model Race {
  id               String    @id @unique @default(cuid())
  raceId           String?
  uniqueRaceString String    @unique
  name             String?
  starts           Json?
  rank             String?
  date             String?
  time             String?
  notes            String?
  sailed           String?
  rating           String? // im not sure what this is
  resultColumns    Json?
  /// [raceRest]
  rest             Json?
  eventId          String?
  Event            Event?    @relation(fields: [eventId], references: [id])
  publisherId      String?
  Publisher        User?     @relation(fields: [publisherId], references: [id])
  Results          Result[]
  Follows          Follow[]
  Likes            Like[]
  Comps            Comp[]
  Comments         Comment[]
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
}

model Comp {
  id          String    @id @default(cuid())
  compId      String    @unique // right now this will only be unique on the same event
  raceId      String?
  club        String?
  boat        String?
  skipper     String?
  fleet       String?
  division    String?
  rating      String?
  rank        String?
  nett        String?
  total       String?
  /// [compRest]
  rest        Json?
  image       String?
  publisherId String?
  Publisher   User?     @relation(fields: [publisherId], references: [id])
  Events      Event[]
  Results     Result[]
  Follows     Follow[]
  Likes       Like[]
  Commments   Comment[]
  Races       Race[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  @@index([compId])
}

model Result {
  id             String    @id @unique @default(cuid())
  resultId       String    @unique
  points         String?
  position       String?
  discard        String?
  resultType     String? // probably could be an enum, but they are a pain
  code           String?
  start          String?
  finish         String?
  corrected      String?
  elasped        String?
  elapsedWin     String?
  ratingWin      String?
  raceRating     String?
  supposedRating String?
  rrset          String?
  Comp           Comp?     @relation(fields: [compId], references: [id])
  Event          Event?    @relation(fields: [eventId], references: [id])
  Publisher      User      @relation(fields: [publisherId], references: [id])
  Race           Race?     @relation(fields: [raceId], references: [id])
  publisherId    String
  eventId        String?
  compId         String?
  raceId         String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  @@index([raceId])
}

model Organization {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  tag         String?
  website     String?
  email       String?
  logo        String? /// @zod.string.url
  titleImage  String?
  ownerId     String?
  Owner       User?     @relation(fields: [ownerId], references: [id])
  Events      Event[]
  Series      Series[]
  Follows     Follow[]
  Likes       Like[]
  Comments    Comment[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Venue {
  id          String    @id @unique @default(cuid())
  name        String    @unique
  website     String?
  email       String?
  burgee      String?
  address     Json?
  publisherId String?
  Events      Event[]
  Publisher   User?     @relation(fields: [publisherId], references: [id])
  Series      Series[]
  Likes       Like[]
  Comments    Comment[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

// model EventComment {
//   type      String?
//   ref       String?
//   comment   String
//   eventId   String?
//   Event     Event?    @relation(fields: [eventId], references: [id])
//   userId    String
//   User      User      @relation(fields: [userId], references: [id])
//   Likes     Like[]
//   id        String    @id @unique @default(cuid())
//   createdAt DateTime? @default(now())
//   updatedAt DateTime? @updatedAt
// }

model Comment {
  id             String        @id @unique @default(cuid())
  type           String?
  ref            String?
  comment        String
  eventId        String?
  Event          Event?        @relation(fields: [eventId], references: [id])
  userId         String
  User           User          @relation(fields: [userId], references: [id])
  Likes          Like[]
  Race           Race?         @relation(fields: [raceId], references: [id])
  raceId         String?
  Series         Series?       @relation(fields: [seriesId], references: [id])
  seriesId       String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  Venue          Venue?        @relation(fields: [venueId], references: [id])
  venueId        String?
  Comp           Comp?         @relation(fields: [compId], references: [id])
  compId         String?
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
}

// enum CommentType {
//   series
//   event
//   race
//   result
//   comp
// }

model Follow {
  id             String        @id @unique @default(cuid())
  userId         String
  type           String
  seriesId       String?
  eventId        String?
  organizationId String?
  raceId         String?
  compId         String?
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  Comp           Comp?         @relation(fields: [compId], references: [id])
  Event          Event?        @relation(fields: [eventId], references: [id])
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  Race           Race?         @relation(fields: [raceId], references: [id])
  Series         Series?       @relation(fields: [seriesId], references: [id])
  User           User          @relation(fields: [userId], references: [id])
}

model Like {
  id             String        @id @unique @default(cuid())
  userId         String
  type           String
  itemId         String?
  seriesId       String?
  eventId        String?
  organizationId String?
  raceId         String?
  compId         String?
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  Comp           Comp?         @relation(fields: [compId], references: [id])
  Event          Event?        @relation(fields: [eventId], references: [id])
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  Race           Race?         @relation(fields: [raceId], references: [id])
  Series         Series?       @relation(fields: [seriesId], references: [id])
  User           User          @relation(fields: [userId], references: [id])
  // eventComment   EventComment? @relation(fields: [eventCommentId], references: [id])
  eventCommentId String?
  Comment        Comment?      @relation(fields: [commentId], references: [id])
  commentId      String?
  Venue          Venue?        @relation(fields: [venueId], references: [id])
  venueId        String?
}

model User {
  id             String         @id @unique
  username       String
  firstname      String?
  lastname       String?
  email          String?        @unique
  email_verified Int?
  name           String?
  avatar         String?
  auth_session   Session[]
  auth_key       Key[]
  UserSettings   UserSettings?
  Series         Series[]
  Event          Event[]
  Race           Race[]
  Comp           Comp[]
  Result         Result[]
  Organization   Organization[]
  Venue          Venue[]
  // eventComment   EventComment[]
  follow         Follow[]
  like           Like[]
  Comment        Comment[]
}

model UserSettings {
  id       String  @id @unique @default(cuid())
  theme    String?
  language String? @default("english")
  userId   String? @unique
  user     User?   @relation(fields: [userId], references: [id])
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model VerificationToken {
  id      String @id @unique
  user_id String @unique
  expires BigInt
}
